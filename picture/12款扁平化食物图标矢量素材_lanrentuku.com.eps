%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: Food icons squares set 2.eps
%%Creator: Adobe Illustrator(R) 13.0
%%For: Sashatigar
%%CreationDate: 1/7/2015
%%BoundingBox: 0 0 567 567
%%HiResBoundingBox: 0 0 566.9297 566.9288
%%CropBox: 0 0 566.9297 566.9288
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 13.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 13.0.0 x406 R agm 4.4378 ct 5.1039%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 128 8%%BeginData: 34773 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF
%0066000066330066660066990066CC0066FF009900009933009966009999
%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66
%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333
%3333663333993333CC3333FF3366003366333366663366993366CC3366FF
%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99
%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033
%6600666600996600CC6600FF6633006633336633666633996633CC6633FF
%6666006666336666666666996666CC6666FF669900669933669966669999
%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33
%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF
%9933009933339933669933999933CC9933FF996600996633996666996699
%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33
%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF
%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399
%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933
%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF
%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC
%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699
%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33
%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100
%000011111111220000002200000022222222440000004400000044444444
%550000005500000055555555770000007700000077777777880000008800
%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB
%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF
%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF
%524C45B592B592B592B592B592B592B592B592B592B592B592B592B592B5
%92B592B592B592B592B592B592B592B592B592B592B592B592B592B592B5
%92B592B592B592B592B592B592B592B592B592B592B592B592B592B592B5
%92B592B592B592B592B592B592B592B592B592B592B592B592B592B592B5
%92B592B592B592B592B59292B4929292B4929292B4929292B4929292B492
%9292B4929292B4929292B4929292B4929292B4929292B4929292B4929292
%B4929292B4929292B4929292B4929292B4929292B4929292B4929292B492
%9292B4929292B4929292B4929292B4929292B4929292B4929292B4929292
%B4929292B4929292B4929292B4929292B49292B492B592B492B592B492B5
%92B492B592B492B592B492B592B492B592B492B592B492B592B492B592B4
%92B592B492B592B492B592B492B592B492B592B492B592B492B592B492B5
%92B492B592B492B592B492B592B492B592B492B592B492B592B492B592B4
%92B592B492B592B492B592B492B592B492B592B492B592B492B59292928C
%9292928C928C928C928C928C928C928C9292928C9292928C9292928C9292
%928C9292928C9292928C9292928C9292928C9292928C9292928C9292928C
%B592928C9292928C9292928C9292928C9292928C9292928C9292928C9292
%928C9292928C928C928C928C928C9292928C9292928C9292928C9292928C
%9292928C92B592B592B492BB92BB92BB92BB92BB99B599BB93BB92B592B5
%92B592B592B592B592B592B592B592B592B592B592B592B592B592B592B5
%92B592B592B492CAFFFFC3B592B592B592B592B592B592B592B592B592B5
%92B592B592B592B592B592B592BB98BA98BB98BA98BB92B592B592B592B5
%92B592B592B592B592B592B5FD0492B492A099C2A0A099BC9AA099C9A0A0
%92C3999292B4929292B4929292B4929292B4929292B4929292B4929292B4
%929292B492928C928C928C928CC9FD04FFA1928C928C928C9292B4929292
%B4929292B4929292B4929292B4FD0592C0FD0AC69E928CB4929292B49292
%92B4929292B4929292B4B592B492B499C299BCA0BC99C9A0C2A1C2A0BB9A
%BC92B492B592B492B592B492B592B492B592B492B592B492B592B492B592
%B492B592B593BB93BB93BCFD06FF93BB93BB93BB92B492B592B492B592B4
%92B592B492B592B492B592B492C0C6C6C6C0C0FE9EBBBAC6C6FEBAB492B5
%92B492B592B492B592B492B592B4928C9292928C9AFD06A09AA0A0A09AA0
%92A0999292928C9292928C9292928C9292928C9292928C9292928C929292
%8C9292928CC2CAFFCAFFFFFFCAFD07FFCAFD05FF9A928C9292928C929292
%8C9292928C9292928C928C92C6C6C6C08CC0C692989298C6C6C692929298
%98928C9298928C9298928C929292B592B592B593BB92C299C299BB92BC92
%BB9ABB93BB92B592B592B592B592B592B592B592B592B592B592B592B592
%B592B592B58CBCFD16FF99B492B592B592B592B592B592B592B592B592B5
%92FD04C6BBBAFEC0C692C0C6FEC0B592BB9EC09EB598C69EBB9EC09EBB92
%B59292B4929292B48C928CB48C928CB48C928CB48C928C9292928CB4FD04
%928C9292B492928CB48C928CB492928C9292928CB49292A1FD16FFC38CB4
%929292B4929292B4929292B4929292B49292C6C6C6FE98BAC6FE98BAFD04
%C6929292C08C9E989E9298989E929892B49292B492B592B492B598B492B5
%92BA92B592B492BB92BA98B598BA92B592B492BB92B492BB98BA92BB92BA
%92BB92BA98BB92B492B58CC3FD16FFC3B492B592B492B592B492B592B492
%B592B492B592FD04C6BA98FEC6B4C0FEC6C6C0B592BA9EBB9EBA9EBB92B4
%98C092B492B59292928C9292BA98C69EC098C0989298C098BA98C098C09E
%C0C0BA92C092C098C092C098C092989EC09EBA9EC09EC09EC098928C9293
%FD16FFBB8C928C9292928C9292928C9292928C9292928CB4FD04C698BAC6
%BA92C6C0C6C6C68C92929E9E98929E92928C92989E92928C92B592B592BB
%98C1BAC6C6C7C0BA92C1BAC0C0C1C0C098C698C6C0C7C0B5C0C1BABAC6C1
%BAB598BBC0C092C1BAC698C1C6C092B592B499CFFD12FFCAC292B592B592
%B592B592B592B592B592B592B592B592C6C6FEC0B592C6BAB592C7C6FEC0
%B592BA9EBB92B59EBB98BA98B59EBA92B5FD0492B492C09EC6C0C09EC6C0
%9298C698C09EC0C0C09EC09EC6C6C092C092C098C09EC08CBA9EC69EBA9E
%C0C0C6C0C0C0928CB492928CB5929392B5929392B5929392B5929392B592
%928CB4929292B4929292B4929292B4929292B4FD0592C6C6FEC6C6C6FEC6
%C6C6FEC0928CB4989E8CB4929E9EA4929E9E9E929292B4B592B492B598C0
%98BB92BA98BB92BA98BB92BA92C0BABA98BB98BA92B598B498C092BA92B5
%92C092C098BA92BBBABA92BB92B492B592B492B492B492B492B492B492B4
%92B492B492B492B492B592B492B592B492B592B492B592B492B592B492B5
%92BA98C0BAC098C0BAC098B592B492BB98B492B592C092B592C092B592B4
%928C9292928C928C928C928C928C928C928C928C928C928C928C928C928C
%9292928C928C928C928C928C928C928C928C928C9292928C9292928C9292
%928C9292928CB492928CB492928C9292928C9292928C9292928C9292928C
%9292928C9292928C928C8C8C928C8C8C928C928C928C928C928C928C928C
%928C928C928C929292B592B592B592BB93BB93B592B593BB92B492B592BB
%93B592B592B593BB92B492B592B592B592B592B592B592B592B592B592B5
%92B592B592B5929392B592B5929392939293929392B592B592B592B592B5
%92B592B592B592B592B592B592B592BB98BA98BB98BA98BB98BA98BB98BA
%98BB98BA98BB98BA98BB98BA98B592B59292B492928CC2A7A8A7CF9392A0
%CAA7A192B48C99A7CFA7998CB5A0A8A7CA999292B4929292B4929292B492
%9292B4929292B4929292B4FD04924A4A44929292FD076E9292B4929292B4
%929292B4929292B4929292B4929292B492929EC69E9E9EC69E9E9EC69E9E
%9EC69EA49EC69E9E9EC69E9E9EC69E9E92B49292B492B592B5A1C99AA099
%93A0CFA0A0A7A78CBBA7A799C9A79992CFA19AA0CF99B492B592B492B592
%B492B592B492B592B492B592B492B592924A6F6E4A4AB592B492B5929292
%B592B492B592B492B592B492B592B492B592B492B592B492B592B492B592
%B492B592B492B592B492B592B492BB92B492BB92B492BB92B492B5929292
%8C9292A7A08C686868A7A06E68A0A79299CF6E686ECF7592A79A6892A1A1
%68928C9292928C9292928C9292928C9292928C9292928CB46E4A68B46E4A
%686E92926892444A689292928C9292928C9292928C9292928C9292928C92
%92928CBA9E9298C6989298C698929EBA92C08C9292C0C0BA92C69EC098C6
%9EC692928C92B592B592B5A7C968926893A7A768929ACF6EA0A7996899A7
%A06ECF9A9268C9A19292B592B592B592B592B592B592B592B592B592B592
%B592B56EB5926E4AB54A6E926F6E6E926F92B592B592B592B592B592B592
%B592B592B592B592B592B598C698C6BAC698C698C698C6C0BBC0B592BAC6
%BBC6C0C0BB92B598C692B592B5FD0492B492A7A19A999268A7A09268A0A7
%9275CF6E6E6ECF9992A7A06892A0A7686E68B4929292B4929292B4929292
%B4929292B4929292B492B492924A6E926E4A9244926EB444FD0492B49292
%92B4929292B4929292B4929292B492928CBAC0BA9E9292BA9E929EC09EC6
%98C0929292C692B498C092B48CBA9EB4929292B4B592B492B5A1CFA7CF9A
%92A1C96E9299CF6EA0A7996899A7A06ECF99926EA7A0926E9292B592B492
%B592B492B592B492B592B492B592B492B592B44A4B92B44A6F4A6E6E6F92
%6E6EB592B492B592B492B592B492B592B492B592B492B592B492C698C092
%B598C08CC0BAC0C0C6C0B492B598C692BBC6C698B592C692B592B4928C92
%92928CA7A1996F9268A7A092689AA79299A86E926EA87592A79A6892A0A1
%6892686E68B492928C9292928C9292928C9292928C9292928CB46E4A68B4
%926E684A449244B4446E8C9292928C9292928C9292928C9292928C929292
%8C928C989EBA9E9292BA9E9298C09EBAC0C6929292B498C698C092928CBA
%C0928C929292B592B592B5A7A168926E93A7C96E9299CF92A0A7996899A7
%A092CF9A926EC9A0936E926E9392B592B592B592B592B592B592B592B592
%B592B5926E4AB592B54A936E6E6E6F926E6EB592B592B592B592B592B592
%B592B592B592B592B592B592C798C698C698C698C6BAC698C1C6B592BBC6
%C0C6C1C0BA92B598C692B592B59292B4929292C9A092689268A7A09268A0
%A79299CA6E8C6FCF7593A79A6893A7A16892689268FD0492B4929292B492
%9292B4929292B4FD04924A6E92B4926E92926E92446E6E9292B4929292B4
%929292B4929292B4929292B4929292B4929298B498C6989298C698B49892
%92C092928CC0C0BA92C6C0C08CB49E928CB49292B492B592B5A7C96E9268
%92A0CFA0A0A7A76899A7C999C9A7936ECFA19AA1CF999268936E92689392
%B492B592B492B592B492B592B492B592B44A4B6E6E6EB592B492B5929292
%B592B492B592B492B592B492B592B492B592B492B592B492B592B492B592
%B492B592B492B592B492B592B492B592B492BB92B492B592B492B5929292
%8C928CA0769268926892A0A8A7A16E6E6899A7A8A1996892A0CAA7A77592
%689268926892689268928C9292928C9292928C9292928CB4924A444A204A
%8C92FD076E9292928C9292928C9292928C9292928C9292928C9292928C92
%FD1B9EC092928C92B592B592B492936E926E936E926E996E926E9368936F
%936892689393996E926E926E936E926E936E9292B592B592B592B592B592
%B592B592B59293929392B5929392939293929392B592B592B592B592B592
%B592B592B592B592B592B592B592BA98BB98BA92BB98BA92BB98BA92BB98
%BA92BB98BA92BB98BA92BB92B592B5FD0492B492928C9268926892689268
%92689268926892689268926892689268926892689268926892686E68B492
%9292B4929292B4929292B4929292B4929292B4929292B4929292B4929292
%B4929292B4929292B4929292B4929292B4929292B492928CB48C928CB48C
%928CB48C928CB48C928CB48C928CB48C928CB4929292B4B492B492B492B4
%92926E9268926E9268926E9268926E9268926E9268926E9268926E926892
%6E9268926E928CB592B492B592B492B592B492B592B492B592B492B492B4
%92B492B492B492B492B492B492B492B492B492B492B492B492B492B492B4
%92B492B492B492B492B492B492B492B492B492B492B492B492B492B492B4
%FD0B926E9268926E9268926E9268926E9268926E9268926E9268926E9268
%926E9268926E6E6EFD349293929292939292929392929293929292939292
%929392929293929292939292CAA7C9A7CAA7C9A7CAA7C9A7CAA7C9A7CAA7
%C9A7CAA7C9A7CAA7C9A7CAA7C9A7CDA6CDA6CDA6CDA6CDA6CDA6CDA6CDA6
%CDA6CDA6CDA6CDA6CDA6CDA6CDA6CDA6C9A7C9A7CAA7C9A7CAA7C9A7CAA7
%C9A7CAA7C9A7CAA7C9A7CAA7C9A7CAA7C9A7856085608560856085608560
%8560856085608560856085608560856085608560A7CAA7A7A7CAA7A7A7CA
%A7A7A7CAA7A7A7CAA7A7A7CAA7A7A7CAA7A7A7CAA7A7A6CDA6ACA6CDA6AC
%A6CDA6ACA6ACA6ACA6ACA6ACA6ACA6ACA6ACA6ACA6ACA6ACA7CAA7A7A7CA
%A7A7A7CAA7A7A7CAA7A7A7CAA7A7A7CAA7A7A7CAA7A7A7CAA7A760616061
%60616061606160616061606160616061606160616061606160616061C9A7
%CAA7C9A7CAA7C9A7CAA7C9A7CAA7C9A7CAA7C9A7CAA7C9A7CAA7C9A7CAA7
%CDA6CDA6CDA6CDA6CDA6CDA6CDA6CDA6CDA6CDA6CDA6CDA6CDA6CDA6CDA6
%CDA6C9A7CAA7C9A7CAA7C9A7CAA7C9A7CAA7C9A7CAA7C9A7CAA7C9A7CAA7
%C9A7CAA78560856061608560616085606160856061608560616085606160
%856061608560A7A7A1A7A7A7A1A7A7A7A1FD04A7CAA7A7A7C9A7A7A1A7A7
%A7A1A7A7A7A1A7A6ACA6ACA6A6A6ACA6A6A6ACA6ACA6ACA6ACA6ACA6A6A6
%ACA6A6A6ACA6A6A6ACA7A7A1A7A7A7A1A7A7A7A1C9A7A7A1C9A7A7A1C9A7
%C9FD04A7A1A7A7A7A1A760605A6160605A6160605A6160605A6060615A61
%60605A6160605A6160605A61CAA7CAA7CAA7CAA7CAA7CAA7CFA7C9A1A7A1
%CAA7CFA7CAA7CAA7CAA7CAA7CAA7CDA6CEA6CDA6CEA6CDA6CEACCEA6CDA6
%C8A6CDACCEA6CEA6CDA6CEA6CDA6CDA6CAA7CAA7CAA7CAA7CAA7A8A7A8A7
%A8A7A8A7A8A7A8A7CAA7CAA7CAA7CAA7CAA7856085608560856085608560
%856061A6A6608560856085608560856085608560A7A7A7C9A7A7A7C9A7A7
%A7A175754A6E4A4A4A76A0C9A7C9A7A7A7C9A7A7A7C9A6ACA6ACA6ACA6AC
%A6ACA6A69999929268926E999FACA6ACA6ACA6ACA6ACA6ACA7A7A7C9A7A7
%A7C9A7A860616060606160606061605A7DC9A7A7A7C9A7A7A7A860616061
%6060606160606061606160C6C6595A61606060616060606160606061CAA7
%C9A7CAA7C9A7CFA7754AFD056E4A4A444A75A7A7CAA7C9A7CAA7CAA7CDA6
%CDA6CDA6CDA6CEA6BB8CB492B46E6E8C92689292A6ACCDA6CDA6CDA6CDA6
%CAA7C9A7CAA7C9A7CAA76160616061606160616061357DA0CAA7C9A7CAA7
%C9A78560616085606160856061608561A6C6C67B5A608560616085606160
%85606160A1A7A7A7A1A7A7A77C6E446E4A6E4A6E444A444A444A4AA0A7C9
%A7A7A1A7A7A7A6ACA6A6A6ACA6AC9F928C939292926E507B6E926892689F
%A6ACA6A6A6ACA6A6FD04A7A1A7A7A7A1AE84AF84AF84AF84AF84AF84847D
%A07CA7A7A7A1A7A7A75A6160605A6160605A6160605A849EC6C0C6595A5A
%6160605A6160605A616060CAA7CAA7CAA7CFA06E6E6F6E6F6E6F6E6F4A6E
%4A6F4A4A44A1A7CAA7CAA7CAA7CEA6CDA6CEA6CE9FB492BCA0BC92B56E5D
%5D817A998C9268A0ACCDA6CEA6CDA6CAA7CAA7CAA7CAA7CFFD0EFFA7A1A1
%CAA7CAA7CAA785608560856085608560856061A5C69EC6C6A63660608560
%8560856085608560A7C9A7A7A7CAA16E446E6E6E4A6E6E6E444A4A4A444A
%4A4A44FD04A7C9A7A7A6ACA6ACA6ACA6928CBCA09992B4926E505756815C
%75689268A6A6ACA6ACA6ACA7C9A7A7A7C9A7CFFD0CFFA8FFA8FFA1A1A0A7
%A7C9A7A760616060606160606061606159C69E9EC6C6C659355A60616061
%606060616060C9A7CAA7CAA7996E6E6E6F6E6E6E6F6E4A4A6F4A4A4A6F4A
%4A4BCAA7C9A7CAA7CDA6CDA6CDA6BB8CBBA0BB92B492B59275567B7B815C
%9968926EACA6CDA6CDA6C9A7CAA7C9A7CFFD0CFFA8FFA8FFA8FFA7A1A1C9
%A7CAA7856085606160856061608561A69EFD05C67B5A3560606160856061
%608560A7A7A1A7A7A1446E4A6E4A6E4A6E446E444A444A444A444A444A76
%A7A7A7A1A7A6ACA6ACA6A68C939A998C9292928CB46E5656575681569268
%9275ACA6A6A6ACA7A7A1A7A7A760856085608560856085605A595A595A59
%5A595A7CA17CA7A7A760605A6160605A6160605A84C6C69EC69E9E9EC659
%36355A60605A6160605A61CAA7CAA7CF756E6E6F6E6F6E6E6E75767C4B6E
%4A6E4A6F4A6E4476A1A7A7CAA7CDA6CEA6CE99B499C292B592B592B59292
%6E81567B56877492689982ACA6CDA6CAA7CAA7CAA7856061606160616061
%6061355A355A355A355A59A7A1A1A1CAA78560856085608560856061A6FD
%05C69EC6C6A63660596060856085608560A7A7A7CAA7754A6E6E6E4A6E4A
%767CA7A1A1754A4A4A44FD044AA17CA7A7C9A6ACA6ACA6998CC2939292B4
%FD049268926E575657567B68926EA67BA6A6ACA7A7A7C9A7A76061606060
%6160606061605A355A355A355A35597CA17CA17CA8606060616060606160
%615FC6C6C69EC69EFD04C659355A355A5A6160606061CAA7C9A7C96E6E6E
%6F6E6E6E75A1A77CA7A1A74BFD044A6F4A4A7CA7A1A7A7CDA6CDA6C892B5
%9ABB92B492B592B492936E926E7B565D569368927BA67CA6A6CAA7C9A7CA
%A78460616061608560616085595A355A595A355A59A17CA7A1A17D856061
%60856061608561A6FD0AC6A55A355A355A6085606160A1A7A7A7A06E4A6E
%4A6E4A6E75A77CA17CA17D76444A444A444A447C7CA17CA7A6ACA6AC9F92
%92C2FD04928C92929268926892686E6E746E92689F7B827BA6FD04A7A1A7
%606060AF6060368584605A5A3559355A355935597CA17CA17CA15A616060
%5A6160605A84C6C69EA49EFD05C69EC65836355A355A5A616060CAA7CAA7
%C96E6E6E6F6E6E6EA0A1A77CA7A1A7756E4A6E4A6F4A6E7CA7A1A77CCEA6
%CDA6C892B593B592B592B592B592936E926E93929268936E927BA67CA67C
%CAA7CAA7CAA78560AFFFAF608BFFFF6085595A3560595A356059A7A0A7A1
%A77D856085608560856061A6C69EC69EC69EFD05C69EA53660595A356060
%8560A7C9A7A7A16E4A6E4A6E444A6EA77CA17CA17C6F444A4A4A444A4AA0
%7CA17CA1A6CDA6ACA5B4929292B4929292B4929268926892689268926892
%6E7C7BA67B82A7C9A7A7A7C9606084FFFF85A8FFAF615A5A355A355A355A
%355A7CA17CA17CA15A616060606160615FC6C69E9EA49E9EFD06C69E5935
%5A355A355A6061C9A7CAA7C9FD046E4A7C4A4A75A7A1A1A17C4A4A4A6F4A
%4A4475A1A77CA7A1ACA6CDA6CD92B49ABB92B592B492B5929268936E9268
%936E9268937CA67BA67CC9A7CAA7C9A78560AFFD04FFAFFF6061595A595A
%355A595A59A7A1A17CA77D8560856061608561A6C6C6A4A49EC6A4C69EFD
%05C69F5A355A595A356060A7A7A1A7A775446E4A4A756F444A76A17C7C44
%4A444A444A444A4BA77CA17CA1A6ACA6ACA6998CBC9A928C9292928C9268
%9268926892689268926EA67B827BA6A7A7A1A7A7A75A6184FF84FF84A9A8
%61605A355A3559355A35597CA17CA17CA160605A6160603684C6C69EC69E
%A49EC69E9E9EFD05C65936355A3559355ACAA7CAA7CFA06E4A754A6F4A7C
%6F76A1A7754A4A6E4A6F4A4A4AA1A1A77CA7A1CDA6CEA6CE9FB492BB92B5
%92B592B592926E936E926E936E9268A082A67CA682C9A7CAA7CAA78560AF
%FF85846185FF6061595A595A3560595A59A7A1A77CA7A185608560856085
%A5FD06C6FEC6C69EFD06C6A53660595A356059A7A7A7C9A7C96F4A4BA044
%4A756F4BA7A175444A4A4A444A44757CA17CA17CA7A6ACA6ACA6AC98B492
%9292B4FD0492689268926892689268937BA67B827BA6A7A7A7C9A7A76061
%A8FF60613CAFFF61605A355A355A355A35597CA17CA17CA1606160616061
%59C09EFD0CC6A49EC6C659355A355A355ACAA7C9A7CAA7A74A6F4B754A4A
%447CA1A7764A4A6F4A4A446F7CA77CA7A1A17CCDA6CDA6CDACC892B492B4
%92B592B492936E9268936E9268927BA67BA67CA67CCAA7C9A7CAA784608B
%A961606184AF6085595A355A595A355A59A17CA7A1A17C856061608561A5
%9EFD07C69EFD05C69EA49EFEA55A355A595A35A1A7A7A7A1A7A7A0206F4A
%4A4A757CA17CA74A4A444A444A75A77CA17CA17CA1A6ACA6A6A6ACA6A08C
%9292928C929292689268926892689275A67B827BA67B82A1C9A7A7A1A760
%605A6160605A6160605A5A3559355A355935597CA17CA17CA15A61606036
%83FD06C69EC69E9E9EFD05C69EC6C6C65836355A3559CAA7CAA7CAA7CAA7
%A74B6F4A7CA1A77CA7756F4B754A7576A7A1A77CA7A1A7A0CEA6CDA6CEA6
%CDACC892B492B592B592936E926E93689275A682A67CA67CA67CCAA7CAA7
%CAA78560856085608560616085595A3560595A356059A7A0A7A1A77D8560
%85606182C6C6FEC6C6A4C6C6A49EFD08C6FEC6823660595A35A7C9A7A7A7
%C9FD04A77CA17CA77CA17C75447C7CA17CA17CA17CA17CA17CA1A6CDA6AC
%A6ACA6ACA6A692928CB492926892689268997B827BA67B827BA67BA6A7C9
%A7A7A7C960616061606160616061605A355A355A355A355A7CA17CA17CA1
%5A616060606159A59EFD05C69EA49EFD07C67B59355A355A355AC9A7CAA7
%C9A7CAA7C9A7C9A1A17CA7A1A77DA07CA77CA7A1A17CA7A1A17CA7A1ACA6
%CDA6CDA6CDA6CDA6AC7B9992B592926E9375A07CA67CA67BA67CA67BA67C
%C9A7CAA7C9A78560616085606160856061595A595A355A595A59A7A1A17C
%A77D85608560616061365A58A6A5C7FD05C6C7A4A57B83595A355A595A35
%5A59A7A7A1A7A7A7A1FD05A77CA17CA17CA17CA17CA17CA17CA17CA17CA1
%7CA1A6ACA6ACA6A6A6ACFD04A67B827BA0757C7BA67C827BA67B827BA67B
%827BA6A7A7A1A7A7A7FD047D7CA17D7D7CA17D7D7C7D7C7D7C7D7C7D7CA1
%7CA17CA160605A6160605A613536355A355958595959355A3536355A3559
%355A3559355ACAA7CAA7CAA7CAA7CAA7CAA7A77CA7A1A77CA7A1A77CA7A1
%A77CA7A1A77CA7A1CDA6CEA6CDA6CEA6CDA6CEA6AC7CA682A67CA682A67C
%A67CA67CA67CA67CA682C9A7CAA7CAA7CAA1A1A0A7A1A7A0A7A1A7A0A7A1
%A7A0A7A1A7A0A7A1A77CA7A1856085608560856085595A595A355A365A35
%60595A3560595A3560595A356059A7A7A7C9A7A7A7C9A7A7A7C9A7A77CA1
%7CA17CA17CA17CA17CA17CA17CA17CA7A6ACA6ACA6ACA6ACA6ACA6ACA6A6
%7BA67B827BA67B827BA67B827BA67B827BA6A7A7A7C9A7A7A7C9A1A17CA1
%7CA17CA17CA17CA17CA17CA17CA17CA17CA17CA160616061606060616060
%355A355A355A355A355A355A355A355A355A355A355ACAA7CAA7CAA7CAA7
%CAA7CAA7CAA7A77CA7A1A17CA7A1A17CA7A1A17CA7A1A17CCDA6CDA6CDA6
%CDA6CDA6CDA6CDA6A67BA67CA67BA67CA67BA67CA67BA67CA67BCAA7CAA7
%CAA7CAA7CAA1A17CA7A1A17CA7A1A17CA7A1A17CA7A1A17CA7A1A17D8560
%616061606160616061355A355A355A355A355A355A355A355A355A355A35
%FD10A77CA17CA17CA17CA17CA17CA17CA17CA182ADA6A682ADA6A682ADA6
%A682ADA6A67C827C827C827C827C827C827C827C82A1C9FD07A7C9A0A17C
%A17CA17CA17CA17CA17CA17CA17CA17CA17CA15A8460845A8460845A8460
%84595A5959595A5959595A5959595A5959595A5959CEA6CDA6CEA6CDA6CE
%A6CDA6CEA6CDA6CEA6CDA6CEA6CDA6CEA6CDA6CEA6CDA685608560856085
%60856085608560856085608560856085608560856085606160CEA6CDA6CE
%A6CDA6CEA6CDA6CEA6CDA6CEA6CDA6CEA6CDA6CEA6CDA6CEA6CDA6CAA7CA
%A7CAA7CAA7CAA7CAA7CAA7CAA7CAA7CAA7CAA7CAA7CAA7CAA7CAA7CAA7A6
%ACA6ACA6ACA6ACA6ACA6ACA6ACA6ACA6CDA6ACA6CDA6ACA6CDA6ACA6CDA6
%AC6061606160616061606160616061606160616061606160616061606160
%616060A6CDA6ACA6ACA6ACA6ACA6ACA6CDA6ACA6CDA6ACA6CDA6ACA6CDA6
%ACA6CDA6ACA7C9A7A7A7C9A7A7A7C9A7A7A7C9A7A7A7C9A7A7A7C9A7A7A7
%C9A7A7A7C9A7A7CDA6CDA6CDA6CDA6CDA6CDA6CDA6CDA6CDA6CDA6CDA6CD
%A6CDA6CDA6CDA6CDA6856085606160856061608560616085606160856061
%6085606160856061606160ACA6CDA6CDA6CDA6CDA6CDA6CDA6CDA6CDA6CD
%A6CDA6CDA6CDA6CDA6CDA6CDA6C9A7CAA7C9A7CAA7C9A7CAA7C9A7CAA7C9
%A7CAA7C9A7CAA7C9A7CAA7C9A7CAA7A6A6A6ACA6A6A6ACA6A6A6ACA6ACA6
%A6A5ACA6CDA6A6A6ACA6A6A6ACA6A6A5AC60605A6160605A6160605A6160
%605A616060606160615A6160605A6160605A60A6ACA6ACA6A6A6ACA6A6A5
%ACA6A6A5ACA6A6A5ACA6A6A5ACA6A6A6ACA6A6A6ACA7A7A1A7A7A7A1FD04
%A7C9A7C9A7CAA7C9A7CAA7A7A1A7A7A7A1A7A7A7A1A7CDA6CEA6CDA6CEA6
%CDA6CEA681A6CE817BA6CD81A6A6CEA6CDA6CEA6CDA6CDA6856085608560
%8560856085608560856061608484846067618560856085608560ADA6CEA6
%CDA6CEA6CDA6CEACCEA6CEACCEA7CEA7CEA7CEA6CDA6CEA6CDA6CDA6CAA7
%CAA7CAA7CAA7CAA7CAA1A17CA77DA17CA77DA7A7CFA7CAA7CAA7CAA7CAA7
%A6ACA6ACA6ACA6ACFD04A656577B815681805657A6A6ACA6ACA6ACA6ACA6
%AC606160616060606160606061606060617C9F98C098C17B846061606160
%606085A6ACA6ACA6ACA6ACA6FD07FFA8FFA8FFA8FFA8A6A6ACA6ACA6ACA6
%ACA7A7A7C9A7A7A7C9A77D2752272E2752272E2752275176CAA7A7A7C9A7
%A7A7C9CDA6CDA6CDA6CDA6A6568181815657567B5681568181817BCEA6CD
%A6CDA6CDA685606160856061608560616085618499C0BAC0BAC0BABABAA7
%61616085606160CEA6CDA6CDA6CDA5CEFD08FFA8FFA8FFA8FFA7A6A6CDA6
%CDA6CDA6CAA7C9A7CAA7C9A77D277DA8FFA8FFA8FFA8FFA8FF7D2752CFA7
%C9A7CAA7C9A7A6ACA6A6A6ACA6AC815D505756575681568156575681567B
%7BACA6A6A6ACA6A65A6160605A6160605A616060608498BA98BA98BA98BA
%98BA927C60605A616060A6ACA6A6A6ACA6CECFFD07FFA8FFA8FFA8FFA9FF
%83A6A6ACA6ACA6A6FD04A7A1A7A7A127A8FD0CFF7D277CCAA7A7A1A7A7A7
%CEA6CDA6CEA6CDA6AC818156875757568181815C8756577BA6A6CDA6CEA6
%CDA6856085608560856085608560859FBABAC1BAC1BAC1BAC19898988461
%85606160CEA6CDA6CEA6CDA7CAA1A7A1CAA1C9A1A8A1A8A1A8A1A7A8CF7C
%A6A6CEA6CDA6CAA7CAA7CAA7CF527DFD04FFCAC9C2C9A7FD05FF5276A7CA
%A7CAA7CAA7A6ACA6ACA6ACA6ACA681567B747B507B747B747B745756827B
%A67CACA6ACA6AC60616060606160606061606159BABABA98C098BA98C098
%989298756060616060A6CDA6ACA6ACA6AC756E446E446E4A6E444A444A44
%4A44757BA67BA6A6CDA6ACA7C9A7A7A7C9A7527DFFFFFFCAC198BA988081
%FD04FF7D27A1A1A7A7C9A7A7CDA6CDA6CDA6CDACC898B592B492B5929268
%928C926E997CA67BA6A6CDA6CDA6856085606160856061608561A0BAC1BA
%C0BAC1BAC0FD0598995960608560ACA6CDA6CDA6CDACA04A6F6E6E6E6F6E
%4A4A6EFD044A75A67BA67CA6A6CDA6C9A7CAA7C9A7CA527DFFFFFFCA98C0
%9E815C81AEFFFFFF7D527CA7A7CAA7CAA7A6A6A6ACFD04A692928C9292C9
%92926892A093689268927B827B827BA6A6AC60605A6160605A6160605A61
%99BA98BA98BA98BA98986E989298925935606060A6ACA6ACA6A6A6CD7B6E
%4A6E4A6E4A6E444A444A444A447B7B827BA67BA6A6ACA7A7A1FD04A7527D
%FFFFFFCABA9881568056FD04FF7D27A17CA1A1A7A7A7CDA6CEA6CDA6CD92
%B492C29AB493B59AA068996EA0999268937CA67CA682CDA6856085608560
%856085608560A0BAC1BAC1BAC1FD0798BA585A356160CEA6CEA6CDA6CEAC
%A66E6F6E6FFD046E446F4A6E4A6F7BA67CA67CA67CACA6CAA7CAA7CAA7CF
%5252FD04FFCACFADAEA7FD05FF5252A0A7A1A7A1CFA7A6ACA6ACA6AC99B4
%999293BB92BC92BB99926F926F936E9968997BA67B827BAC606160616060
%6061606060617CBA98C098BAFD049892989898925935593560A6ACA6ACA6
%ACA6CDA56E446E6E6E517D2E51444A444A447C7C827BA67B827BA6A7A7A7
%C9A7A7A77C277DFD0CFF7D274BA17CA17CA1A1CACDA6CDA6CDA6BB8CC993
%B592B5A0BB92936EA06E936E99A0926EA67CA67CA6828560616085606160
%85606161A1BAC0BAC1FD099899355A595A35CEA6CDA6CDA6CDA6AC757651
%765961597D59594B514B517BA67CA67BA67CA67CCAA7C9A7CAA7CA525227
%7DA8FFA8FFA8FFA8FFA8A87D522752A1A77CA7A1A1A1A6ACA6A6A6AC9292
%8C929AC28C928CC27592686E759A689268927B827BA67B825A6160605A61
%60605A61606175BA98BA989892989298929892987536355A3559A6ACA6A6
%A6ACA6ACA6845A6060849292686F525A355A35827BA67B827BA67B82A1C9
%A7A7A1C9A77C275227272752275227522752FD0527A17CA17CA17CA1CEA6
%CDA6CEA6BB92C993B492BBC9BB929392A06E926899A0936EA67CA67CA67C
%85608560856085608560617DC1BAC1FD0998BA985A3560595A59CEA6CDA6
%CEA6CDA6CD93B592BB92B4929392926E936E997CA67CA67CA67CA67CCAA7
%CAA7CAA7CA525227522752FD0B2752A1A77CA7A1A77CA6ACA6ACA6AC9892
%92B499C28CBB92C299926E927599689368937B827BA67B82606160606061
%6060606159BBBAC09898929898989298989892593559355A3559A6CDA6AC
%A6ACA6ACA6BB8C928CB492926892689268926E827BA67B827BA67BA6A7C9
%A7A7A7C9A77C27522752FD0D27A77CA17CA17CA1CDA6CDA6CDACC292B492
%BB99B499B599996EA06E996F926E9275A67CA67BA67C6160856061608560
%6161A0BAC0FD049892BA989892BA9959355A595A355A59ACA6CDA6CDA6CD
%A6CD92B492B492B5929268928C9268997CA67BA67CA67BA67CC9A7CAA7C9
%A7CF76522752FD0D2752A0A7A1A17CA7A1A6A6A6ACA6ACA5938C9292BB92
%C292936E9275926E9268926E7C7BA67B827B8260605A616060366160617C
%BA98989298747675997475525A3559355A3559355AA6ACA6ACA6A6A6ACA6
%A06F9A75938C9268926E756F6F75A67B827BA67B827BA6A7A7A1FD04A77C
%27522752FD0D27A17CA17CA17CA1CDA6CEA6CDA6CE9FB48CC2A0B492B4A0
%A068936EA09992689F82A67CA67CA6828560856061608B846185FF9F9898
%BA585A3660595A3660595A3560595A355A59ACA6CEA6CDA6CEA6CD836160
%6160A092937560595A35837CA67CA67CA67CA682C9A7CAA7CAA7CF765227
%52FD0D2752A1A7A1A77CA7A1A6ACA6ACA6ACA6AC99928CB492C992926892
%A093689268997C827BA67B827BA66061606160AFFFFFA9FFA9FF7676525A
%355A355A355A355A355A355A355A355AA6ACA6ACA6ACA6CDA67B4A6F4A7C
%60613559274A4A4A50A67B827BA67B827BA6A7A7A7C9A7A7A77C27522752
%FD0C274BA17CA17CA17CA1CDA6CDA6CDA6CDA6CD99B492B593B499A06E93
%6E9268937BA67CA67BA67CA67C856061608BFD06FF8460365A355A595A35
%5A595A355A595A355A595A59CEA6CDA6CDA6CDA6CE7BFD046E6F51514A4A
%446E447582A67CA67BA67CA67CCAA7C9A7CAA7CA525227522752FD0B2752
%A1A77CA7A1A17CA6ACA6A6A6ACA6A6A6AC92928C928C996F92689268937B
%827BA67B827BA67B825A6160605AFFFFFFA8FFA859355A3559355A355935
%5A3559355A3559355A3559A6ACA6A6A6ACA6A6A69F446E4A6E4A6E444A44
%4A444A51A67BA67B827BA67B82A1C9A7A7A1A7A77C27522752FD0C274BA7
%7CA17CA17CA1CEA6CDA6CEA6CDA6CEACCD99B492B592926E9268997CA67C
%A67CA67CA67CA67C856085608560AFA8FFCAFF5A5A595A3560595A356059
%5A3560595A3560595A59CEA6CDA6CEA6CDA6CE9F6E6E6F6E6F6E6F4A6E4A
%6F4A7B82A67CA67CA67CA67CCAA7CAA7CAA7CAA15227522752FD0B27A1A1
%A77CA7A1A77CA6ACA6ACA6ACA6ACA6ACA6AC99928C92689268997BA67B82
%7BA67B827BA67B826061606060613684A8FFCA84355A355A355A355A355A
%355A355A355A355A3559A6CDA6ACA6ACA6ACA6A04A6E4A6E6E6E444A444A
%444A75A67BA67B827BA67BA6A7C9A7A7A7C9A7C97C2E2752FD0A2700527C
%A17CA17CA17CA1CDA6CDA6CDA6CDA6CDA6CDA6AC9F9992926EA082A67BA6
%7CA67BA67CA67BA67C6160856061606184FFA8AF595A355A595A355A595A
%355A595A355A595A355A59ACA6CDA6CDA6CDA6CD9F6F6E6E6E6F6E4A4A6F
%4A4A4A7C82A67BA67CA67BA67CC9A7CAA7C9A7CAA7CA7C52FD0B277CA1A7
%7CA7A1A17CA7A1A6A6A6ACA6A6A6ACA6A6A6ACA6AC7BA07B827BA67B827B
%A67B827BA67B827B8260605A6160605A616060355A3559355A3559355A35
%59355A3559355A3559355AA6ACA6ACA6A6A6ACA6A67B7C7B7C7B7C7B7B7B
%7C7B7B7BA67B827BA67B827BA6A7A7A1A7A7A7A1A7A7C9A17D767C767C76
%7C767C76A17CA17CA17CA17CA17CA1CDA6CEA6CDA6CEA6CDA6CEA6CDA6CE
%A6A67CA67CA67CA67CA67CA67CA67CA6828560856085608560616060595A
%3560595A3560595A3560595A3560595A355A59ACA6CEA6CDA6CEA6CDA6CE
%A6A67CA682A67CA682A67CA67CA67CA67CA67CA682C9A7CAA7CAA7CAA7CA
%A7CFA7A7A1A7A1A7A1A7A1A7A0A7A1A77CA7A1A77CA7A1A6ACA6ACA6ACA6
%ACA6ACA6ACA6ACA6AC7C827BA67B827BA67B827BA67B827BA66061606160
%60606160615A5A355A355A355A355A355A355A355A355A355A355AA6ACA6
%ACA6ACA6ACA6ACA6AC7C827BA67B827BA67B827BA67B827BA67B827BA6A7
%A7A7C9A7A7A7C9A7A7A7CAA1A17CA17CA17CA17CA17CA17CA17CA17CA17C
%A1CDA6CDA6CDA6CDA6CDA6CDA6CDA6CDA6CDA6A67BA67CA67BA67CA67BA6
%7CA67C85606160616061606160616060355A355A355A355A355A355A355A
%355A355A35CDA6CDA6CDA6CDA6CDA6CDA6CDA6A67BA67CA67BA67CA67BA6
%7CA67BA67CA67CCAA7CAA7CAA7CAA7CAA7CAA7CAA7A17CA7A1A17CA7A1A1
%7CA7A1A17CA7A1A17CA6ACA6A6A6ACA6A6A6ACA6A6A6ACA6A6A6AC7C827B
%827C827B827C827B827B825A6160605A6060605A6060605A5A3559355A35
%59355A3559355A3559355A3559A6ACA6A6A6ACA6A6A6ACA6A6A6AC7C827B
%827C827B827C827B827C827B827B82A7C9FD0BA7C9A0A17CA77CA17CA77C
%A17CA77CA17CA77CA1856085608560856085608560856085608560856085
%6085608560856085608560CAA7CAA7CAA7CAA7CAA7CAA7CAA7CAA7CAA7CA
%A7CAA7CAA7CAA7CAA7CAA7CAA78560856085608560856085608560856085
%608560856085608560856085608560CEA6CDA6CEA6CDA6CEA6CDA6CEA6CD
%A6CEA6CDA6CEA6CDA6CEA6CDA6CEA6CDA660616061606160616061606160
%61606160616061606160616061606160616060A7C9A7A7A7C9A7A7A7C9A7
%A7A7C9A7A7A7C9A7A7A7C9A7A7A7C9A7A7A7C9A7A7606160616061606160
%6160616061606160616061606160616061606160616060A6CDA6ACA6ACA6
%ACA6ACA6ACA6ACA6ACA6CDA6ACA6CDA6ACA6CDA6ACA6CDA6AC6160856061
%608560616085606160856061608560616085606160856061606160A8A7CA
%A7C9A7CAA7C9A7CAA7C9A7CAA7C9A7CAA7C9A7CAA7C9A7CAA7C9A7CAA785
%608560616085606160856061608560616085606160856061608560616061
%60ACA6CDA6CDA6CDA6CDA6CDA6CDA6CDA6CDA6CDA6CDA6CDA6CDA6CDA6CD
%A6CDA660605A6160605A6160605A6160605A6160605A6160605A6160605A
%6160605A60A7A7A1A7A7A7A1FD04A7C9FD07A7C9FD06A7A1A7A7A7A1A760
%605A6160605A6160605A6160615A6160615A6160605A6160605A6160605A
%60A6ACA6ACA6A6A6ACA6A6A6ACA6ACA5CDA6ACA5ACA6A6A6ACA6A6A6ACA6
%A6A6AC856085608560856085608560616085606160856085608560856085
%6085608560CAA7CAA7CAA7CAA7CAA7CAA7C9A6C9A7C9A7C9A7CAA7CAA7CA
%A7CAA7CAA7CAA785608560856085606161616085608483845F8560856161
%606160856085608560ADA6CEA6CDA6CEA6CDA6CEA6CDA6ADA6AD82ADA6CD
%A6CEA6CDA6CEA6CDA6CEA660606061606060616060606160616085606060
%61606160616060606160606085A7A7A7C9A7A7A0A69FA6FD059FC79EFD06
%9FC8A0A6A7C9A7A7A7A8606160616061606160837CA67B9F7A9F9E9F7A9F
%7B8259846061606160606085A6ACA6ACA6ACA6ACA6ACA6CDA6846061355A
%59A6A6ACA6ACA6ACA6ACA6ACA6AC856061608560616061618483AEA6A6A6
%C89FA683836061608560616085606160CAA7C9A7CAA7C89EFD049FC7FD05
%9FA59EC8FD059FA7A7CAA7C9A7856061608560847C9F9E9F9E9F9E9F9E9F
%9F9F9E9F9E9F9FA683616085606160CEA6CDA6CDA6CDA6CDA6CDA6AD6061
%6060365A7CCDA6CDA6CDA6CDA6CDA6CDA65A6160605A61606159A7A6C79F
%C79FA57A9F9E9F9EA67C84606160605A616060A1C9A7A7A1A8A09F7AA59E
%FD049FA57AA5FD059FA57AA07CA7A7C9A7A75A61606060839E9E7A9F9E9F
%7AA59F9F9EA59F9F9E9F7A9F749E7C615A616060A6ACA6A6A6ACA6A6A6AC
%A6ACA67C4B754B5151827BFD04A6ACA6A6A6ACA6A68560856085606183C7
%A5C99FC7A6CE9F9FA6A69EA5A09F9EA760616085606160CAA7CAA7CAA7C9
%9F9F9FA59FC89FA59FA59FA59FC89FA59FA5A0A77CA7A7CAA78560856085
%839F9FC79FC79FC89F7C7BC8A5C198C19FA59FA59E7D3685606160CEA6CD
%A6CEA6CDA6CEA6CDA6CD749A6E6E446E7CA67CACA6CEA6CDA6CEA6CDA660
%61606060617CC79FC79FA59FC89FA57A9F9F9F7A9F7A9F9EA66061606160
%60A7C9A7A7A7CAA7A57AA5FD059FA57AA5FD059FA57AA07CA17CA7A7A760
%61606060617BA59FA59FA59F7B27529F9F686868999FA59EA03559356160
%60A6CDA6ACA6ACA6ACA6ACA6ACA575A06E444A4A7C7BA67BA6A6ACA6ACA6
%ACA6AC616085606183C79FC79FC79FC79FC79F9F9E9F9F9F9E9F9F9F9E83
%6161606160A8A7CAA7C9A7C99F9F9FC79FA59FA59F9F9FA59FC79EC79F9F
%7CA7A1A17CA7A7856085606160849FA5567B9FC77B5251C792926E928C9F
%A5C7595A595A596160ACA6CDA6CDA6CDA6CDA6CDACA06F996E4A4A4A75A6
%7BA67CACA6CDA6CDA6CDA660605A6160A69EA59FA59FA59FA59FA57A9F7A
%9F7A9F7A9F7A9F7A6060605A60A7A7A1A7A7A7A1A69EFD059F7AA57AA59E
%FD059F7AA17CA17CA17CA760605A6160605AA67A56569F989F7BA59F9268
%92689298C77B36355A35593560A6ACA6ACA6A6A6ACA6A6A6CD6E756E6E44
%4A44757B827B827BA6A6ACA6A6A6AC85608560859FC89FC79FC89FC79FC8
%9F9F9EA59F9F9FA59F9F9EA55960608560CAA7CAA7CAA7CAA6A59FC89FA5
%9FA59F9F9FA59FC79FC89F9F7CA7A1A77CA77D8560856085608560C77BA5
%929268999FC799928C9292C8A5593560595A355A5ACEA6CEA6CDA6CEA6CD
%A6C874A07C6E6E6E4A6F4A757BA67CA67CCDA6CDA6CEA6606060615F817A
%A581817AA581817AA57A7B567B7A7B567B7A7B7A58355A6085A7A7A7C9A7
%A7A7C89E9E9E9F9F9F7AA59EA59EA59F9F9E9F7BA17CA17CA17CA1606160
%61606060617CC798926892689FA5C79899989F7A82355A355A355A355AA6
%ACA6ACA6ACA6ACA6A66EA0A06E4A6E4A4A444A444A7BA67B827BA6A6ACA6
%AC85606160837A7B7A7B7B7B7A7B7B7B7A7B507B507B507B507B507A585A
%356060CAA7C9A7CAA7CAA7C9A6C89EA59F9F9FA59F9F9FA5A0C9A6A7A1A1
%7CA7A1A17C856061608560616084A5996893929298A67BC7A5A55657595A
%595A355A595A59CEA6CDA6CDA6CDA6CE9F99A0FD056E4A4A446E447B82A6
%7CA67BACA6CDA65A61606159B4929292B4929292B4929268926892689268
%9268926E59355A355AA7C9A7A7A1A7A7CAA8FFFFA67AA57AA57AA59E9F9F
%FFA1A8A1A17CA17CA17CA15A6160605A61606036A79892686E6E9F272875
%C79F7A575A355A3559355A3559A6ACA6A6A6ACFD04A6757C4A754B754B51
%4B4B274B75A67BA67B827BA6A6A685606160CCFD07C6C7FD04C69EC69EC6
%9EC69EC69EC69E83365A59CAA7CAA7CAA7CF9AB492CAFFA59E9F9FA59F9F
%9FFFA192689AA1A77CA7A1A77D85608560856085608560C79F9998C19F52
%287CA5C79F593560595A3560595A59CEA6CDA6CEA6CDA6CD826160856085
%60605960596059837BA67CA67CA67CACA6606160C7C09974989EFE9E7474
%C6C6986EFD0A749E9E5A3559A7C9A7A7A7C9A7A08C9292CAFFC89E9F7AA5
%A0FFA192688C75A77CA17CA17CA15A6160606061606060617CC79FC79FA5
%9F9F9FA59EA6355A355A355A355A3559A6CDA6ACA6ACA6ACA6A6A5C7A4C7
%A5C79EA59EA49EA57B827BA67B827BA67BA6616085C799446E44989E6E68
%6E6E98444A444A444A444A444A444474C7595A59A8A7CAA7C9A7CFA0B492
%B492CAFFFFCFCFA8FFA0926893689A7DA7A1A17CA77D8560856061608560
%6160849FC79FC7A5C7989999A5595A595A355A595A355A59ACA6CDA6CDA6
%CDA6CDA5FD07C69EC69EC69EA67CA67BA67CA67BA67C60605A6158745075
%507550755075507550504A5050504A5050504A58595A355AA7A7A1FD04A7
%C992928C928C999ACAA19A6E926892689275A17CA17CA17CA160605A6160
%605A6160606059277B9FA56E6868927536355A3559355A3559355AA6ACA6
%ACA6A6A6ACA6A69EFD05C69E9E9EA49E9E7B827B827BA67B827BA6856085
%618380FD0B8156815681568156815681585A356059CAA7CAA7CAA7CFA7B5
%92B592B592B4929268926E926E936EA07DA7A1A77CA7A185608560856085
%6085608B605251C89F93929392593560595A3560595A355A59ACA6CEA6CD
%A6CEA6CDA5FD07C69EC69EC69EA682A67CA67CA67CA67C6060606160A59F
%A59FA59FA59FA59FA57A9F7A9F7A9F7A9F7A9F7A59355A355AA7A7A7C9A7
%A7A7C9929292B4FD049268926892689268927CA17CA17CA17CA160616061
%6060606160606061589F9FA56E928C99355A355A355A355A355A355AA6AC
%A6ACA6ACA6ACA6A6C0FD05C69EC09EC69EC67BA67B827BA67B827BA68560
%6160849FC79FC79FC79FC79FC7FD049F9E9F9F9F9E9F9F9F595A595A59CA
%A7C9A7CAA7CAA7BB92B492B592B492936E9268936E926EA7A1A17CA7A1A1
%7C85606160856061608560616084A5C79F9F68925960595A355A595A355A
%595A59CEA6CDA6CDA6CDA6CDA684838A848A83837C8358837C827BA67CA6
%7BA67CA67B5A6160615AA69FA59FA59FA59FA59FA57A9F7A9F7A9F7A9F7A
%9F7A59355A3559A1C9A7A7A1A7A7A7939292928C92929268926892689268
%927CA17CA17CA17CA15A6160605A6160605A61606060837A7B9F9F753635
%5A3559355A3559355A3559A6ACA6A6A6ACFD04A6597D5259525328522E52
%285257A67BA67B827BA67B82856085606183C79FC7A5C79FC7A5C79FA59F
%9F9EA59F9F9E9F9E7D3560595A59CAA7CAA7CAA7CAA7BC8CB492B492B492
%926E9268926E926EA7A1A77CA7A1A77D8560856085608560856085608560
%5756C7A5603560595A3560595A3560595A59CEA6CDA6CEA6CDA6CE9F9999
%FD056E4A6E446E447B82A67CA67CA67CA67C60616060606159A07BA69FA6
%7BA69FA57B9F7B9F7B9F7B9F7B7D355A355A3559A7C9A7A7A7C9A7A79ABB
%93BB93BB93996E936E936E936E997CA17CA17CA17CA15A61606060616060
%606160606061587A9E83355A355A355A355A355A355A3559A6CDA6ACA6AC
%A6ACA6A075A0446E6E6E444A444A444A75A67BA67B827BA67B8261608560
%6160615A5A355A595A355A595A355A595A355A595A355A595A355A59A8A7
%CAA7C9A7CAA7CFFD08FFA8FFA8FFA8FFA7A17CA7A1A17CA77D8560856061
%60856061608560616085A5A5595A595A355A595A355A595A355A59ACA6CD
%A6CDA6CDA6CDA6756E6E6E6F6E4A4A6E4A4A4AA082A67BA67CA67BA67C60
%605A6160605A613659355A355A355A355A355A355A355A3559355A355935
%5AA7A7A1A7A7A7A1A7A7A77DA7A1A77DA77DA77DA77DA77DA77CA17CA17C
%A17CA160605A6160605A6160605A61606036A77C36355A3559355A355935
%5A3559355AA6ACA6ACA6A6A6ACA6AC817C7B7C7B7C7B7B757B757C7BA67B
%827BA67B827BA68560856085608560855A5A595A3560595A3560595A3560
%595A3560595A356059CAA7CAA7CAA7CAA7CAA7A77CA17CA7A0A77CA7A1A7
%7CA7A1A77CA7A1A77CA7A185608560856085608560856085608560603560
%595A3560595A3560595A355A59ACA6CEA6CDA6CEA6CDA6CEA6A67CA682A6
%82A682A67CA67CA67CA67CA67CA67C606060616060606160615A5A355A35
%5A355A355A355A355A355A355A355A355AA7A7A7C9A7A7A7C9A7A7A1A77C
%A17CA17CA17CA17CA17CA17CA17CA17CA17CA16061606160606061606060
%6160606061605A355A355A355A355A355A355A355AA6ACA6ACA6ACA6ACA6
%ACA6CDA6827BA67B827BA67B827BA67B827BA67B827BA685606160856061
%608560615A5A595A355A595A355A595A355A595A355A595A59CAA7C9A7CA
%A7C9A7CAA7CAA7A7A1A17CA7A1A17CA7A1A17CA7A1A17CA7A1A17C856061
%6085606160856061608560616085605A355A595A355A595A355A595A59CE
%A6CDA6CDA6CDA6CDA6CDA6CDA6A67BA67CA67BA67CA67BA67CA67BA67CA6
%7B5A6160605A6160605A616061355A3559355A3559355A3559355A355935
%5A3559A1C9A7A7A1A7A7A7A1A7A7A7A1A17CA17CA17CA17CA17CA17CA17C
%A17CA17CA15A6160605A6160605A6160605A6160605A615A5A355A355935
%5A3559355A3559A6ACA6A6A6ACA6A6A6ACA6A6A6ACA6827BA67B827BA67B
%827BA67B827BA67B82
%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 73 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: (Page 1) 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.1-c036 46.277092, Fri Feb 23 2007 14:17:08        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS3</xap:CreatorTool>
         <xap:CreateDate>2015-01-07T16:46:24+02:00</xap:CreateDate>
         <xap:ModifyDate>2015-01-07T16:46:25+02:00</xap:ModifyDate>
         <xap:MetadataDate>2015-01-07T16:46:25+02:00</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>256</xapGImg:width>
                  <xapGImg:height>256</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8AiWcQ+zOxV2KuxV2KuxV2&#xA;KuxV2KuxV2KuxV2KuxV2KuxVxBBodiOoxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVl/&#xA;ljRbC906zeay5lr6OOedmYco3dVAQj4SBurL9rcNWmZWKAIG3V0Wv1U8eSQEv4DQ866/eDy2IpMT&#xA;oFhPHa3B00QSShZLuFVcLHW2mboSSg5Irb5PwwaNfii435ycTKPHYH0nbf1R+fMoqLy1oFvcwtJF&#xA;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</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/">
         <xapMM:DocumentID>uuid:22051AF47B96E411B439F345C61C0242</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:23051AF47B96E411B439F345C61C0242</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource"/>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xapG="http://ns.adobe.com/xap/1.0/g/">
         <xapTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>612.000000</stDim:w>
            <stDim:h>792.000000</stDim:h>
            <stDim:unit>Points</stDim:unit>
         </xapTPg:MaxPageSize>
         <xapTPg:NPages>1</xapTPg:NPages>
         <xapTPg:HasVisibleTransparency>False</xapTPg:HasVisibleTransparency>
         <xapTPg:HasVisibleOverprint>False</xapTPg:HasVisibleOverprint>
         <xapTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xapTPg:PlateNames>
         <xapTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xapG:groupName>Default Swatch Group</xapG:groupName>
                  <xapG:groupType>0</xapG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xapTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -566.929 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 566.929 li
566.93 566.929 li
566.93 0 li
cp
clp
[1 0 0 1 0 0 ]ct
0 425.196 mo
141.732 425.196 li
141.732 566.929 li
0 566.929 li
0 425.196 li
0 425.196 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
.431373 .788235 .878431 rgb
ef
141.732 496.004 mo
141.732 566.929 li
58.6694 566.929 li
26.6094 534.869 li
111.781 466.052 li
141.732 496.004 li
141.732 496.004 li
cp
.32549 .615686 .690196 rgb
ef
119.929 523.319 mo
119.929 532.313 112.569 539.673 103.575 539.673 cv
38.1587 539.673 li
29.1641 539.673 21.8052 532.313 21.8052 523.319 cv
21.8052 517.867 li
119.929 517.867 li
119.929 523.319 li
119.929 523.319 li
cp
.858824 .709804 .215686 rgb
ef
119.929 523.319 mo
119.929 532.313 112.569 539.673 103.575 539.673 cv
70.8672 539.673 li
70.8672 517.867 li
119.929 517.867 li
119.929 523.319 li
119.929 523.319 li
cp
.760784 .611765 .129412 rgb
ef
119.929 485.16 mo
21.8052 485.16 li
21.8057 460.857 51.0981 452.453 70.8667 452.453 cv
90.6348 452.453 119.928 460.856 119.929 485.16 cv
119.929 485.16 li
cp
.858824 .709804 .215686 rgb
ef
119.929 485.16 mo
70.8672 485.16 li
70.8672 452.453 li
90.6353 452.453 119.928 460.857 119.929 485.16 cv
119.929 485.16 li
cp
.760784 .611765 .129412 rgb
ef
24.5308 501.515 mo
117.203 501.515 li
120.201 501.515 122.654 503.967 122.654 506.965 cv
122.654 509.964 120.201 512.416 117.203 512.416 cv
24.5308 512.416 li
21.5327 512.416 19.0796 509.964 19.0796 506.965 cv
19.0796 503.967 21.5322 501.515 24.5308 501.515 cv
24.5308 501.515 li
cp
.560784 .207843 .0313726 rgb
ef
70.8672 501.515 mo
117.203 501.515 li
120.201 501.515 122.654 503.967 122.654 506.965 cv
122.654 509.964 120.201 512.416 117.203 512.416 cv
70.8672 512.416 li
70.8672 501.515 li
70.8672 501.515 li
cp
.431373 .160784 .0235294 rgb
ef
68.1411 501.515 mo
66.6426 501.515 65.4155 502.741 65.4155 504.239 cv
65.4155 505.745 64.1953 506.965 62.6899 506.965 cv
61.1846 506.965 59.9644 505.745 59.9644 504.239 cv
59.9644 502.741 58.7378 501.515 57.2388 501.515 cv
49.0615 501.515 li
46.064 501.515 43.6104 503.968 43.6104 506.965 cv
43.6104 508.471 42.3906 509.69 40.8853 509.69 cv
39.3799 509.69 38.1597 508.471 38.1597 506.965 cv
38.1597 503.968 35.7061 501.515 32.708 501.515 cv
24.5308 501.515 li
21.5327 501.515 19.0796 503.968 19.0796 506.965 cv
19.0796 508.471 17.8594 509.69 16.3535 509.69 cv
14.8486 509.69 13.6284 508.471 13.6284 506.965 cv
13.6284 500.958 18.5234 496.063 24.5308 496.063 cv
117.203 496.063 li
123.21 496.063 128.105 500.958 128.105 506.965 cv
128.105 508.471 126.885 509.69 125.38 509.69 cv
123.875 509.69 122.654 508.471 122.654 506.965 cv
122.654 503.968 120.201 501.515 117.203 501.515 cv
68.1411 501.515 li
68.1411 501.515 li
cp
1 .8 0 rgb
f
70.8672 496.063 mo
117.203 496.063 li
123.21 496.063 128.105 500.958 128.105 506.965 cv
128.105 508.471 126.885 509.69 125.38 509.69 cv
123.875 509.69 122.654 508.471 122.654 506.965 cv
122.654 503.968 120.201 501.515 117.203 501.515 cv
70.8672 501.515 li
70.8672 496.063 li
70.8672 496.063 li
cp
.85098 .682353 0 rgb
f
21.8047 485.161 mo
119.929 485.161 li
121.428 485.161 122.654 486.387 122.654 487.886 cv
122.654 489.386 121.428 490.611 119.929 490.611 cv
21.8047 490.611 li
20.3062 490.611 19.0796 489.386 19.0796 487.886 cv
19.0796 486.387 20.3062 485.161 21.8047 485.161 cv
21.8047 485.161 li
cp
21.8047 512.417 mo
119.929 512.417 li
121.428 512.417 122.654 513.644 122.654 515.142 cv
122.654 516.641 121.428 517.867 119.929 517.867 cv
21.8047 517.867 li
20.3062 517.867 19.0796 516.641 19.0796 515.142 cv
19.0796 513.644 20.3062 512.417 21.8047 512.417 cv
21.8047 512.417 li
cp
.545098 .74902 .133333 rgb
ef
70.8672 490.611 mo
70.8672 485.161 li
119.929 485.161 li
121.428 485.161 122.654 486.387 122.654 487.886 cv
122.654 489.386 121.428 490.611 119.929 490.611 cv
70.8672 490.611 li
70.8672 490.611 li
cp
70.8672 512.417 mo
119.929 512.417 li
121.428 512.417 122.654 513.644 122.654 515.142 cv
122.654 516.641 121.428 517.867 119.929 517.867 cv
70.8672 517.867 li
70.8672 512.417 li
70.8672 512.417 li
cp
.431373 .6 .0901961 rgb
ef
21.8052 490.611 mo
76.3184 490.611 li
76.3184 496.063 li
21.8052 496.063 li
21.8052 490.611 li
21.8052 490.611 li
cp
.858824 .184314 .0352941 rgb
ef
70.8672 490.611 mo
119.929 490.611 li
119.929 496.063 li
70.8672 496.063 li
70.8672 490.611 li
70.8672 490.611 li
cp
.701961 .145098 .0235294 rgb
ef
54.5132 452.453 mo
56.0181 452.453 57.2388 453.673 57.2388 455.179 cv
57.2388 456.685 56.0181 457.904 54.5132 457.904 cv
53.0078 457.904 51.7871 456.685 51.7871 455.179 cv
51.7871 453.673 53.0078 452.453 54.5132 452.453 cv
54.5132 452.453 li
cp
46.3359 457.904 mo
47.8413 457.904 49.0615 459.124 49.0615 460.63 cv
49.0615 462.135 47.8413 463.355 46.3359 463.355 cv
44.8311 463.355 43.6104 462.135 43.6104 460.63 cv
43.6104 459.124 44.8311 457.904 46.3359 457.904 cv
46.3359 457.904 li
cp
70.8672 455.179 mo
69.3618 455.179 68.1411 453.958 68.1411 452.453 cv
68.1411 450.947 69.3618 449.728 70.8672 449.728 cv
72.2295 452.453 li
70.8672 455.179 li
70.8672 455.179 li
cp
62.6899 460.63 mo
64.1953 460.63 65.4155 461.851 65.4155 463.355 cv
65.4155 464.86 64.1953 466.081 62.6899 466.081 cv
61.1846 466.081 59.9644 464.86 59.9644 463.355 cv
59.9644 461.851 61.1846 460.63 62.6899 460.63 cv
62.6899 460.63 li
cp
.929412 .898039 .760784 rgb
ef
79.0439 460.63 mo
80.5488 460.63 81.7695 461.851 81.7695 463.355 cv
81.7695 464.86 80.5488 466.081 79.0439 466.081 cv
77.5386 466.081 76.3184 464.86 76.3184 463.355 cv
76.3184 461.851 77.5386 460.63 79.0439 460.63 cv
79.0439 460.63 li
cp
87.2207 452.453 mo
88.7261 452.453 89.9463 453.673 89.9463 455.179 cv
89.9463 456.685 88.7261 457.904 87.2207 457.904 cv
85.7153 457.904 84.4951 456.685 84.4951 455.179 cv
84.4951 453.673 85.7153 452.453 87.2207 452.453 cv
87.2207 452.453 li
cp
95.3975 457.904 mo
96.9033 457.904 98.1235 459.124 98.1235 460.63 cv
98.1235 462.135 96.9033 463.355 95.3975 463.355 cv
93.8926 463.355 92.6719 462.135 92.6719 460.63 cv
92.6719 459.124 93.8926 457.904 95.3975 457.904 cv
95.3975 457.904 li
cp
70.8672 455.179 mo
70.8672 449.728 li
72.3721 449.728 73.5928 450.947 73.5928 452.453 cv
73.5928 453.958 72.3721 455.179 70.8672 455.179 cv
70.8672 455.179 li
cp
.85098 .796078 .552941 rgb
ef
283.465 425.196 mo
283.465 566.929 li
141.732 566.929 li
141.732 425.196 li
283.465 425.196 li
283.465 425.196 li
cp
.866667 .796078 .647059 rgb
ef
283.465 478.768 mo
283.465 566.929 li
201.696 566.929 li
179.891 545.124 li
180.462 448.886 li
191.988 460.412 li
192.949 447.746 li
203.417 458.214 li
205.49 447.045 li
215.23 456.785 li
218.051 447.002 li
227.734 456.686 li
230.596 447.615 li
239.565 456.585 li
243.092 448.886 li
251.429 457.222 li
255.505 450.808 li
283.465 478.768 li
283.465 478.768 li
cp
.729412 .647059 .52549 rgb
ef
207.148 447.002 mo
218.051 447.002 li
218.051 539.673 li
207.148 539.673 li
207.148 447.002 li
207.148 447.002 li
cp
.858824 .709804 .215686 rgb
ef
218.051 447.002 mo
212.599 447.002 li
212.599 539.673 li
218.051 539.673 li
218.051 447.002 li
218.051 447.002 li
cp
.760784 .611765 .129412 rgb
ef
219.708 447.045 mo
230.596 447.615 li
225.771 539.673 li
214.854 539.673 li
219.708 447.045 li
219.708 447.045 li
cp
.858824 .709804 .215686 rgb
ef
230.596 447.615 mo
225.152 447.33 li
220.313 539.673 li
225.771 539.673 li
230.596 447.615 li
230.596 447.615 li
cp
.760784 .611765 .129412 rgb
ef
232.25 447.746 mo
243.092 448.886 li
233.55 539.673 li
222.588 539.673 li
232.25 447.746 li
232.25 447.746 li
cp
.858824 .709804 .215686 rgb
ef
243.092 448.886 mo
237.67 448.315 li
228.068 539.673 li
233.55 539.673 li
243.092 448.886 li
243.092 448.886 li
cp
.760784 .611765 .129412 rgb
ef
194.603 447.615 mo
205.49 447.045 li
210.345 539.673 li
199.427 539.673 li
194.603 447.615 li
194.603 447.615 li
cp
.858824 .709804 .215686 rgb
ef
205.49 447.045 mo
200.046 447.33 li
204.885 539.673 li
210.345 539.673 li
205.49 447.045 li
205.49 447.045 li
cp
.760784 .611765 .129412 rgb
ef
182.106 448.886 mo
192.949 447.746 li
202.611 539.673 li
191.648 539.673 li
182.106 448.886 li
182.106 448.886 li
cp
.858824 .709804 .215686 rgb
ef
192.949 447.746 mo
187.527 448.315 li
197.129 539.673 li
202.611 539.673 li
192.949 447.746 li
192.949 447.746 li
cp
.760784 .611765 .129412 rgb
ef
169.693 450.808 mo
180.462 449.102 li
194.807 539.673 li
183.769 539.673 li
169.693 450.808 li
169.693 450.808 li
cp
.858824 .709804 .215686 rgb
ef
180.462 449.102 mo
175.078 449.955 li
189.287 539.673 li
194.807 539.673 li
180.462 449.102 li
180.462 449.102 li
cp
.760784 .611765 .129412 rgb
ef
244.737 449.102 mo
255.505 450.808 li
241.43 539.673 li
230.392 539.673 li
244.737 449.102 li
244.737 449.102 li
cp
.858824 .709804 .215686 rgb
ef
255.505 450.808 mo
250.12 449.954 li
235.91 539.673 li
241.43 539.673 li
255.505 450.808 li
255.505 450.808 li
cp
.760784 .611765 .129412 rgb
ef
212.599 506.966 mo
201.918 506.966 192.834 500.139 189.466 490.612 cv
174.44 490.612 li
179.891 545.124 li
212.599 545.124 li
226.227 526.045 li
212.599 506.966 li
212.599 506.966 li
cp
1 1 1 rgb
ef
250.758 490.612 mo
235.732 490.612 li
232.364 500.139 223.279 506.965 212.599 506.966 cv
212.599 545.124 li
245.307 545.124 li
245.852 539.673 li
236.326 520.708 li
250.213 496.063 li
250.758 490.612 li
250.758 490.612 li
cp
.901961 .901961 .901961 rgb
ef
174.985 496.063 mo
179.346 539.673 li
245.852 539.673 li
250.213 496.063 li
239.311 496.063 li
234.248 505.987 223.981 512.417 212.599 512.417 cv
201.216 512.417 190.949 505.987 185.887 496.063 cv
174.985 496.063 li
174.985 496.063 li
cp
.858824 .184314 .0352941 rgb
ef
212.599 539.673 mo
245.852 539.673 li
250.213 496.063 li
239.311 496.063 li
234.249 505.987 223.982 512.417 212.599 512.417 cv
212.599 539.673 li
212.599 539.673 li
cp
.701961 .145098 .0235294 rgb
ef
425.197 425.196 mo
425.197 566.929 li
283.465 566.929 li
283.465 425.196 li
425.197 425.196 li
425.197 425.196 li
cp
.431373 .788235 .878431 rgb
ef
425.197 482.107 mo
425.197 566.929 li
370.685 566.929 li
354.331 550.575 li
354.331 506.966 li
401.362 458.272 li
425.197 482.107 li
425.197 482.107 li
cp
.32549 .615686 .690196 rgb
ef
354.331 447.002 mo
371.265 447.002 387.249 451.066 401.362 458.272 cv
354.331 550.575 li
307.301 458.272 li
321.415 451.066 337.397 447.002 354.331 447.002 cv
354.331 447.002 li
cp
.858824 .709804 .215686 rgb
ef
354.331 447.002 mo
371.265 447.002 387.249 451.066 401.362 458.272 cv
396.403 468.005 li
396.403 468.005 li
393.8 466.679 391.958 464.45 391.063 461.896 cv
388.624 463.069 385.746 463.342 382.968 462.439 cv
380.19 461.537 378.022 459.625 376.739 457.241 cv
374.513 458.782 371.713 459.502 368.828 459.045 cv
365.943 458.588 363.503 457.038 361.862 454.885 cv
359.905 456.755 357.252 457.904 354.331 457.904 cv
351.41 457.904 348.757 456.755 346.8 454.885 cv
345.159 457.038 342.72 458.589 339.834 459.045 cv
336.949 459.502 334.149 458.782 331.924 457.241 cv
330.64 459.625 328.472 461.537 325.694 462.44 cv
322.916 463.343 320.038 463.069 317.599 461.896 cv
316.704 464.45 314.862 466.679 312.26 468.005 cv
307.301 458.272 li
321.415 451.066 337.397 447.002 354.331 447.002 cv
354.331 447.002 li
cp
.760784 .611765 .129412 rgb
ef
340.703 476.983 mo
346.725 476.983 351.605 481.865 351.605 487.886 cv
351.605 493.907 346.725 498.788 340.703 498.788 cv
334.683 498.788 329.801 493.907 329.801 487.886 cv
329.801 481.865 334.683 476.983 340.703 476.983 cv
340.703 476.983 li
cp
.701961 .145098 .0235294 rgb
ef
370.686 463.355 mo
376.707 463.355 381.588 468.237 381.588 474.258 cv
381.588 480.279 376.707 485.161 370.686 485.161 cv
364.664 485.161 359.782 480.279 359.782 474.258 cv
359.782 468.237 364.664 463.355 370.686 463.355 cv
370.686 463.355 li
cp
ef
365.234 506.966 mo
368.935 506.966 372.204 508.81 374.176 511.629 cv
365.442 528.768 li
365.373 528.769 365.304 528.771 365.234 528.771 cv
359.213 528.771 354.331 523.89 354.331 517.868 cv
354.331 511.847 359.213 506.966 365.234 506.966 cv
365.234 506.966 li
cp
ef
359.782 515.143 mo
361.288 515.143 362.509 516.362 362.509 517.868 cv
362.509 519.373 361.288 520.594 359.782 520.594 cv
358.277 520.594 357.058 519.373 357.058 517.868 cv
357.058 516.362 358.277 515.143 359.782 515.143 cv
359.782 515.143 li
cp
365.234 509.69 mo
366.739 509.69 367.96 510.911 367.96 512.417 cv
367.96 513.922 366.739 515.143 365.234 515.143 cv
363.729 515.143 362.509 513.922 362.509 512.417 cv
362.509 510.911 363.729 509.69 365.234 509.69 cv
365.234 509.69 li
cp
373.411 476.983 mo
374.917 476.983 376.137 478.204 376.137 479.709 cv
376.137 481.214 374.917 482.435 373.411 482.435 cv
371.905 482.435 370.686 481.214 370.686 479.709 cv
370.686 478.204 371.905 476.983 373.411 476.983 cv
373.411 476.983 li
cp
376.137 468.807 mo
377.642 468.807 378.862 470.026 378.862 471.532 cv
378.862 473.038 377.642 474.258 376.137 474.258 cv
374.632 474.258 373.411 473.038 373.411 471.532 cv
373.411 470.026 374.632 468.807 376.137 468.807 cv
376.137 468.807 li
cp
365.234 471.532 mo
366.739 471.532 367.96 472.753 367.96 474.258 cv
367.96 475.763 366.739 476.983 365.234 476.983 cv
363.729 476.983 362.509 475.763 362.509 474.258 cv
362.509 472.753 363.729 471.532 365.234 471.532 cv
365.234 471.532 li
cp
336.615 489.249 mo
338.12 489.249 339.341 490.47 339.341 491.975 cv
339.341 493.479 338.12 494.7 336.615 494.7 cv
335.109 494.7 333.89 493.479 333.89 491.975 cv
333.89 490.47 335.109 489.249 336.615 489.249 cv
336.615 489.249 li
cp
337.978 479.709 mo
339.483 479.709 340.704 480.93 340.704 482.435 cv
340.704 483.94 339.483 485.161 337.978 485.161 cv
336.473 485.161 335.252 483.94 335.252 482.435 cv
335.252 480.93 336.473 479.709 337.978 479.709 cv
337.978 479.709 li
cp
346.155 485.161 mo
347.66 485.161 348.88 486.381 348.88 487.886 cv
348.88 489.392 347.66 490.612 346.155 490.612 cv
344.649 490.612 343.429 489.392 343.429 487.886 cv
343.429 486.381 344.649 485.161 346.155 485.161 cv
346.155 485.161 li
cp
367.96 517.868 mo
368.962 517.868 369.837 518.408 370.312 519.214 cv
368.226 523.306 li
368.138 523.314 368.05 523.319 367.96 523.319 cv
366.454 523.319 365.234 522.099 365.234 520.593 cv
365.234 519.088 366.454 517.868 367.96 517.868 cv
367.96 517.868 li
cp
.858824 .184314 .0352941 rgb
ef
359.782 490.612 mo
362.794 490.612 365.233 493.053 365.233 496.063 cv
365.233 499.073 362.794 501.515 359.782 501.515 cv
356.772 501.515 354.331 499.073 354.331 496.063 cv
354.331 493.053 356.772 490.612 359.782 490.612 cv
359.782 490.612 li
cp
.301961 .301961 .301961 rgb
ef
348.88 463.355 mo
351.891 463.355 354.331 465.796 354.331 468.807 cv
354.331 471.817 351.891 474.258 348.88 474.258 cv
345.87 474.258 343.429 471.817 343.429 468.807 cv
343.429 465.796 345.87 463.355 348.88 463.355 cv
348.88 463.355 li
cp
ef
337.978 509.69 mo
340.988 509.69 343.429 512.132 343.429 515.143 cv
343.429 517.802 341.524 520.016 339.005 520.496 cv
334.251 511.165 li
335.226 510.251 336.536 509.69 337.978 509.69 cv
337.978 509.69 li
cp
ef
381.588 485.161 mo
383.592 485.161 385.343 486.242 386.29 487.853 cv
382.12 496.037 li
381.944 496.054 381.768 496.063 381.588 496.063 cv
378.577 496.063 376.137 493.622 376.137 490.612 cv
376.137 487.601 378.577 485.161 381.588 485.161 cv
381.588 485.161 li
cp
348.88 528.771 mo
351.891 528.771 354.331 531.211 354.331 534.222 cv
354.331 537.232 351.891 539.673 348.88 539.673 cv
348.846 539.673 348.811 539.672 348.776 539.671 cv
344.409 531.103 li
345.396 529.692 347.03 528.771 348.88 528.771 cv
348.88 528.771 li
cp
327.075 468.807 mo
330.086 468.807 332.526 471.247 332.526 474.258 cv
332.526 477.269 330.086 479.709 327.075 479.709 cv
324.064 479.709 321.624 477.269 321.624 474.258 cv
321.624 471.247 324.064 468.807 327.075 468.807 cv
327.075 468.807 li
cp
.431373 .6 .0901961 rgb
ef
283.465 141.732 mo
283.465 283.464 li
141.732 283.464 li
141.732 141.732 li
283.465 141.732 li
283.465 141.732 li
cp
.85098 .890196 .407843 rgb
ef
283.465 214.081 mo
283.465 283.464 li
214.083 283.464 li
177.908 247.29 li
247.291 177.907 li
283.465 214.081 li
283.465 214.081 li
cp
.678431 .709804 .34902 rgb
ef
212.599 163.537 mo
185.504 163.537 163.539 185.502 163.539 212.598 cv
163.539 239.694 185.504 261.659 212.599 261.659 cv
239.695 261.659 261.661 239.694 261.661 212.598 cv
261.661 185.502 239.695 163.537 212.599 163.537 cv
212.599 163.537 li
cp
.858824 .184314 .0352941 rgb
ef
212.599 163.537 mo
212.599 261.659 li
239.695 261.659 261.661 239.694 261.661 212.598 cv
261.661 185.502 239.695 163.537 212.599 163.537 cv
212.599 163.537 li
cp
.701961 .145098 .0235294 rgb
ef
173.563 224.766 mo
173.116 223.332 173.917 221.806 175.351 221.359 cv
176.786 220.912 178.312 221.713 178.758 223.148 cv
179.052 224.093 179.392 225.034 179.772 225.969 cv
180.146 226.886 180.563 227.793 181.021 228.69 cv
181.703 230.031 181.169 231.671 179.828 232.353 cv
178.487 233.035 176.848 232.501 176.166 231.16 cv
175.118 229.107 174.248 226.967 173.563 224.766 cv
173.563 224.766 li
cp
194.038 176.165 mo
195.378 175.482 197.018 176.016 197.7 177.357 cv
198.382 178.698 197.848 180.337 196.507 181.02 cv
190.666 184.002 185.764 188.551 182.358 194.111 cv
179.064 199.486 177.167 205.816 177.167 212.598 cv
177.167 214.104 175.946 215.324 174.441 215.324 cv
172.936 215.324 171.715 214.104 171.715 212.598 cv
171.715 204.793 173.91 197.492 177.716 191.278 cv
181.652 184.854 187.307 179.601 194.038 176.165 cv
194.038 176.165 li
cp
.901961 .513726 .423529 rgb
f
209.874 168.988 mo
209.874 167.483 211.094 166.263 212.599 166.263 cv
214.105 166.263 215.325 167.483 215.325 168.988 cv
215.325 185.342 li
215.325 186.848 214.105 188.068 212.599 188.068 cv
211.094 188.068 209.874 186.848 209.874 185.342 cv
209.874 168.988 li
209.874 168.988 li
cp
.431373 .160784 .0235294 rgb
f
248.156 209.997 mo
247.962 200.957 244.417 191.976 237.518 185.078 cv
230.62 178.18 221.639 174.634 212.599 174.439 cv
212.794 183.479 216.339 192.46 223.237 199.359 cv
230.136 206.257 239.117 209.803 248.156 209.997 cv
248.156 209.997 li
cp
.545098 .74902 .133333 rgb
ef
212.599 174.439 mo
212.794 183.479 216.339 192.46 223.237 199.359 cv
230.136 206.257 239.117 209.803 248.156 209.997 cv
212.599 174.439 li
212.599 174.439 li
cp
.431373 .6 .0901961 rgb
ef
425.197 283.464 mo
425.197 425.196 li
283.465 425.196 li
283.465 283.464 li
425.197 283.464 li
425.197 283.464 li
cp
.85098 .890196 .407843 rgb
ef
425.197 346.153 mo
425.197 425.196 li
348.88 425.196 li
327.075 403.392 li
342.212 347.663 li
316.173 321.623 li
384.313 305.27 li
425.197 346.153 li
425.197 346.153 li
cp
.678431 .709804 .34902 rgb
ef
321.624 321.623 mo
354.331 321.623 li
365.233 362.508 li
354.331 403.392 li
327.075 403.392 li
325.259 376.136 li
327.075 362.508 li
323.441 348.88 li
321.624 321.623 li
321.624 321.623 li
cp
.560784 .207843 .0313726 rgb
ef
354.331 321.623 mo
387.04 321.623 li
385.222 348.88 li
381.588 362.508 li
383.405 376.136 li
381.588 403.392 li
354.331 403.392 li
354.331 321.623 li
354.331 321.623 li
cp
.431373 .160784 .0235294 rgb
ef
324.351 305.27 mo
384.313 305.27 li
387.04 316.172 li
392.491 316.172 li
392.491 321.623 li
316.173 321.623 li
316.173 316.172 li
321.624 316.172 li
324.351 305.27 li
324.351 305.27 li
cp
1 1 1 rgb
ef
354.331 305.27 mo
384.313 305.27 li
387.04 316.172 li
392.491 316.172 li
392.491 321.623 li
354.331 321.623 li
354.331 305.27 li
354.331 305.27 li
cp
.901961 .901961 .901961 rgb
ef
354.331 343.429 mo
365.233 362.508 li
354.331 381.587 li
349.134 381.587 344.422 379.507 340.98 376.136 cv
325.259 376.136 li
324.896 370.685 li
327.076 362.525 li
323.807 354.366 li
323.441 348.88 li
340.98 348.88 li
344.422 345.508 349.134 343.429 354.331 343.429 cv
354.331 343.429 li
cp
.431373 .788235 .878431 rgb
ef
354.331 343.429 mo
359.53 343.429 364.241 345.508 367.683 348.88 cv
385.222 348.88 li
384.858 354.331 li
381.588 362.508 li
383.769 370.685 li
383.405 376.136 li
367.683 376.136 li
364.241 379.507 359.529 381.587 354.331 381.587 cv
354.331 343.429 li
354.331 343.429 li
cp
.32549 .615686 .690196 rgb
ef
324.896 370.685 mo
343.206 370.685 li
344.796 372.242 li
347.354 374.749 350.749 376.136 354.331 376.136 cv
362.509 362.508 li
354.331 348.88 li
350.748 348.88 347.354 350.267 344.796 352.773 cv
343.206 354.331 li
323.805 354.331 li
324.896 370.685 li
324.896 370.685 li
cp
.858824 .184314 .0352941 rgb
ef
354.331 376.136 mo
357.915 376.136 361.308 374.749 363.867 372.242 cv
365.456 370.685 li
383.769 370.685 li
384.858 354.331 li
365.457 354.331 li
363.867 352.773 li
361.308 350.267 357.915 348.88 354.331 348.88 cv
354.331 376.136 li
354.331 376.136 li
cp
.701961 .145098 .0235294 rgb
ef
141.732 283.464 mo
283.465 283.464 li
283.465 425.196 li
141.732 425.196 li
141.732 283.464 li
141.732 283.464 li
cp
.431373 .788235 .878431 rgb
ef
283.465 346.232 mo
283.465 425.196 li
201.696 425.196 li
165.933 389.433 li
185.343 381.587 li
252.081 314.849 li
283.465 346.232 li
283.465 346.232 li
cp
.32549 .615686 .690196 rgb
ef
172.227 391.812 mo
169.967 391.953 167.66 391.16 165.933 389.433 cv
162.739 386.239 162.739 381.063 165.933 377.869 cv
169.126 374.676 174.303 374.676 177.497 377.869 cv
178.558 378.931 180.289 378.931 181.351 377.869 cv
210.26 348.96 li
217.97 356.669 li
189.061 385.578 li
187.999 386.64 187.999 388.371 189.061 389.433 cv
192.254 392.626 192.254 397.804 189.061 400.997 cv
185.867 404.19 180.69 404.19 177.497 400.997 cv
175.77 399.27 174.977 396.962 175.118 394.702 cv
175.168 393.894 174.897 393.178 174.324 392.604 cv
173.751 392.032 173.036 391.761 172.227 391.812 cv
172.227 391.812 li
cp
1 1 1 rgb
ef
214.115 352.814 mo
217.97 356.669 li
189.061 385.578 li
187.999 386.64 187.999 388.371 189.061 389.433 cv
192.254 392.626 192.254 397.804 189.061 400.997 cv
185.867 404.19 180.69 404.19 177.497 400.997 cv
175.77 399.27 174.977 396.962 175.118 394.702 cv
175.168 393.894 174.897 393.178 174.324 392.604 cv
214.115 352.814 li
214.115 352.814 li
cp
.901961 .901961 .901961 rgb
ef
228.954 305.27 mo
210.89 305.27 196.246 319.913 196.246 337.977 cv
196.246 340.165 196.461 342.305 196.872 344.373 cv
197.966 349.892 196.373 355.14 192.394 359.118 cv
188.537 362.976 li
186.417 365.096 186.417 368.564 188.537 370.685 cv
196.246 378.394 li
198.366 380.514 201.835 380.514 203.955 378.394 cv
207.813 374.536 li
211.791 370.558 217.039 368.964 222.558 370.059 cv
224.626 370.469 226.765 370.685 228.954 370.685 cv
247.017 370.685 261.661 356.041 261.661 337.977 cv
261.661 319.913 247.017 305.27 228.954 305.27 cv
228.954 305.27 li
cp
.94902 .458824 .0313726 rgb
ef
192.391 374.539 mo
196.246 378.394 li
198.366 380.514 201.835 380.514 203.955 378.394 cv
207.813 374.536 li
211.791 370.558 217.039 368.964 222.558 370.059 cv
224.626 370.469 226.765 370.685 228.954 370.685 cv
247.017 370.685 261.661 356.041 261.661 337.977 cv
261.661 328.944 258 320.768 252.081 314.849 cv
192.391 374.539 li
192.391 374.539 li
cp
.8 .372549 0 rgb
ef
425.197 141.732 mo
566.93 141.732 li
566.93 283.464 li
425.197 283.464 li
425.197 141.732 li
425.197 141.732 li
cp
.431373 .788235 .878431 rgb
ef
566.93 228.951 mo
566.93 283.464 li
482.108 283.464 li
449.033 250.389 li
496.063 218.05 li
496.063 158.086 li
566.93 228.951 li
566.93 228.951 li
cp
.32549 .615686 .690196 rgb
ef
496.063 261.659 mo
512.997 261.659 528.981 257.594 543.095 250.389 cv
496.063 158.086 li
449.033 250.389 li
463.146 257.594 479.13 261.659 496.063 261.659 cv
496.063 261.659 li
cp
1 .8 0 rgb
f
493.339 256.208 mo
497.854 256.208 501.515 252.547 501.515 248.031 cv
501.515 243.516 497.854 239.854 493.339 239.854 cv
488.823 239.854 485.161 243.516 485.161 248.031 cv
485.161 252.547 488.823 256.208 493.339 256.208 cv
493.339 256.208 li
cp
523.32 245.306 mo
526.331 245.306 528.772 242.865 528.772 239.854 cv
528.772 236.844 526.331 234.403 523.32 234.403 cv
520.31 234.403 517.869 236.844 517.869 239.854 cv
517.869 242.865 520.31 245.306 523.32 245.306 cv
523.32 245.306 li
cp
501.515 201.696 mo
504.525 201.696 506.966 199.255 506.966 196.245 cv
506.966 193.234 504.525 190.793 501.515 190.793 cv
498.505 190.793 496.063 193.234 496.063 196.245 cv
496.063 199.255 498.505 201.696 501.515 201.696 cv
501.515 201.696 li
cp
487.887 201.696 mo
489.392 201.696 490.612 200.476 490.612 198.97 cv
490.612 197.465 489.392 196.245 487.887 196.245 cv
486.382 196.245 485.161 197.465 485.161 198.97 cv
485.161 200.476 486.382 201.696 487.887 201.696 cv
487.887 201.696 li
cp
512.418 212.598 mo
513.923 212.598 515.144 211.378 515.144 209.873 cv
515.144 208.368 513.923 207.147 512.418 207.147 cv
510.913 207.147 509.692 208.368 509.692 209.873 cv
509.692 211.378 510.913 212.598 512.418 212.598 cv
512.418 212.598 li
cp
504.241 234.403 mo
507.251 234.403 509.692 231.962 509.692 228.952 cv
509.692 225.941 507.251 223.5 504.241 223.5 cv
501.23 223.5 498.79 225.941 498.79 228.952 cv
498.79 231.962 501.23 234.403 504.241 234.403 cv
504.241 234.403 li
cp
476.984 250.757 mo
478.489 250.757 479.71 249.537 479.71 248.031 cv
479.71 246.526 478.489 245.306 476.984 245.306 cv
475.479 245.306 474.259 246.526 474.259 248.031 cv
474.259 249.537 475.479 250.757 476.984 250.757 cv
476.984 250.757 li
cp
471.533 234.403 mo
473.038 234.403 474.259 233.183 474.259 231.677 cv
474.259 230.172 473.038 228.952 471.533 228.952 cv
470.028 228.952 468.808 230.172 468.808 231.677 cv
468.808 233.183 470.028 234.403 471.533 234.403 cv
471.533 234.403 li
cp
512.418 256.208 mo
513.923 256.208 515.144 254.988 515.144 253.482 cv
515.144 251.977 513.923 250.757 512.418 250.757 cv
510.913 250.757 509.692 251.977 509.692 253.482 cv
509.692 254.988 510.913 256.208 512.418 256.208 cv
512.418 256.208 li
cp
458.548 231.716 mo
453.903 240.83 li
454.899 241.906 456.323 242.58 457.905 242.58 cv
460.915 242.58 463.356 240.14 463.356 237.129 cv
463.356 234.336 461.255 232.034 458.548 231.716 cv
458.548 231.716 li
cp
487.729 174.442 mo
481.181 187.295 li
482.659 189.41 485.111 190.793 487.887 190.793 cv
492.403 190.793 496.063 187.132 496.063 182.616 cv
496.063 178.101 492.403 174.44 487.887 174.44 cv
487.835 174.44 487.782 174.441 487.729 174.442 cv
487.729 174.442 li
cp
503.78 173.23 mo
501.62 168.991 li
501.585 168.989 501.55 168.988 501.515 168.988 cv
500.01 168.988 498.79 170.208 498.79 171.714 cv
498.79 173.22 500.01 174.439 501.515 174.439 cv
502.459 174.439 503.291 173.959 503.78 173.23 cv
503.78 173.23 li
cp
529.095 222.913 mo
521.699 208.398 li
519.398 209.845 517.87 212.406 517.87 215.324 cv
517.87 219.84 521.53 223.501 526.046 223.501 cv
527.124 223.501 528.153 223.292 529.095 222.913 cv
529.095 222.913 li
cp
485.161 228.952 mo
491.183 228.952 496.063 224.071 496.063 218.049 cv
496.063 212.028 491.183 207.147 485.161 207.147 cv
479.14 207.147 474.259 212.028 474.259 218.049 cv
474.259 224.071 479.14 228.952 485.161 228.952 cv
485.161 228.952 li
cp
.85098 .682353 0 rgb
f
425.197 141.732 mo
425.197 283.464 li
283.465 283.464 li
283.465 141.732 li
425.197 141.732 li
425.197 141.732 li
cp
.866667 .796078 .647059 rgb
ef
425.197 207.146 mo
425.197 283.464 li
332.526 283.464 li
310.722 261.659 li
381.588 163.537 li
425.197 207.146 li
425.197 207.146 li
cp
.729412 .647059 .52549 rgb
ef
310.722 261.659 mo
359.782 261.659 li
359.782 190.793 li
310.722 190.793 li
310.722 261.659 li
310.722 261.659 li
cp
.431373 .788235 .878431 rgb
ef
359.782 190.793 mo
397.942 190.793 li
397.942 261.659 li
359.782 261.659 li
359.782 190.793 li
359.782 190.793 li
cp
.32549 .615686 .690196 rgb
ef
359.782 190.793 mo
359.782 182.616 li
376.137 174.439 li
381.588 174.439 li
397.942 190.793 li
359.782 190.793 li
359.782 190.793 li
cp
.901961 .901961 .901961 rgb
ef
359.782 190.793 mo
310.722 190.793 li
327.075 174.439 li
376.137 174.439 li
359.782 190.793 li
359.782 190.793 li
cp
1 1 1 rgb
ef
376.137 174.439 mo
327.075 174.439 li
327.075 163.537 li
376.137 163.537 li
376.137 174.439 li
376.137 174.439 li
cp
.431373 .788235 .878431 rgb
ef
376.137 174.439 mo
381.588 174.439 li
381.588 163.537 li
376.137 163.537 li
376.137 174.439 li
376.137 174.439 li
cp
.32549 .615686 .690196 rgb
ef
327.075 239.854 mo
327.075 241.36 325.854 242.58 324.351 242.58 cv
322.845 242.58 321.624 241.36 321.624 239.854 cv
321.624 212.598 li
321.624 211.093 322.845 209.873 324.351 209.873 cv
325.376 209.873 326.27 210.44 326.735 211.278 cv
335.251 224.052 li
343.886 211.097 li
344.715 209.845 346.402 209.501 347.655 210.331 cv
348.494 210.886 348.925 211.828 348.868 212.765 cv
348.869 239.854 li
348.869 241.354 347.654 242.569 346.155 242.569 cv
344.655 242.569 343.44 241.354 343.44 239.854 cv
343.438 221.575 li
337.521 230.453 li
337.519 230.452 li
337.326 230.743 337.073 231.002 336.765 231.209 cv
335.519 232.044 333.831 231.71 332.996 230.464 cv
327.075 221.583 li
327.075 239.854 li
327.075 239.854 li
cp
1 1 1 rgb
ef
141.732 283.464 mo
141.732 425.196 li
0 425.196 li
0 283.464 li
141.732 283.464 li
141.732 283.464 li
cp
.85098 .890196 .407843 rgb
ef
141.732 349.052 mo
141.732 425.196 li
83.1318 425.196 li
45.0469 387.112 li
61.6895 307.402 li
70.8726 316.585 li
70.8726 299.818 li
84.2412 313.187 li
87.7173 302.487 li
99.7778 314.548 li
102.913 310.232 li
141.732 349.052 li
141.732 349.052 li
cp
.678431 .709804 .34902 rgb
ef
70.8726 332.525 mo
66.0225 328.724 62.9063 322.812 62.9063 316.172 cv
62.9063 309.532 66.0225 303.62 70.8726 299.818 cv
75.7227 303.62 78.8389 309.532 78.8389 316.172 cv
78.8389 322.812 75.7227 328.724 70.8726 332.525 cv
70.8726 332.525 li
cp
.545098 .74902 .133333 rgb
ef
70.8726 332.525 mo
70.8726 299.818 li
75.7227 303.62 78.8389 309.532 78.8389 316.172 cv
78.8389 322.812 75.7227 328.724 70.8726 332.525 cv
70.8726 332.525 li
cp
.431373 .6 .0901961 rgb
ef
77.6104 333.595 mo
74.1724 328.48 73.0356 321.895 75.0874 315.58 cv
77.1396 309.265 81.9302 304.604 87.7173 302.487 cv
91.1553 307.603 92.292 314.188 90.2402 320.503 cv
88.1885 326.818 83.3975 331.478 77.6104 333.595 cv
77.6104 333.595 li
cp
.545098 .74902 .133333 rgb
ef
77.6104 333.595 mo
87.7173 302.487 li
91.1553 307.603 92.292 314.188 90.2402 320.503 cv
88.1885 326.818 83.3975 331.478 77.6104 333.595 cv
77.6104 333.595 li
cp
.431373 .6 .0901961 rgb
ef
58.0547 336.687 mo
51.8965 336.462 45.9004 333.511 41.9976 328.139 cv
38.0942 322.767 37.1406 316.151 38.8301 310.226 cv
44.9883 310.45 50.9844 313.401 54.8872 318.773 cv
58.7905 324.146 59.7441 330.76 58.0547 336.687 cv
58.0547 336.687 li
cp
.545098 .74902 .133333 rgb
ef
58.0547 336.687 mo
38.8301 310.226 li
44.9883 310.45 50.9844 313.401 54.8872 318.773 cv
58.7905 324.146 59.7441 330.76 58.0547 336.687 cv
58.0547 336.687 li
cp
.431373 .6 .0901961 rgb
ef
83.688 336.693 mo
81.9985 330.768 82.9526 324.152 86.8555 318.78 cv
90.7583 313.409 96.7549 310.458 102.913 310.232 cv
104.602 316.159 103.648 322.773 99.7451 328.146 cv
95.8428 333.518 89.8462 336.469 83.688 336.693 cv
83.688 336.693 li
cp
.545098 .74902 .133333 rgb
ef
83.688 336.693 mo
102.913 310.232 li
104.602 316.159 103.648 322.773 99.7451 328.146 cv
95.8428 333.518 89.8462 336.469 83.688 336.693 cv
83.688 336.693 li
cp
.431373 .6 .0901961 rgb
ef
64.1343 333.591 mo
58.3467 331.474 53.5562 326.814 51.5039 320.499 cv
49.4521 314.185 50.5894 307.599 54.0269 302.484 cv
59.8145 304.602 64.6055 309.261 66.6572 315.576 cv
68.709 321.891 67.5723 328.477 64.1343 333.591 cv
64.1343 333.591 li
cp
.545098 .74902 .133333 rgb
ef
64.1343 333.591 mo
54.0269 302.484 li
59.8145 304.602 64.6055 309.261 66.6572 315.576 cv
68.709 321.891 67.5723 328.477 64.1343 333.591 cv
64.1343 333.591 li
cp
.431373 .6 .0901961 rgb
ef
54.5127 327.074 mo
70.7417 327.074 69.8281 327.074 87.2324 327.074 cv
102.286 327.074 114.497 339.277 114.489 354.331 cv
114.478 376.136 81.7695 403.392 70.8667 403.392 cv
59.9644 403.392 27.2568 376.136 27.2568 354.331 cv
27.2568 339.277 38.2842 327.074 54.5127 327.074 cv
54.5127 327.074 li
cp
.858824 .184314 .0352941 rgb
ef
70.8672 327.074 mo
87.2324 327.074 li
102.286 327.074 114.497 339.277 114.489 354.331 cv
114.478 376.136 81.77 403.392 70.8672 403.392 cv
70.8672 327.074 li
70.8672 327.074 li
cp
.701961 .145098 .0235294 rgb
ef
59.9644 343.429 mo
61.4697 343.429 62.6899 344.648 62.6899 346.153 cv
62.6899 347.659 61.4697 348.88 59.9644 348.88 cv
58.459 348.88 57.2388 347.659 57.2388 346.153 cv
57.2388 344.648 58.459 343.429 59.9644 343.429 cv
59.9644 343.429 li
cp
70.8672 343.429 mo
69.3618 343.429 68.1411 342.208 68.1411 340.702 cv
68.1411 339.197 69.3618 337.977 70.8672 337.977 cv
73.5928 340.702 li
70.8672 343.429 li
70.8672 343.429 li
cp
49.0615 348.88 mo
50.5669 348.88 51.7871 350.1 51.7871 351.604 cv
51.7871 353.11 50.5669 354.331 49.0615 354.331 cv
47.5566 354.331 46.3359 353.11 46.3359 351.604 cv
46.3359 350.1 47.5566 348.88 49.0615 348.88 cv
49.0615 348.88 li
cp
59.9644 354.331 mo
61.4697 354.331 62.6899 355.551 62.6899 357.057 cv
62.6899 358.562 61.4697 359.782 59.9644 359.782 cv
58.459 359.782 57.2388 358.562 57.2388 357.057 cv
57.2388 355.551 58.459 354.331 59.9644 354.331 cv
59.9644 354.331 li
cp
70.8672 354.331 mo
69.3618 354.331 68.1411 353.11 68.1411 351.604 cv
68.1411 350.1 69.3618 348.88 70.8672 348.88 cv
73.5928 351.604 li
70.8672 354.331 li
70.8672 354.331 li
cp
49.0615 359.782 mo
50.5669 359.782 51.7871 361.002 51.7871 362.508 cv
51.7871 364.013 50.5669 365.233 49.0615 365.233 cv
47.5566 365.233 46.3359 364.013 46.3359 362.508 cv
46.3359 361.002 47.5566 359.782 49.0615 359.782 cv
49.0615 359.782 li
cp
59.9644 365.233 mo
61.4697 365.233 62.6899 366.453 62.6899 367.959 cv
62.6899 369.464 61.4697 370.685 59.9644 370.685 cv
58.459 370.685 57.2388 369.464 57.2388 367.959 cv
57.2388 366.453 58.459 365.233 59.9644 365.233 cv
59.9644 365.233 li
cp
70.8672 365.233 mo
69.3618 365.233 68.1411 364.013 68.1411 362.508 cv
68.1411 361.002 69.3618 359.782 70.8672 359.782 cv
73.5928 362.508 li
70.8672 365.233 li
70.8672 365.233 li
cp
38.1597 343.429 mo
39.6646 343.429 40.8853 344.648 40.8853 346.153 cv
40.8853 347.659 39.6646 348.88 38.1597 348.88 cv
36.6538 348.88 35.4336 347.659 35.4336 346.153 cv
35.4336 344.648 36.6538 343.429 38.1597 343.429 cv
38.1597 343.429 li
cp
38.1597 354.331 mo
39.6646 354.331 40.8853 355.551 40.8853 357.057 cv
40.8853 358.562 39.6646 359.782 38.1597 359.782 cv
36.6538 359.782 35.4336 358.562 35.4336 357.057 cv
35.4336 355.551 36.6538 354.331 38.1597 354.331 cv
38.1597 354.331 li
cp
59.9644 332.525 mo
61.4697 332.525 62.6899 333.746 62.6899 335.251 cv
62.6899 336.757 61.4697 337.977 59.9644 337.977 cv
58.459 337.977 57.2388 336.757 57.2388 335.251 cv
57.2388 333.746 58.459 332.525 59.9644 332.525 cv
59.9644 332.525 li
cp
49.0615 370.685 mo
50.5669 370.685 51.7871 371.905 51.7871 373.41 cv
51.7871 374.915 50.5669 376.136 49.0615 376.136 cv
47.5566 376.136 46.3359 374.915 46.3359 373.41 cv
46.3359 371.905 47.5566 370.685 49.0615 370.685 cv
49.0615 370.685 li
cp
59.9644 376.136 mo
61.4697 376.136 62.6899 377.356 62.6899 378.861 cv
62.6899 380.366 61.4697 381.587 59.9644 381.587 cv
58.459 381.587 57.2388 380.366 57.2388 378.861 cv
57.2388 377.356 58.459 376.136 59.9644 376.136 cv
59.9644 376.136 li
cp
70.8672 376.136 mo
69.3618 376.136 68.1411 374.915 68.1411 373.41 cv
68.1411 371.904 69.3618 370.685 70.8672 370.685 cv
73.5928 373.41 li
70.8672 376.136 li
70.8672 376.136 li
cp
70.8672 387.038 mo
69.3618 387.038 68.1411 385.817 68.1411 384.313 cv
68.1411 382.807 69.3618 381.587 70.8672 381.587 cv
73.5928 384.313 li
70.8672 387.038 li
70.8672 387.038 li
cp
49.0615 337.977 mo
50.5669 337.977 51.7871 339.197 51.7871 340.702 cv
51.7871 342.208 50.5669 343.429 49.0615 343.429 cv
47.5566 343.429 46.3359 342.208 46.3359 340.702 cv
46.3359 339.197 47.5566 337.977 49.0615 337.977 cv
49.0615 337.977 li
cp
.929412 .898039 .760784 rgb
ef
92.6719 337.977 mo
91.167 337.977 89.9463 339.197 89.9463 340.702 cv
89.9463 342.208 91.167 343.429 92.6719 343.429 cv
94.1772 343.429 95.3975 342.208 95.3975 340.702 cv
95.3975 339.197 94.1772 337.977 92.6719 337.977 cv
92.6719 337.977 li
cp
81.7695 343.429 mo
80.2642 343.429 79.0439 344.648 79.0439 346.153 cv
79.0439 347.659 80.2642 348.88 81.7695 348.88 cv
83.2744 348.88 84.4946 347.659 84.4946 346.153 cv
84.4946 344.648 83.2744 343.429 81.7695 343.429 cv
81.7695 343.429 li
cp
92.6719 348.88 mo
91.167 348.88 89.9463 350.1 89.9463 351.604 cv
89.9463 353.11 91.167 354.331 92.6719 354.331 cv
94.1772 354.331 95.3975 353.11 95.3975 351.604 cv
95.3975 350.1 94.1772 348.88 92.6719 348.88 cv
92.6719 348.88 li
cp
81.7695 354.331 mo
80.2642 354.331 79.0439 355.551 79.0439 357.057 cv
79.0439 358.562 80.2642 359.782 81.7695 359.782 cv
83.2744 359.782 84.4946 358.562 84.4946 357.057 cv
84.4946 355.551 83.2744 354.331 81.7695 354.331 cv
81.7695 354.331 li
cp
92.6719 359.782 mo
91.167 359.782 89.9463 361.002 89.9463 362.508 cv
89.9463 364.013 91.167 365.233 92.6719 365.233 cv
94.1772 365.233 95.3975 364.013 95.3975 362.508 cv
95.3975 361.002 94.1772 359.782 92.6719 359.782 cv
92.6719 359.782 li
cp
81.7695 365.233 mo
80.2642 365.233 79.0439 366.453 79.0439 367.959 cv
79.0439 369.464 80.2642 370.685 81.7695 370.685 cv
83.2744 370.685 84.4946 369.464 84.4946 367.959 cv
84.4946 366.453 83.2744 365.233 81.7695 365.233 cv
81.7695 365.233 li
cp
103.574 343.429 mo
102.069 343.429 100.849 344.648 100.849 346.153 cv
100.849 347.659 102.069 348.88 103.574 348.88 cv
105.08 348.88 106.3 347.659 106.3 346.153 cv
106.3 344.648 105.08 343.429 103.574 343.429 cv
103.574 343.429 li
cp
103.574 354.331 mo
102.069 354.331 100.849 355.551 100.849 357.057 cv
100.849 358.562 102.069 359.782 103.574 359.782 cv
105.08 359.782 106.3 358.562 106.3 357.057 cv
106.3 355.551 105.08 354.331 103.574 354.331 cv
103.574 354.331 li
cp
81.7695 332.525 mo
80.2642 332.525 79.0439 333.746 79.0439 335.251 cv
79.0439 336.757 80.2642 337.977 81.7695 337.977 cv
83.2744 337.977 84.4946 336.757 84.4946 335.251 cv
84.4946 333.746 83.2744 332.525 81.7695 332.525 cv
81.7695 332.525 li
cp
92.6719 370.685 mo
91.167 370.685 89.9463 371.905 89.9463 373.41 cv
89.9463 374.915 91.167 376.136 92.6719 376.136 cv
94.1772 376.136 95.3975 374.915 95.3975 373.41 cv
95.3975 371.905 94.1772 370.685 92.6719 370.685 cv
92.6719 370.685 li
cp
81.7695 376.136 mo
80.2642 376.136 79.0439 377.356 79.0439 378.861 cv
79.0439 380.366 80.2642 381.587 81.7695 381.587 cv
83.2744 381.587 84.4946 380.366 84.4946 378.861 cv
84.4946 377.356 83.2744 376.136 81.7695 376.136 cv
81.7695 376.136 li
cp
70.8672 343.429 mo
70.8672 337.977 li
72.3721 337.977 73.5928 339.197 73.5928 340.702 cv
73.5928 342.208 72.3721 343.429 70.8672 343.429 cv
70.8672 343.429 li
cp
70.8672 354.331 mo
70.8672 348.88 li
72.3721 348.88 73.5928 350.1 73.5928 351.604 cv
73.5928 353.11 72.3721 354.331 70.8672 354.331 cv
70.8672 354.331 li
cp
70.8672 365.233 mo
70.8672 359.782 li
72.3721 359.782 73.5928 361.002 73.5928 362.508 cv
73.5928 364.013 72.3721 365.233 70.8672 365.233 cv
70.8672 365.233 li
cp
70.8672 376.136 mo
70.8672 370.685 li
72.3721 370.685 73.5928 371.905 73.5928 373.41 cv
73.5928 374.915 72.3721 376.136 70.8672 376.136 cv
70.8672 376.136 li
cp
70.8672 387.038 mo
70.8672 381.587 li
72.3721 381.587 73.5928 382.808 73.5928 384.313 cv
73.5928 385.817 72.3721 387.038 70.8672 387.038 cv
70.8672 387.038 li
cp
.85098 .796078 .552941 rgb
ef
141.732 141.732 mo
141.732 283.464 li
0 283.464 li
0 141.732 li
141.732 141.732 li
141.732 141.732 li
cp
.866667 .796078 .647059 rgb
ef
141.732 214.084 mo
141.732 283.464 li
72.3525 283.464 li
36.1763 247.288 li
38.1597 196.245 li
105.557 177.908 li
141.732 214.084 li
141.732 214.084 li
cp
.729412 .647059 .52549 rgb
ef
59.3018 224.163 mo
59.3018 224.163 li
36.1763 247.289 li
36.1763 247.288 li
27.2974 238.41 21.8052 226.145 21.8052 212.598 cv
21.8052 185.506 43.7739 163.537 70.8667 163.537 cv
76.3179 179.891 li
70.8667 196.245 li
61.8315 196.245 54.5127 203.563 54.5127 212.598 cv
54.5127 217.116 56.3428 221.205 59.3018 224.163 cv
59.3018 224.163 li
cp
.560784 .207843 .0313726 rgb
ef
70.8672 163.537 mo
97.959 163.537 119.928 185.506 119.928 212.598 cv
119.928 219.14 118.592 225.462 116.173 231.303 cv
113.642 237.413 110.012 242.833 105.557 247.288 cv
100.077 252.768 91.6758 253.546 85.3672 249.621 cv
83.8594 258.693 li
75.0396 252.285 li
83.2285 248.033 li
76.1182 241.804 75.7334 230.861 82.4312 224.163 cv
84.0073 222.587 85.2363 220.804 86.021 218.91 cv
86.7935 217.044 87.2202 214.917 87.2202 212.598 cv
87.2202 203.563 79.9019 196.245 70.8672 196.245 cv
70.8672 163.537 li
70.8672 163.537 li
cp
.431373 .160784 .0235294 rgb
ef
47.6987 219.412 mo
38.667 219.412 31.3452 226.734 31.3452 235.766 cv
31.3452 244.798 38.667 252.12 47.6987 252.12 cv
56.731 252.12 64.0527 244.798 64.0527 235.766 cv
64.0527 226.734 56.731 219.412 47.6987 219.412 cv
47.6987 219.412 li
cp
ef
40.8853 234.403 mo
42.3906 234.403 43.6104 235.624 43.6104 237.129 cv
43.6104 238.634 42.3906 239.854 40.8853 239.854 cv
39.3799 239.854 38.1597 238.634 38.1597 237.129 cv
38.1597 235.624 39.3799 234.403 40.8853 234.403 cv
40.8853 234.403 li
cp
57.2388 231.677 mo
58.7441 231.677 59.9644 232.897 59.9644 234.403 cv
59.9644 235.908 58.7441 237.129 57.2388 237.129 cv
55.7334 237.129 54.5132 235.908 54.5132 234.403 cv
54.5132 232.897 55.7334 231.677 57.2388 231.677 cv
57.2388 231.677 li
cp
49.0615 238.492 mo
49.8145 238.492 50.4248 239.102 50.4248 239.854 cv
50.4248 240.607 49.8145 241.217 49.0615 241.217 cv
48.3091 241.217 47.6987 240.607 47.6987 239.854 cv
47.6987 239.102 48.3091 238.492 49.0615 238.492 cv
49.0615 238.492 li
cp
43.6104 243.943 mo
44.3633 243.943 44.9731 244.553 44.9731 245.306 cv
44.9731 246.059 44.3633 246.668 43.6104 246.668 cv
42.8574 246.668 42.2476 246.059 42.2476 245.306 cv
42.2476 244.553 42.8574 243.943 43.6104 243.943 cv
43.6104 243.943 li
cp
53.1504 245.306 mo
53.9028 245.306 54.5132 245.916 54.5132 246.668 cv
54.5132 247.421 53.9028 248.031 53.1504 248.031 cv
52.3975 248.031 51.7871 247.421 51.7871 246.668 cv
51.7871 245.916 52.3975 245.306 53.1504 245.306 cv
53.1504 245.306 li
cp
38.1597 228.952 mo
38.9121 228.952 39.5225 229.562 39.5225 230.315 cv
39.5225 231.067 38.9121 231.678 38.1597 231.678 cv
37.4063 231.678 36.7964 231.067 36.7964 230.315 cv
36.7964 229.562 37.4063 228.952 38.1597 228.952 cv
38.1597 228.952 li
cp
49.0615 230.315 mo
49.8145 230.315 50.4248 230.925 50.4248 231.678 cv
50.4248 232.431 49.8145 233.041 49.0615 233.041 cv
48.3091 233.041 47.6987 232.431 47.6987 231.678 cv
47.6987 230.925 48.3091 230.315 49.0615 230.315 cv
49.0615 230.315 li
cp
46.3359 223.501 mo
47.8413 223.501 49.0615 224.721 49.0615 226.227 cv
49.0615 227.732 47.8413 228.952 46.3359 228.952 cv
44.8311 228.952 43.6104 227.732 43.6104 226.227 cv
43.6104 224.721 44.8311 223.501 46.3359 223.501 cv
46.3359 223.501 li
cp
.85098 .796078 .552941 rgb
ef
566.93 283.464 mo
566.93 425.196 li
425.197 425.196 li
425.197 283.464 li
566.93 283.464 li
566.93 283.464 li
cp
.866667 .796078 .647059 rgb
ef
566.93 350.787 mo
566.93 425.196 li
492.521 425.196 li
464.311 396.986 li
527.817 311.675 li
566.93 350.787 li
566.93 350.787 li
cp
.729412 .647059 .52549 rgb
ef
479.71 305.27 mo
512.418 305.27 li
524.411 305.27 534.223 315.084 534.223 327.074 cv
534.223 381.587 li
534.223 393.577 524.408 403.392 512.418 403.392 cv
479.71 403.392 li
467.72 403.392 457.904 393.579 457.904 381.587 cv
457.904 327.074 li
457.904 315.081 467.718 305.27 479.71 305.27 cv
479.71 305.27 li
cp
.301961 .301961 .301961 rgb
ef
479.71 305.27 mo
512.418 305.27 li
524.411 305.27 534.223 315.084 534.223 327.074 cv
534.223 381.587 li
534.223 393.577 524.408 403.392 512.418 403.392 cv
479.71 403.392 li
479.71 305.27 li
479.71 305.27 li
cp
.2 .2 .2 rgb
ef
479.71 305.27 mo
512.418 305.27 li
524.411 305.27 534.223 315.084 534.223 327.074 cv
534.223 332.525 li
534.223 344.517 524.408 354.331 512.418 354.331 cv
479.71 354.331 li
467.72 354.331 457.904 344.519 457.904 332.525 cv
457.904 327.074 li
457.904 315.081 467.718 305.27 479.71 305.27 cv
479.71 305.27 li
cp
.301961 .301961 .301961 rgb
ef
512.418 310.721 mo
479.71 310.721 li
470.716 310.721 463.356 318.08 463.356 327.074 cv
463.356 332.525 li
463.356 341.521 470.716 348.88 479.71 348.88 cv
512.418 348.88 li
521.413 348.88 528.772 341.521 528.772 332.525 cv
528.772 327.074 li
528.772 318.08 521.413 310.721 512.418 310.721 cv
512.418 310.721 li
cp
1 1 1 rgb
ef
503.073 321.623 mo
489.056 321.623 li
485.2 321.623 482.046 324.777 482.046 328.632 cv
482.046 330.968 li
482.046 334.47 484.649 337.394 488.016 337.899 cv
504.609 321.794 li
504.114 321.683 503.601 321.623 503.073 321.623 cv
503.073 321.623 li
cp
.94902 .458824 .0313726 rgb
ef
487.972 337.893 mo
488.325 337.948 488.687 337.977 489.056 337.977 cv
503.073 337.977 li
506.928 337.977 510.081 334.823 510.081 330.968 cv
510.081 328.632 li
510.081 325.146 507.501 322.232 504.156 321.708 cv
487.972 337.893 li
487.972 337.893 li
cp
.545098 .74902 .133333 rgb
ef
425.197 425.196 mo
566.93 425.196 li
566.93 566.929 li
425.197 566.929 li
425.197 425.196 li
425.197 425.196 li
cp
.85098 .890196 .407843 rgb
ef
566.93 506.878 mo
566.93 566.929 li
493.815 566.929 li
470.409 543.522 li
496.241 471.709 li
482.437 457.904 li
485.161 452.453 li
507.761 447.71 li
566.93 506.878 li
566.93 506.878 li
cp
.678431 .709804 .34902 rgb
ef
523.32 539.673 mo
523.32 542.671 520.866 545.124 517.869 545.124 cv
474.259 545.124 li
471.261 545.124 468.808 542.671 468.808 539.673 cv
468.808 490.612 li
468.808 486.211 471.45 482.397 475.226 480.68 cv
478.353 479.257 480.454 476.734 481.287 473.401 cv
485.161 457.904 li
485.161 452.453 li
485.161 450.952 486.386 449.728 487.887 449.728 cv
504.241 449.728 li
505.742 449.728 506.966 450.952 506.966 452.453 cv
506.966 457.904 li
510.841 473.401 li
511.674 476.733 513.774 479.257 516.902 480.68 cv
520.678 482.397 523.32 486.212 523.32 490.612 cv
523.32 539.673 li
523.32 539.673 li
cp
.560784 .207843 .0313726 rgb
ef
523.32 539.673 mo
523.32 542.671 520.866 545.124 517.869 545.124 cv
496.063 545.124 li
496.063 449.728 li
504.241 449.728 li
505.742 449.728 506.966 450.952 506.966 452.453 cv
506.966 457.904 li
510.841 473.401 li
511.674 476.733 513.774 479.257 516.902 480.68 cv
520.678 482.397 523.32 486.212 523.32 490.612 cv
523.32 539.673 li
523.32 539.673 li
cp
.431373 .160784 .0235294 rgb
ef
486.204 447.002 mo
505.923 447.002 li
507.306 447.002 508.456 448.018 508.628 449.39 cv
509.692 457.904 li
508.187 457.904 506.966 456.685 506.966 455.179 cv
506.966 456.685 505.746 457.904 504.241 457.904 cv
502.735 457.904 501.515 456.685 501.515 455.179 cv
501.515 456.685 500.295 457.904 498.79 457.904 cv
497.284 457.904 496.063 456.685 496.063 455.179 cv
496.063 456.685 494.844 457.904 493.339 457.904 cv
491.833 457.904 490.612 456.685 490.612 455.179 cv
490.612 456.685 489.392 457.904 487.887 457.904 cv
486.382 457.904 485.161 456.685 485.161 455.179 cv
485.161 456.685 483.94 457.904 482.437 457.904 cv
483.5 449.39 li
483.672 448.018 484.822 447.002 486.204 447.002 cv
486.204 447.002 li
cp
.431373 .788235 .878431 rgb
ef
496.063 447.002 mo
505.923 447.002 li
507.306 447.002 508.456 448.018 508.628 449.39 cv
509.692 457.904 li
508.187 457.904 506.966 456.685 506.966 455.179 cv
506.966 456.685 505.746 457.904 504.241 457.904 cv
502.735 457.904 501.515 456.685 501.515 455.179 cv
501.515 456.685 500.295 457.904 498.79 457.904 cv
497.284 457.904 496.063 456.685 496.063 455.179 cv
496.063 447.002 li
496.063 447.002 li
cp
.32549 .615686 .690196 rgb
ef
468.808 496.063 mo
523.32 496.063 li
523.32 528.771 li
468.808 528.771 li
468.808 496.063 li
468.808 496.063 li
cp
.431373 .788235 .878431 rgb
ef
496.063 496.063 mo
523.32 496.063 li
523.32 528.771 li
496.063 528.771 li
496.063 496.063 li
496.063 496.063 li
cp
.32549 .615686 .690196 rgb
ef
468.808 501.515 mo
523.32 501.515 li
523.32 523.318 li
468.808 523.318 li
468.808 501.515 li
468.808 501.515 li
cp
1 .8 0 rgb
f
496.063 501.515 mo
523.32 501.515 li
523.32 523.318 li
496.063 523.318 li
496.063 501.515 li
496.063 501.515 li
cp
.85098 .682353 0 rgb
f
475.616 528.771 mo
475.616 539.673 li
475.616 540.423 475.009 541.03 474.259 541.03 cv
473.509 541.03 472.901 540.423 472.901 539.673 cv
472.901 528.771 li
475.616 528.771 li
475.616 528.771 li
cp
483.536 478.581 mo
483.922 477.937 484.756 477.728 485.399 478.112 cv
486.043 478.497 486.253 479.331 485.868 479.976 cv
484.957 481.491 483.832 482.844 482.517 484.003 cv
481.208 485.157 479.71 486.125 478.048 486.882 cv
477.309 487.218 476.698 487.753 476.275 488.404 cv
475.858 489.047 475.622 489.809 475.622 490.612 cv
475.616 490.612 li
475.616 496.063 li
472.901 496.063 li
472.901 490.612 li
472.896 490.612 li
472.896 489.279 473.296 488.006 473.997 486.925 cv
474.702 485.839 475.708 484.952 476.919 484.401 cv
478.339 483.755 479.612 482.934 480.718 481.959 cv
481.833 480.976 482.778 479.842 483.536 478.581 cv
483.536 478.581 li
cp
485.665 472.758 mo
485.847 472.029 486.585 471.586 487.314 471.768 cv
488.044 471.95 488.487 472.689 488.305 473.418 cv
487.896 475.053 li
487.714 475.782 486.975 476.226 486.245 476.043 cv
485.517 475.861 485.073 475.122 485.255 474.394 cv
485.665 472.758 li
485.665 472.758 li
cp
488.098 463.025 mo
488.279 462.297 489.019 461.854 489.747 462.035 cv
490.477 462.218 490.92 462.956 490.737 463.686 cv
489.375 469.137 li
489.192 469.866 488.454 470.309 487.725 470.127 cv
486.996 469.944 486.553 469.206 486.734 468.477 cv
488.098 463.025 li
488.098 463.025 li
cp
.866667 .796078 .647059 rgb
ef
0 141.732 mo
566.93 141.732 li
566.93 0 li
0 0 li
0 141.732 li
0 141.732 li
cp
.858824 .184314 .0352941 rgb
ef
245.552 30.8262 mo
238.312 30.8262 232.441 36.6963 232.441 43.9365 cv
232.441 51.1772 238.312 57.0469 245.552 57.0469 cv
321.355 57.0464 li
328.576 57.1367 334.488 51.1045 334.488 43.9365 cv
334.488 36.6963 328.618 30.8262 321.378 30.8262 cv
296.575 30.8262 li
296.575 23.5859 290.706 17.7163 283.465 17.7163 cv
276.225 17.7163 270.354 23.5859 270.354 30.8262 cv
245.552 30.8262 li
245.552 30.8262 li
cp
1 1 1 rgb
ef
542.045 114.414 mo
541.503 114.414 541.035 114.21 540.642 113.803 cv
540.248 113.396 540.052 112.922 540.052 112.379 cv
540.052 89.2646 li
540.052 89.0479 539.983 88.8711 539.848 88.7358 cv
539.712 88.6001 539.536 88.5322 539.319 88.5322 cv
535.534 88.5322 li
534.991 88.5322 534.523 88.3354 534.13 87.9424 cv
533.737 87.5488 533.54 87.0811 533.54 86.5386 cv
533.54 85.9961 533.737 85.5278 534.13 85.1343 cv
534.523 84.7412 534.991 84.5444 535.534 84.5444 cv
548.516 84.5444 li
549.059 84.5444 549.526 84.7412 549.919 85.1343 cv
550.313 85.5278 550.51 85.9961 550.51 86.5386 cv
550.51 87.0811 550.313 87.5488 549.919 87.9424 cv
549.526 88.3354 549.059 88.5322 548.516 88.5322 cv
544.771 88.5322 li
544.555 88.5322 544.386 88.6001 544.263 88.7358 cv
544.142 88.8711 544.08 89.0479 544.08 89.2646 cv
544.08 112.379 li
544.08 112.922 543.877 113.396 543.47 113.803 cv
543.063 114.21 542.588 114.414 542.045 114.414 cv
542.045 114.414 li
cp
522.064 88.5732 mo
521.848 88.5732 521.671 88.6406 521.536 88.7764 cv
521.399 88.9121 521.332 89.0884 521.332 89.3057 cv
521.332 96.7524 li
521.332 96.9697 521.399 97.1392 521.536 97.2607 cv
521.671 97.3833 521.848 97.4443 522.064 97.4443 cv
527.396 97.4443 li
527.938 97.4443 528.406 97.6406 528.8 98.0342 cv
529.192 98.4277 529.39 98.9092 529.39 99.4795 cv
529.39 100.021 529.192 100.489 528.8 100.883 cv
528.406 101.276 527.938 101.473 527.396 101.473 cv
522.064 101.473 li
521.848 101.473 521.671 101.541 521.536 101.677 cv
521.399 101.812 521.332 101.989 521.332 102.206 cv
521.332 109.652 li
521.332 109.842 521.399 110.005 521.536 110.141 cv
521.671 110.276 521.848 110.344 522.064 110.344 cv
529.431 110.344 li
529.973 110.344 530.44 110.541 530.835 110.935 cv
531.228 111.328 531.425 111.796 531.425 112.338 cv
531.425 112.908 531.228 113.39 530.835 113.783 cv
530.44 114.176 529.973 114.373 529.431 114.373 cv
519.338 114.373 li
518.796 114.373 518.327 114.176 517.935 113.783 cv
517.541 113.39 517.344 112.908 517.344 112.338 cv
517.344 86.5791 li
517.344 86.0361 517.541 85.5684 517.935 85.1748 cv
518.327 84.7813 518.796 84.585 519.338 84.585 cv
529.431 84.585 li
529.973 84.585 530.44 84.7813 530.835 85.1748 cv
531.228 85.5684 531.425 86.0361 531.425 86.5791 cv
531.425 87.1221 531.228 87.5894 530.835 87.9829 cv
530.44 88.3765 529.973 88.5732 529.431 88.5732 cv
522.064 88.5732 li
522.064 88.5732 li
cp
505.014 89.1836 mo
504.498 89.5361 504.118 89.9971 503.874 90.5674 cv
503.712 90.9468 503.63 91.3535 503.63 91.7881 cv
503.63 92.2764 503.726 92.7236 503.915 93.1309 cv
504.078 93.5918 504.362 94.0938 504.77 94.6367 cv
505.095 95.0977 505.529 95.5928 506.071 96.1221 cv
506.614 96.6509 507.293 97.2681 508.106 97.9736 cv
508.459 98.2715 508.846 98.604 509.267 98.9702 cv
509.687 99.3364 510.101 99.7368 510.508 100.171 cv
510.941 100.604 511.314 101.019 511.626 101.412 cv
511.938 101.806 512.229 102.192 512.501 102.572 cv
512.936 103.223 513.247 103.833 513.438 104.403 cv
513.817 105.38 514.007 106.329 514.007 107.251 cv
514.007 108.689 513.587 110.019 512.745 111.239 cv
511.959 112.379 510.915 113.247 509.612 113.844 cv
508.69 114.224 507.768 114.414 506.845 114.414 cv
505.38 114.414 504.037 113.993 502.816 113.152 cv
501.649 112.365 500.782 111.321 500.212 110.019 cv
499.859 109.15 499.683 108.229 499.683 107.251 cv
499.683 106.682 499.88 106.2 500.272 105.807 cv
500.666 105.414 501.135 105.217 501.677 105.217 cv
502.22 105.217 502.688 105.414 503.081 105.807 cv
503.474 106.2 503.671 106.682 503.671 107.251 cv
503.671 107.848 503.847 108.432 504.2 109.001 cv
504.58 109.517 505.041 109.896 505.583 110.141 cv
505.991 110.304 506.411 110.385 506.845 110.385 cv
507.496 110.385 508.079 110.208 508.595 109.856 cv
509.11 109.476 509.49 109.015 509.734 108.473 cv
509.897 108.065 509.979 107.645 509.979 107.211 cv
509.979 106.723 509.884 106.275 509.694 105.868 cv
509.531 105.407 509.259 104.918 508.88 104.403 cv
508.526 103.942 508.086 103.439 507.558 102.897 cv
507.028 102.354 506.343 101.73 505.502 101.025 cv
504.986 100.564 504.464 100.096 503.936 99.6216 cv
503.407 99.1465 502.911 98.6382 502.45 98.0952 cv
501.392 96.9561 500.632 95.8032 500.171 94.6367 cv
499.792 93.6597 499.602 92.7104 499.602 91.7881 cv
499.602 91.0557 499.71 90.3506 499.927 89.6719 cv
500.144 88.9937 500.442 88.356 500.822 87.7593 cv
501.69 86.5654 502.749 85.7109 503.997 85.1953 cv
504.837 84.8154 505.76 84.626 506.764 84.626 cv
508.256 84.626 509.599 85.0327 510.792 85.8467 cv
511.933 86.6333 512.8 87.6777 513.397 88.98 cv
513.749 89.8481 513.926 90.7842 513.926 91.7881 cv
513.926 92.3306 513.729 92.7983 513.335 93.1919 cv
512.942 93.585 512.475 93.7817 511.933 93.7817 cv
511.389 93.7817 510.921 93.585 510.528 93.1919 cv
510.135 92.7983 509.938 92.3306 509.938 91.7881 cv
509.938 91.1636 509.762 90.5674 509.409 89.9971 cv
509.028 89.4819 508.554 89.1021 507.984 88.8579 cv
507.604 88.6953 507.198 88.6138 506.764 88.6138 cv
506.14 88.6138 505.557 88.8037 505.014 89.1836 cv
505.014 89.1836 li
cp
474.534 112.338 mo
474.534 112.908 474.337 113.39 473.944 113.783 cv
473.551 114.176 473.083 114.373 472.54 114.373 cv
471.997 114.373 471.529 114.176 471.136 113.783 cv
470.743 113.39 470.546 112.908 470.546 112.338 cv
470.546 86.5791 li
470.546 86.1177 470.688 85.7041 470.974 85.3379 cv
471.258 84.9717 471.632 84.7344 472.093 84.626 cv
472.201 84.5986 472.351 84.585 472.54 84.585 cv
472.92 84.585 473.272 84.687 473.599 84.8906 cv
473.924 85.0938 474.182 85.3716 474.371 85.7246 cv
481.777 101.595 li
481.886 101.812 482.05 101.894 482.267 101.839 cv
482.51 101.785 482.632 101.649 482.632 101.432 cv
482.632 86.5791 li
482.632 86.0361 482.829 85.5684 483.222 85.1748 cv
483.616 84.7813 484.083 84.585 484.626 84.585 cv
485.169 84.585 485.637 84.7813 486.03 85.1748 cv
486.423 85.5684 486.62 86.0361 486.62 86.5791 cv
486.62 112.338 li
486.62 112.799 486.478 113.22 486.192 113.6 cv
485.908 113.979 485.535 114.224 485.074 114.332 cv
484.992 114.332 484.911 114.339 484.83 114.353 cv
484.748 114.366 484.681 114.373 484.626 114.373 cv
484.247 114.373 483.887 114.271 483.548 114.068 cv
483.209 113.864 482.958 113.573 482.795 113.193 cv
475.348 97.3223 li
475.294 97.1592 475.172 97.0781 474.981 97.0781 cv
474.86 97.0781 li
474.643 97.1323 474.534 97.2817 474.534 97.5259 cv
474.534 112.338 li
474.534 112.338 li
cp
454.716 106.519 mo
454.716 107.333 454.933 108.052 455.367 108.676 cv
455.774 109.3 456.33 109.761 457.036 110.059 cv
457.497 110.25 457.999 110.344 458.542 110.344 cv
459.355 110.344 460.074 110.127 460.698 109.693 cv
461.322 109.286 461.783 108.73 462.081 108.025 cv
462.271 107.563 462.366 107.062 462.366 106.519 cv
462.366 92.3984 li
462.366 91.5845 462.149 90.8789 461.716 90.2822 cv
461.309 89.6582 460.753 89.1973 460.048 88.8984 cv
459.532 88.6816 459.03 88.5732 458.542 88.5732 cv
457.81 88.5732 457.09 88.79 456.385 89.2241 cv
455.761 89.6309 455.3 90.2012 455.001 90.9336 cv
454.893 91.1504 454.817 91.3877 454.777 91.6455 cv
454.736 91.9033 454.716 92.1543 454.716 92.3984 cv
454.716 106.519 li
454.716 106.519 li
cp
454.146 113.03 mo
453.522 112.596 452.966 112.087 452.478 111.504 cv
451.989 110.921 451.597 110.276 451.298 109.571 cv
450.891 108.595 450.688 107.577 450.688 106.519 cv
450.688 92.3984 li
450.688 91.6113 450.803 90.8452 451.033 90.0991 cv
451.265 89.353 451.597 88.668 452.03 88.0439 cv
452.898 86.7148 454.052 85.7651 455.489 85.1953 cv
456.466 84.7886 457.483 84.585 458.542 84.585 cv
460.169 84.585 461.634 85.0327 462.937 85.9277 cv
464.238 86.7959 465.175 87.9355 465.744 89.3462 cv
466.179 90.377 466.396 91.3945 466.396 92.3984 cv
466.396 106.519 li
466.396 108.093 465.948 109.558 465.053 110.914 cv
464.618 111.538 464.109 112.094 463.526 112.583 cv
462.943 113.071 462.299 113.464 461.593 113.763 cv
460.616 114.17 459.6 114.373 458.542 114.373 cv
456.968 114.373 455.503 113.926 454.146 113.03 cv
454.146 113.03 li
cp
437.259 90.5674 mo
437.068 90.9199 436.974 91.3267 436.974 91.7881 cv
436.974 107.251 li
436.974 107.876 437.163 108.459 437.544 109.001 cv
437.896 109.517 438.357 109.896 438.927 110.141 cv
439.279 110.304 439.687 110.385 440.147 110.385 cv
440.8 110.385 441.382 110.208 441.897 109.856 cv
442.386 109.558 442.766 109.096 443.037 108.473 cv
443.2 108.065 443.281 107.659 443.281 107.251 cv
443.281 106.709 443.478 106.241 443.871 105.848 cv
444.265 105.454 444.746 105.258 445.315 105.258 cv
445.858 105.258 446.326 105.454 446.72 105.848 cv
447.113 106.241 447.31 106.709 447.31 107.251 cv
447.31 107.957 447.201 108.648 446.984 109.327 cv
446.768 110.005 446.469 110.643 446.089 111.239 cv
445.303 112.433 444.244 113.301 442.915 113.844 cv
442.02 114.224 441.098 114.414 440.147 114.414 cv
438.737 114.414 437.394 114.007 436.119 113.193 cv
434.952 112.406 434.098 111.348 433.556 110.019 cv
433.176 109.124 432.985 108.201 432.985 107.251 cv
432.985 91.7881 li
432.985 90.2959 433.393 88.9531 434.206 87.7593 cv
434.993 86.5928 436.038 85.7383 437.34 85.1953 cv
438.181 84.8154 439.117 84.626 440.147 84.626 cv
441.612 84.626 442.942 85.0327 444.136 85.8467 cv
445.329 86.6333 446.197 87.6777 446.741 88.98 cv
447.12 89.9023 447.31 90.8384 447.31 91.7881 cv
447.31 92.3306 447.113 92.7983 446.72 93.1919 cv
446.326 93.585 445.858 93.7817 445.315 93.7817 cv
444.746 93.7817 444.265 93.585 443.871 93.1919 cv
443.478 92.7983 443.281 92.3306 443.281 91.7881 cv
443.281 91.1094 443.104 90.5127 442.753 89.9971 cv
442.399 89.4819 441.938 89.1021 441.368 88.8579 cv
440.989 88.6953 440.582 88.6138 440.147 88.6138 cv
439.551 88.6138 438.968 88.79 438.397 89.1426 cv
437.829 89.5225 437.448 89.9971 437.259 90.5674 cv
437.259 90.5674 li
cp
428.917 112.379 mo
428.917 112.948 428.72 113.431 428.326 113.824 cv
427.933 114.217 427.465 114.414 426.923 114.414 cv
426.38 114.414 425.911 114.217 425.519 113.824 cv
425.125 113.431 424.928 112.948 424.928 112.379 cv
424.928 86.6196 li
424.928 86.0771 425.125 85.6089 425.519 85.2158 cv
425.911 84.8223 426.38 84.626 426.923 84.626 cv
427.465 84.626 427.933 84.8223 428.326 85.2158 cv
428.72 85.6089 428.917 86.0771 428.917 86.6196 cv
428.917 112.379 li
428.917 112.379 li
cp
1 .8 0 rgb
f
426.876 78.7285 mo
425.761 78.7285 424.842 77.8604 424.842 76.7344 cv
424.842 75.6084 425.761 74.7402 426.876 74.7402 cv
547.635 74.7402 li
548.729 74.7402 549.628 75.6406 549.628 76.7344 cv
549.628 77.8281 548.728 78.7285 547.635 78.7285 cv
426.876 78.7285 li
426.876 78.7285 li
cp
426.876 124.218 mo
425.761 124.218 424.842 123.35 424.842 122.224 cv
424.842 121.098 425.761 120.229 426.876 120.229 cv
547.635 120.229 li
548.729 120.229 549.628 121.13 549.628 122.224 cv
549.628 123.317 548.728 124.218 547.635 124.218 cv
426.876 124.218 li
426.876 124.218 li
cp
f
541.504 38.6719 mo
540.987 39.0254 540.607 39.4873 540.362 40.0576 cv
540.2 40.4375 540.118 40.8452 540.118 41.2798 cv
540.118 41.769 540.214 42.2173 540.403 42.6245 cv
540.567 43.0869 540.852 43.5889 541.259 44.1323 cv
541.585 44.5942 542.021 45.0898 542.563 45.6196 cv
543.106 46.1494 543.786 46.7676 544.601 47.4736 cv
544.954 47.7725 545.341 48.1055 545.762 48.4717 cv
546.183 48.8389 546.598 49.2397 547.005 49.6743 cv
547.439 50.1089 547.813 50.5229 548.126 50.917 cv
548.438 51.3105 548.729 51.6982 549.002 52.0781 cv
549.437 52.7305 549.749 53.3418 549.938 53.9121 cv
550.319 54.8901 550.51 55.8408 550.51 56.7646 cv
550.51 58.2041 550.089 59.5352 549.246 60.7578 cv
548.458 61.8984 547.413 62.7681 546.108 63.3657 cv
545.185 63.7461 544.261 63.9365 543.337 63.9365 cv
541.87 63.9365 540.526 63.5156 539.304 62.6733 cv
538.136 61.8857 537.266 60.8398 536.695 59.5352 cv
536.343 58.666 536.165 57.7427 536.165 56.7646 cv
536.165 56.1943 536.362 55.7119 536.757 55.3179 cv
537.151 54.9238 537.619 54.7271 538.163 54.7271 cv
538.706 54.7271 539.175 54.9238 539.568 55.3179 cv
539.962 55.7119 540.159 56.1943 540.159 56.7646 cv
540.159 57.3623 540.335 57.9463 540.688 58.5166 cv
541.069 59.0332 541.531 59.4131 542.074 59.6572 cv
542.481 59.8208 542.903 59.9023 543.337 59.9023 cv
543.989 59.9023 544.573 59.7256 545.09 59.3726 cv
545.606 58.9922 545.986 58.5303 546.23 57.9873 cv
546.394 57.5791 546.476 57.1582 546.476 56.7236 cv
546.476 56.2349 546.38 55.7866 546.19 55.3789 cv
546.027 54.917 545.755 54.4277 545.375 53.9121 cv
545.021 53.4502 544.58 52.9478 544.05 52.4043 cv
543.521 51.8613 542.835 51.2363 541.993 50.5303 cv
541.477 50.0684 540.954 49.5996 540.424 49.124 cv
539.895 48.6484 539.398 48.1396 538.937 47.5957 cv
537.878 46.4551 537.116 45.3008 536.654 44.1323 cv
536.274 43.1543 536.084 42.2036 536.084 41.2798 cv
536.084 40.5469 536.192 39.8403 536.41 39.1611 cv
536.628 38.4814 536.927 37.8438 537.307 37.2461 cv
538.176 36.0508 539.235 35.1948 540.485 34.6787 cv
541.327 34.2983 542.251 34.1084 543.256 34.1084 cv
544.75 34.1084 546.095 34.5156 547.29 35.3306 cv
548.431 36.1187 549.301 37.1641 549.898 38.4688 cv
550.251 39.3379 550.428 40.2744 550.428 41.2798 cv
550.428 41.8232 550.23 42.292 549.837 42.6855 cv
549.443 43.0796 548.975 43.2764 548.431 43.2764 cv
547.888 43.2764 547.419 43.0796 547.025 42.6855 cv
546.632 42.292 546.435 41.8232 546.435 41.2798 cv
546.435 40.6553 546.258 40.0576 545.905 39.4873 cv
545.524 38.9707 545.05 38.5908 544.479 38.3462 cv
544.098 38.1831 543.69 38.1016 543.256 38.1016 cv
542.632 38.1016 542.047 38.2915 541.504 38.6719 cv
541.504 38.6719 li
cp
523.004 40.0576 mo
522.813 40.4111 522.719 40.8184 522.719 41.2798 cv
522.719 56.7646 li
522.719 57.3896 522.909 57.9736 523.289 58.5166 cv
523.642 59.0332 524.104 59.4131 524.675 59.6572 cv
525.028 59.8208 525.436 59.9023 525.896 59.9023 cv
526.549 59.9023 527.133 59.7256 527.649 59.3726 cv
528.138 59.0737 528.519 58.6123 528.79 57.9873 cv
528.953 57.5791 529.034 57.1719 529.034 56.7646 cv
529.034 56.2212 529.231 55.7529 529.626 55.3589 cv
530.02 54.9648 530.502 54.7681 531.072 54.7681 cv
531.615 54.7681 532.084 54.9648 532.478 55.3589 cv
532.872 55.7529 533.068 56.2212 533.068 56.7646 cv
533.068 57.4712 532.96 58.1636 532.743 58.8428 cv
532.525 59.522 532.227 60.1602 531.847 60.7578 cv
531.059 61.9531 529.999 62.8228 528.668 63.3657 cv
527.771 63.7461 526.848 63.9365 525.896 63.9365 cv
524.484 63.9365 523.14 63.5288 521.862 62.7139 cv
520.694 61.9258 519.839 60.8667 519.296 59.5352 cv
518.915 58.6396 518.726 57.7153 518.726 56.7646 cv
518.726 41.2798 li
518.726 39.7861 519.133 38.4414 519.948 37.2461 cv
520.735 36.0781 521.781 35.2222 523.085 34.6787 cv
523.928 34.2983 524.864 34.1084 525.896 34.1084 cv
527.364 34.1084 528.694 34.5156 529.89 35.3306 cv
531.085 36.1187 531.955 37.1641 532.499 38.4688 cv
532.879 39.3921 533.068 40.3291 533.068 41.2798 cv
533.068 41.8232 532.872 42.292 532.478 42.6855 cv
532.084 43.0796 531.615 43.2764 531.072 43.2764 cv
530.502 43.2764 530.02 43.0796 529.626 42.6855 cv
529.231 42.292 529.034 41.8232 529.034 41.2798 cv
529.034 40.6011 528.858 40.0029 528.505 39.4873 cv
528.151 38.9707 527.69 38.5908 527.12 38.3462 cv
526.739 38.1831 526.331 38.1016 525.896 38.1016 cv
525.3 38.1016 524.716 38.2783 524.145 38.6309 cv
523.574 39.0117 523.194 39.4873 523.004 40.0576 cv
523.004 40.0576 li
cp
503.444 48.248 mo
503.444 48.4385 503.513 48.6011 503.648 48.7373 cv
503.784 48.873 503.96 48.9404 504.178 48.9404 cv
506.012 48.9404 li
507.099 48.9404 508.117 48.6284 509.067 48.0034 cv
509.964 47.4063 510.616 46.6182 511.024 45.6401 cv
511.296 45.0156 511.431 44.3086 511.431 43.5215 cv
511.431 42.4346 511.119 41.4292 510.494 40.5059 cv
509.924 39.6367 509.136 38.9844 508.131 38.5498 cv
507.451 38.251 506.745 38.1016 506.012 38.1016 cv
504.178 38.1016 li
503.96 38.1016 503.784 38.1694 503.648 38.3052 cv
503.513 38.4414 503.444 38.6182 503.444 38.835 cv
503.444 48.248 li
503.444 48.248 li
cp
503.444 61.8984 mo
503.444 62.4697 503.247 62.9517 502.854 63.3457 cv
502.46 63.7393 501.991 63.9365 501.448 63.9365 cv
500.905 63.9365 500.437 63.7393 500.042 63.3457 cv
499.648 62.9517 499.451 62.4697 499.451 61.8984 cv
499.451 36.105 li
499.451 35.5342 499.642 35.0591 500.021 34.6787 cv
500.401 34.2983 500.877 34.1084 501.448 34.1084 cv
506.012 34.1084 li
507.94 34.1084 509.706 34.6377 511.309 35.6978 cv
512.83 36.7295 513.972 38.1152 514.731 39.8535 cv
515.221 41.0493 515.466 42.2715 515.466 43.5215 cv
515.466 45.4229 514.922 47.1885 513.836 48.8184 cv
512.776 50.3672 511.391 51.4946 509.679 52.2007 cv
508.565 52.7168 507.343 52.9746 506.012 52.9746 cv
504.178 52.9746 li
503.987 52.9746 503.825 53.043 503.688 53.1787 cv
503.525 53.3145 503.444 53.4775 503.444 53.668 cv
503.444 61.8984 li
503.444 61.8984 li
cp
.85098 .682353 0 rgb
f
440.147 21.0835 mo
471.314 21.0835 li
479.733 21.0835 486.62 27.9707 486.62 36.3892 cv
486.62 48.6309 li
486.62 57.0488 479.733 63.9365 471.314 63.9365 cv
440.147 63.9365 li
431.729 63.9365 424.843 57.0488 424.843 48.6309 cv
424.843 36.3892 li
424.843 27.9707 431.729 21.0835 440.147 21.0835 cv
440.147 21.0835 li
cp
1 .8 0 rgb
f
458.421 36.7598 mo
457.298 36.7598 456.425 35.8911 456.425 34.7637 cv
456.425 30.7983 459.616 27.5962 463.593 27.5962 cv
467.557 27.5962 470.761 30.7949 470.761 34.7637 cv
470.761 35.8496 470.525 36.9473 469.987 38.022 cv
462.819 52.3169 li
462.569 52.8159 462.925 53.3755 463.471 53.3755 cv
468.724 53.3755 li
469.819 53.3755 470.72 54.2764 470.72 55.3711 cv
470.72 56.4658 469.818 57.3667 468.724 57.3667 cv
459.032 57.3667 li
457.455 57.3667 456.567 55.8135 457.239 54.4751 cv
466.403 36.23 li
466.654 35.7295 466.729 35.2256 466.729 34.7637 cv
466.729 33.0239 465.345 31.5869 463.593 31.5869 cv
461.874 31.5869 460.417 33.0459 460.417 34.7637 cv
460.417 35.4365 460.254 35.8818 459.644 36.3521 cv
459.271 36.6377 458.888 36.7598 458.421 36.7598 cv
458.421 36.7598 li
cp
441.397 36.5967 mo
440.538 35.7974 440.437 34.6592 441.193 33.7861 cv
445.958 28.2886 li
446.361 27.8232 446.882 27.5962 447.507 27.5962 cv
447.995 27.5962 448.446 27.7412 448.81 28.085 cv
449.432 28.6724 449.502 29.1235 449.502 29.9175 cv
449.502 52.6836 li
449.502 53.0654 449.812 53.3755 450.194 53.3755 cv
451.253 53.3755 li
452.38 53.3755 453.249 54.2949 453.249 55.4121 cv
453.249 56.5068 452.348 57.4072 451.253 57.4072 cv
443.719 57.4072 li
442.625 57.4072 441.724 56.5068 441.724 55.4121 cv
441.724 54.2949 442.593 53.3755 443.719 53.3755 cv
444.778 53.3755 li
445.161 53.3755 445.47 53.0659 445.47 52.6836 cv
445.47 36.8818 li
445.47 36.1934 444.646 35.8994 444.208 36.3926 cv
443.49 37.2012 442.194 37.3359 441.397 36.5967 cv
441.397 36.5967 li
cp
.858824 .184314 .0352941 rgb
ef
179.28 50.042 mo
179.046 50.042 178.887 50.2012 178.887 50.4365 cv
178.887 54.4404 li
178.887 54.6787 179.05 54.8125 179.28 54.8125 cv
182.147 54.8125 li
182.752 54.8125 183.219 55.3062 183.219 55.9063 cv
183.219 56.4946 182.735 56.9785 182.147 56.9785 cv
179.28 56.9785 li
179.046 56.9785 178.887 57.1377 178.887 57.3721 cv
178.887 61.377 li
178.887 61.5996 179.063 61.7485 179.28 61.7485 cv
183.241 61.7485 li
183.83 61.7485 184.313 62.2324 184.313 62.8208 cv
184.313 63.4209 183.847 63.915 183.241 63.915 cv
177.814 63.915 li
177.209 63.915 176.742 63.4209 176.742 62.8208 cv
176.742 48.9697 li
176.742 48.3818 177.227 47.8975 177.814 47.8975 cv
183.241 47.8975 li
183.83 47.8975 184.313 48.3818 184.313 48.9697 cv
184.313 49.5581 183.83 50.042 183.241 50.042 cv
179.28 50.042 li
179.28 50.042 li
cp
169.372 61.377 mo
169.372 61.5991 169.549 61.7485 169.766 61.7485 cv
170.969 61.7485 li
172.296 61.7485 173.354 60.6855 173.354 59.3633 cv
173.354 52.4268 li
173.354 51.1211 172.271 50.042 170.969 50.042 cv
169.766 50.042 li
169.531 50.042 169.372 50.2012 169.372 50.4365 cv
169.372 61.377 li
169.372 61.377 li
cp
168.3 63.915 mo
167.711 63.915 167.206 63.4092 167.206 62.8208 cv
167.206 48.9697 li
167.206 48.3652 167.699 47.8975 168.3 47.8975 cv
170.969 47.8975 li
173.489 47.8975 175.499 49.9189 175.499 52.4268 cv
175.499 59.3633 li
175.499 61.8555 173.466 63.915 170.969 63.915 cv
168.3 63.915 li
168.3 63.915 li
cp
156.947 63.9365 mo
156.356 63.9365 155.875 63.4277 155.875 62.8428 cv
155.875 50.4141 li
155.875 50.1797 155.715 50.0205 155.481 50.0205 cv
153.446 50.0205 li
152.858 50.0205 152.374 49.5361 152.374 48.9482 cv
152.374 48.3599 152.858 47.876 153.446 47.876 cv
160.426 47.876 li
161.015 47.876 161.499 48.3599 161.499 48.9482 cv
161.499 49.5361 161.015 50.0205 160.426 50.0205 cv
158.414 50.0205 li
158.176 50.0205 158.041 50.1836 158.041 50.4141 cv
158.041 62.8428 li
158.041 63.4307 157.536 63.9365 156.947 63.9365 cv
156.947 63.9365 li
cp
147.917 56.4756 mo
147.876 56.6982 148.051 56.9126 148.289 56.9126 cv
150.39 56.9126 li
150.632 56.9126 150.828 56.7163 150.783 56.4756 cv
150.435 54.6152 150.147 52.5938 149.733 50.7642 cv
149.641 50.3584 149.044 50.3418 148.967 50.7642 cv
147.917 56.4756 li
147.917 56.4756 li
cp
144.591 62.668 mo
146.932 49.9326 li
147.145 48.7778 148.163 47.9199 149.339 47.9199 cv
150.528 47.9199 151.552 48.7612 151.768 49.9326 cv
154.109 62.668 li
154.229 63.3125 153.711 63.9365 153.059 63.9365 cv
152.536 63.9365 152.082 63.5527 151.987 63.0396 cv
151.309 59.3853 li
151.271 59.1826 151.155 59.0791 150.937 59.0791 cv
147.764 59.0791 li
147.545 59.0791 147.406 59.1802 147.37 59.3853 cv
146.714 63.0396 li
146.62 63.5596 146.18 63.9365 145.641 63.9365 cv
144.996 63.9365 144.471 63.3188 144.591 62.668 cv
144.591 62.668 li
cp
139.275 47.9199 mo
139.566 47.9199 139.818 48.0254 140.03 48.2368 cv
140.241 48.4482 140.347 48.7002 140.347 48.9922 cv
140.347 61.3984 li
140.347 61.5005 140.383 61.5879 140.456 61.6611 cv
140.529 61.7339 140.625 61.7705 140.741 61.7705 cv
143.454 61.7705 li
144.042 61.7705 144.526 62.2544 144.526 62.8428 cv
144.526 63.4429 144.06 63.9365 143.454 63.9365 cv
139.275 63.9365 li
138.983 63.9365 138.728 63.8311 138.509 63.6196 cv
138.29 63.4082 138.181 63.1489 138.181 62.8428 cv
138.181 48.9922 li
138.181 48.7002 138.29 48.4482 138.509 48.2368 cv
138.728 48.0254 138.983 47.9199 139.275 47.9199 cv
139.275 47.9199 li
cp
132.539 50.042 mo
132.422 50.042 132.332 50.0786 132.266 50.1514 cv
132.2 50.2246 132.167 50.3193 132.167 50.4365 cv
132.167 54.4404 li
132.167 54.6885 132.292 54.8125 132.539 54.8125 cv
135.405 54.8125 li
135.697 54.8125 135.949 54.918 136.16 55.1294 cv
136.372 55.3408 136.478 55.5996 136.478 55.9063 cv
136.478 56.1982 136.372 56.4492 136.16 56.6611 cv
135.949 56.873 135.697 56.9785 135.405 56.9785 cv
132.539 56.9785 li
132.422 56.9785 132.332 57.0146 132.266 57.0879 cv
132.2 57.1606 132.167 57.2559 132.167 57.3721 cv
132.167 62.8208 li
132.167 63.127 132.058 63.3857 131.839 63.5977 cv
131.62 63.8091 131.365 63.915 131.073 63.915 cv
130.781 63.915 130.53 63.8091 130.318 63.5977 cv
130.107 63.3857 130.001 63.127 130.001 62.8208 cv
130.001 48.9697 li
130.001 48.6782 130.107 48.4268 130.318 48.2153 cv
130.53 48.0034 130.781 47.8975 131.073 47.8975 cv
136.5 47.8975 li
136.792 47.8975 137.043 48.0034 137.255 48.2153 cv
137.466 48.4268 137.572 48.6782 137.572 48.9697 cv
137.572 49.2617 137.466 49.5137 137.255 49.7246 cv
137.043 49.9365 136.792 50.042 136.5 50.042 cv
132.539 50.042 li
132.539 50.042 li
cp
109.721 49.3203 mo
109.621 48.5342 109.835 47.8101 110.771 47.8101 cv
111.351 47.8101 111.771 48.3105 111.843 48.8823 cv
113.419 61.311 li
113.484 61.8252 113.904 61.9785 114.053 61.5298 cv
115.892 51.5742 li
115.979 51.0469 116.412 50.6982 116.941 50.6982 cv
117.462 50.6982 117.919 51.0581 118.014 51.5742 cv
119.83 61.5078 li
119.9 61.8945 120.376 61.8936 120.443 61.377 cv
121.996 49.2764 li
122.09 48.5469 122.175 47.8101 123.134 47.8101 cv
124.077 47.8101 124.255 48.5381 124.162 49.2656 cv
122.586 61.5952 li
122.422 62.8828 121.398 63.9365 120.136 63.9365 cv
118.918 63.9365 117.943 63.084 117.708 61.9014 cv
117.16 58.9478 li
117.16 58.6846 116.784 58.6709 116.723 58.9478 cv
116.176 61.9014 li
115.939 63.084 114.965 63.9365 113.747 63.9365 cv
112.49 63.9365 111.461 62.8843 111.296 61.5952 cv
109.721 49.3203 li
109.721 49.3203 li
cp
102.679 59.6919 mo
102.679 60.8564 103.578 61.7485 104.736 61.7485 cv
105.9 61.7485 106.792 60.8496 106.792 59.6919 cv
106.792 52.0986 li
106.792 50.9707 105.864 50.042 104.736 50.042 cv
103.572 50.042 102.679 50.958 102.679 52.0986 cv
102.679 59.6919 li
102.679 59.6919 li
cp
100.513 59.6919 mo
100.513 52.0986 li
100.513 49.7715 102.389 47.8975 104.736 47.8975 cv
107.045 47.8975 108.959 49.7837 108.959 52.0986 cv
108.959 59.6919 li
108.959 62.0283 107.058 63.915 104.736 63.915 cv
102.399 63.915 100.513 62.0142 100.513 59.6919 cv
100.513 59.6919 li
cp
93.2295 61.377 mo
93.2295 61.5991 93.4067 61.7485 93.6235 61.7485 cv
94.8271 61.7485 li
96.1533 61.7485 97.2124 60.6855 97.2124 59.3633 cv
97.2124 52.4268 li
97.2124 51.1211 96.1279 50.042 94.8271 50.042 cv
93.6235 50.042 li
93.3887 50.042 93.2295 50.2012 93.2295 50.4365 cv
93.2295 61.377 li
93.2295 61.377 li
cp
92.1572 63.915 mo
91.5688 63.915 91.0635 63.4092 91.0635 62.8208 cv
91.0635 48.9697 li
91.0635 48.3652 91.5562 47.8975 92.1572 47.8975 cv
94.8271 47.8975 li
97.3462 47.8975 99.3564 49.9189 99.3564 52.4268 cv
99.3564 59.3633 li
99.3564 61.8555 97.3237 63.915 94.8271 63.915 cv
92.1572 63.915 li
92.1572 63.915 li
cp
84.2178 56.4756 mo
84.186 56.7036 84.3491 56.9126 84.5903 56.9126 cv
86.6904 56.9126 li
86.9316 56.9126 87.1196 56.7202 87.0845 56.4756 cv
86.7158 54.582 86.3711 52.6646 86.0342 50.7642 cv
85.9756 50.5601 85.8447 50.458 85.6406 50.458 cv
85.4365 50.458 85.3125 50.5601 85.2681 50.7642 cv
84.9326 52.6704 84.5435 54.5684 84.2178 56.4756 cv
84.2178 56.4756 li
cp
80.8926 62.668 mo
81.6714 58.4219 82.4473 54.1768 83.2334 49.9326 cv
83.4492 48.769 84.4487 47.9199 85.6406 47.9199 cv
86.8447 47.9199 87.854 48.752 88.0693 49.9326 cv
88.8438 54.1787 89.6104 58.4263 90.4106 62.668 cv
90.5488 63.2207 90.1152 63.8311 89.5571 63.915 cv
89.5137 63.9292 89.4478 63.9365 89.3604 63.9365 cv
88.8218 63.9365 88.4028 63.5557 88.2881 63.0396 cv
87.6099 59.3853 li
87.5806 59.1816 87.457 59.0791 87.2378 59.0791 cv
84.0649 59.0791 li
83.8462 59.0791 83.7148 59.1816 83.6714 59.3853 cv
83.0151 63.0396 li
82.8999 63.5557 82.481 63.9365 81.9424 63.9365 cv
81.3018 63.9365 80.7314 63.3125 80.8926 62.668 cv
80.8926 62.668 li
cp
73.1499 47.8975 mo
73.7378 47.8975 74.2227 48.3818 74.2227 48.9697 cv
74.2227 54.418 li
74.2227 54.6348 74.3716 54.8125 74.5942 54.8125 cv
77.7231 54.8125 li
77.9458 54.8125 78.0952 54.6353 78.0952 54.418 cv
78.0952 48.9697 li
78.0952 48.3818 78.5791 47.8975 79.167 47.8975 cv
79.7676 47.8975 80.2617 48.3652 80.2617 48.9697 cv
80.2617 62.8208 li
80.2617 63.4375 79.7847 63.915 79.167 63.915 cv
78.562 63.915 78.0952 63.4209 78.0952 62.8208 cv
78.0952 57.3506 li
78.0952 57.1338 77.9458 56.9565 77.7231 56.9565 cv
74.5942 56.9565 li
74.3716 56.9565 74.2227 57.1338 74.2227 57.3506 cv
74.2227 62.8208 li
74.2227 63.4209 73.7554 63.915 73.1499 63.915 cv
72.5332 63.915 72.0562 63.4375 72.0562 62.8208 cv
72.0562 48.9697 li
72.0562 48.3652 72.5498 47.8975 73.1499 47.8975 cv
73.1499 47.8975 li
cp
65.3638 51.7705 mo
65.3638 53.0605 66.8872 54.3311 67.771 55.0967 cv
69.2729 56.3696 70.9434 57.958 70.9434 60.0854 cv
70.9434 62.1704 69.1733 63.9365 67.0923 63.9365 cv
64.9629 63.9365 63.2412 62.2119 63.2412 60.0854 cv
63.2412 59.4854 63.708 58.9917 64.3135 58.9917 cv
64.9185 58.9917 65.3857 59.4854 65.3857 60.0854 cv
65.3857 61.0288 66.1582 61.7705 67.0923 61.7705 cv
68.0405 61.7705 68.7773 61.0005 68.7773 60.0635 cv
68.7773 58.5513 66.5562 56.9048 65.5278 55.9829 cv
64.333 54.9092 63.1978 53.4473 63.1978 51.7705 cv
63.1978 49.6567 64.9214 47.9199 67.0488 47.9199 cv
69.2036 47.9199 70.8999 49.625 70.8999 51.7705 cv
70.8999 52.3589 70.416 52.8428 69.8281 52.8428 cv
69.2397 52.8428 68.7554 52.3589 68.7554 51.7705 cv
68.7554 50.8203 67.9927 50.064 67.0488 50.064 cv
66.1274 50.064 65.3638 50.8599 65.3638 51.7705 cv
65.3638 51.7705 li
cp
50.9697 52.0986 mo
50.9697 59.6919 li
50.9697 60.8496 51.9014 61.7485 53.0483 61.7485 cv
54.1699 61.7485 55.1055 60.8145 55.1055 59.6919 cv
55.1055 58.4004 li
55.1055 58.1777 54.9282 58.0283 54.7114 58.0283 cv
53.7705 58.0283 li
53.1655 58.0283 52.6982 57.5352 52.6982 56.9346 cv
52.6982 56.3467 53.1821 55.8623 53.7705 55.8623 cv
56.1777 55.8623 li
56.771 55.8623 57.2495 56.3418 57.2495 56.9346 cv
57.2495 59.6919 li
57.2495 62.021 55.375 63.915 53.0483 63.915 cv
50.7119 63.915 48.8252 62.0137 48.8252 59.6919 cv
48.8252 52.0986 li
48.8252 49.751 50.7056 47.8975 53.0483 47.8975 cv
55.3652 47.8975 57.2495 49.792 57.2495 52.0986 cv
57.2495 52.6846 56.769 53.1934 56.1777 53.1934 cv
55.5859 53.1934 55.1055 52.6846 55.1055 52.0986 cv
55.1055 50.9966 54.1455 50.042 53.0483 50.042 cv
51.9282 50.042 50.9697 50.959 50.9697 52.0986 cv
50.9697 52.0986 li
cp
41.0615 62.8208 mo
41.0615 63.4209 40.5947 63.915 39.9893 63.915 cv
39.3838 63.915 38.917 63.4209 38.917 62.8208 cv
38.917 48.9697 li
38.917 47.8291 40.418 47.48 40.9736 48.5107 cv
44.9565 57.0439 li
45.0796 57.291 45.416 57.1836 45.416 56.9565 cv
45.416 48.9697 li
45.416 48.3818 45.8999 47.8975 46.4878 47.8975 cv
47.0762 47.8975 47.5596 48.3818 47.5596 48.9697 cv
47.5596 62.8208 li
47.5596 64.0254 45.9468 64.3149 45.5029 63.2803 cv
41.4985 54.7466 li
41.4326 54.5479 41.0615 54.5562 41.0615 54.8555 cv
41.0615 62.8208 li
41.0615 62.8208 li
cp
31.3062 59.6919 mo
31.3062 60.8564 32.2051 61.7485 33.3628 61.7485 cv
34.5278 61.7485 35.4199 60.8496 35.4199 59.6919 cv
35.4199 52.0986 li
35.4199 50.9707 34.4907 50.042 33.3628 50.042 cv
32.1992 50.042 31.3062 50.958 31.3062 52.0986 cv
31.3062 59.6919 li
31.3062 59.6919 li
cp
29.1396 59.6919 mo
29.1396 52.0986 li
29.1396 49.7715 31.0161 47.8975 33.3628 47.8975 cv
35.6729 47.8975 37.5859 49.7837 37.5859 52.0986 cv
37.5859 59.6919 li
37.5859 62.0283 35.6851 63.915 33.3628 63.915 cv
31.0415 63.915 29.1396 62.0298 29.1396 59.6919 cv
29.1396 59.6919 li
cp
209.046 62.8208 mo
209.046 63.4209 208.58 63.915 207.974 63.915 cv
207.369 63.915 206.902 63.4209 206.902 62.8208 cv
206.902 48.9697 li
206.902 48.3662 207.373 47.8975 207.974 47.8975 cv
208.397 47.8975 208.76 48.1426 208.959 48.5107 cv
212.941 57.0439 li
213.064 57.291 213.4 57.1836 213.4 56.9565 cv
213.4 48.9697 li
213.4 48.3818 213.885 47.8975 214.473 47.8975 cv
215.061 47.8975 215.545 48.3818 215.545 48.9697 cv
215.545 62.8208 li
215.545 63.4287 215.155 63.8071 214.582 63.9038 cv
214.132 63.9795 213.664 63.6904 213.488 63.2803 cv
209.484 54.7466 li
209.417 54.5488 209.046 54.5518 209.046 54.8555 cv
209.046 62.8208 li
209.046 62.8208 li
cp
199.356 52.0986 mo
199.356 59.6919 li
199.356 60.8496 200.288 61.7485 201.435 61.7485 cv
202.562 61.7485 203.492 60.8105 203.492 59.6919 cv
203.492 58.4004 li
203.492 58.1777 203.315 58.0283 203.098 58.0283 cv
202.157 58.0283 li
201.552 58.0283 201.085 57.5352 201.085 56.9346 cv
201.085 56.3467 201.569 55.8623 202.157 55.8623 cv
204.564 55.8623 li
205.158 55.8623 205.636 56.3418 205.636 56.9346 cv
205.636 59.6919 li
205.636 62.021 203.762 63.915 201.435 63.915 cv
199.099 63.915 197.212 62.0137 197.212 59.6919 cv
197.212 52.0986 li
197.212 49.7656 199.086 47.8975 201.435 47.8975 cv
203.752 47.8975 205.636 49.792 205.636 52.0986 cv
205.636 52.6846 205.156 53.1934 204.564 53.1934 cv
203.973 53.1934 203.492 52.6846 203.492 52.0986 cv
203.492 50.9966 202.532 50.042 201.435 50.042 cv
200.314 50.042 199.356 50.959 199.356 52.0986 cv
199.356 52.0986 li
cp
195.947 62.8428 mo
195.947 63.4429 195.48 63.9365 194.875 63.9365 cv
194.269 63.9365 193.803 63.4429 193.803 62.8428 cv
193.803 48.9922 li
193.803 48.4038 194.286 47.9199 194.875 47.9199 cv
195.463 47.9199 195.947 48.4038 195.947 48.9922 cv
195.947 62.8428 li
195.947 62.8428 li
cp
187.11 51.7705 mo
187.11 53.0605 188.634 54.3311 189.518 55.0967 cv
191.02 56.3696 192.69 57.958 192.69 60.0854 cv
192.69 62.1704 190.92 63.9365 188.839 63.9365 cv
186.709 63.9365 184.988 62.2119 184.988 60.0854 cv
184.988 59.4854 185.455 58.9917 186.06 58.9917 cv
186.665 58.9917 187.132 59.4854 187.132 60.0854 cv
187.132 61.0288 187.904 61.7705 188.839 61.7705 cv
189.787 61.7705 190.523 61.0005 190.523 60.0635 cv
190.523 58.7959 189 57.4775 188.117 56.7378 cv
186.641 55.416 184.944 53.9326 184.944 51.7705 cv
184.944 49.6567 186.668 47.9199 188.795 47.9199 cv
190.95 47.9199 192.646 49.625 192.646 51.7705 cv
192.646 52.3589 192.163 52.8428 191.574 52.8428 cv
190.986 52.8428 190.502 52.3589 190.502 51.7705 cv
190.502 50.8203 189.739 50.064 188.795 50.064 cv
187.874 50.064 187.11 50.8599 187.11 51.7705 cv
187.11 51.7705 li
cp
24.1763 47.9199 mo
24.7646 47.9199 25.249 48.4038 25.249 48.9922 cv
25.249 61.3984 li
25.249 61.6211 25.4258 61.7705 25.6426 61.7705 cv
28.3555 61.7705 li
28.9438 61.7705 29.4277 62.2544 29.4277 62.8428 cv
29.4277 63.4429 28.9614 63.9365 28.3555 63.9365 cv
24.1763 63.9365 li
23.5742 63.9365 23.0825 63.4463 23.0825 62.8428 cv
23.0825 48.9922 li
23.0825 48.4009 23.5913 47.9199 24.1763 47.9199 cv
24.1763 47.9199 li
cp
1 .8 0 rgb
f
426.876 78.7285 mo
425.761 78.7285 424.842 77.8604 424.842 76.7344 cv
424.842 75.6084 425.761 74.7402 426.876 74.7402 cv
547.635 74.7402 li
548.729 74.7402 549.628 75.6406 549.628 76.7344 cv
549.628 77.8281 548.728 78.7285 547.635 78.7285 cv
426.876 78.7285 li
426.876 78.7285 li
cp
426.876 124.218 mo
425.761 124.218 424.842 123.35 424.842 122.224 cv
424.842 121.098 425.761 120.229 426.876 120.229 cv
547.635 120.229 li
548.729 120.229 549.628 121.13 549.628 122.224 cv
549.628 123.317 548.728 124.218 547.635 124.218 cv
426.876 124.218 li
426.876 124.218 li
cp
.85098 .682353 0 rgb
f
45.4668 75.916 mo
53.8706 84.3198 li
53.8706 80.7764 li
71.6274 78.7441 li
82.0859 89.2021 li
90.562 79.1948 li
104.735 79.1948 li
115.031 89.4897 li
119.289 79.5127 li
137.005 79.5127 li
199.225 141.732 li
42.4165 141.732 li
24.269 123.585 li
24.269 77.5215 li
45.4668 75.916 li
45.4668 75.916 li
cp
.701961 .145098 .0235294 rgb
ef
121.713 116.528 mo
121.713 117.215 122.26 117.676 122.929 117.676 cv
126.642 117.676 li
130.736 117.676 134 114.396 134 110.317 cv
134 88.917 li
134 84.8872 130.656 81.5586 126.642 81.5586 cv
122.929 81.5586 li
122.205 81.5586 121.713 82.0498 121.713 82.7734 cv
121.713 116.528 li
121.713 116.528 li
cp
118.406 124.359 mo
116.591 124.359 115.031 122.799 115.031 120.984 cv
115.031 78.25 li
115.031 76.3843 116.552 74.9424 118.406 74.9424 cv
126.642 74.9424 li
134.415 74.9424 140.617 81.1787 140.617 88.917 cv
140.617 110.317 li
140.617 118.006 134.344 124.359 126.642 124.359 cv
118.406 124.359 li
118.406 124.359 li
cp
88.769 111.33 mo
88.769 114.924 91.543 117.676 95.1152 117.676 cv
98.709 117.676 101.461 114.902 101.461 111.33 cv
101.461 87.9043 li
101.461 84.4233 98.5957 81.5586 95.1152 81.5586 cv
91.5254 81.5586 88.769 84.3848 88.769 87.9043 cv
88.769 111.33 li
88.769 111.33 li
cp
82.0859 111.33 mo
82.0859 87.9043 li
82.0859 80.7236 87.875 74.9424 95.1152 74.9424 cv
102.241 74.9424 108.145 80.7603 108.145 87.9043 cv
108.145 111.33 li
108.145 118.539 102.281 124.359 95.1152 124.359 cv
87.9063 124.359 82.0859 118.495 82.0859 111.33 cv
82.0859 111.33 li
cp
56.0942 111.33 mo
56.0942 114.924 58.8682 117.676 62.4404 117.676 cv
66.0347 117.676 68.7866 114.902 68.7866 111.33 cv
68.7866 87.9043 li
68.7866 84.4233 65.9214 81.5586 62.4404 81.5586 cv
58.8506 81.5586 56.0942 84.3848 56.0942 87.9043 cv
56.0942 111.33 li
56.0942 111.33 li
cp
49.4111 111.33 mo
49.4111 87.9043 li
49.4111 80.7236 55.2002 74.9424 62.4404 74.9424 cv
69.5669 74.9424 75.4697 80.7603 75.4697 87.9043 cv
75.4697 111.33 li
75.4697 118.5 69.6367 124.359 62.4404 124.359 cv
55.2119 124.359 49.4111 118.479 49.4111 111.33 cv
49.4111 111.33 li
cp
30.9131 81.5586 mo
30.1792 81.5586 29.7656 82.063 29.7656 82.7734 cv
29.7656 95.1279 li
29.7656 95.8926 30.1484 96.2754 30.9131 96.2754 cv
39.7568 96.2754 li
41.625 96.2754 43.0649 97.7988 43.0649 99.6509 cv
43.0649 101.466 41.5718 102.959 39.7568 102.959 cv
30.9131 102.959 li
30.1792 102.959 29.7656 103.463 29.7656 104.174 cv
29.7656 120.984 li
29.7656 122.848 28.249 124.359 26.3901 124.359 cv
24.5225 124.359 23.082 122.836 23.082 120.984 cv
23.082 78.25 li
23.082 76.4355 24.5757 74.9424 26.3901 74.9424 cv
43.1328 74.9424 li
44.9468 74.9424 46.4404 76.436 46.4404 78.25 cv
46.4404 80.0649 44.9473 81.5586 43.1328 81.5586 cv
30.9131 81.5586 li
30.9131 81.5586 li
cp
.866667 .796078 .647059 rgb
ef
86.1846 24.978 mo
86.1846 26.2744 87.7061 27.5498 88.5923 28.3223 cv
90.1079 29.6094 91.7661 31.1978 91.7661 33.3384 cv
91.7661 35.4268 90.0024 37.2109 87.9136 37.2109 cv
85.7749 37.2109 84.061 35.4678 84.061 33.3384 cv
84.061 32.7373 84.5264 32.2383 85.1343 32.2383 cv
85.7417 32.2383 86.2065 32.7373 86.2065 33.3384 cv
86.2065 34.2832 86.9756 35.0327 87.9136 35.0327 cv
88.8652 35.0327 89.5991 34.2549 89.5991 33.3164 cv
89.5991 31.8135 87.4546 30.2109 86.3486 29.2129 cv
85.1504 28.1328 84.0176 26.6597 84.0176 24.978 cv
84.0176 22.8604 85.7339 21.1055 87.8701 21.1055 cv
90.0337 21.1055 91.7222 22.8286 91.7222 24.978 cv
91.7222 25.5669 91.2407 26.0557 90.6499 26.0557 cv
90.0586 26.0557 89.5776 25.5669 89.5776 24.978 cv
89.5776 24.0259 88.8179 23.2617 87.8701 23.2617 cv
86.9448 23.2617 86.1846 24.0654 86.1846 24.978 cv
86.1846 24.978 li
cp
77.4517 23.2397 mo
77.2163 23.2397 77.0576 23.4004 77.0576 23.6357 cv
77.0576 27.6621 li
77.0576 27.9004 77.2202 28.0361 77.4517 28.0361 cv
80.3188 28.0361 li
80.9268 28.0361 81.3916 28.5352 81.3916 29.1362 cv
81.3916 29.7251 80.9092 30.2144 80.3188 30.2144 cv
77.4517 30.2144 li
77.2158 30.2144 77.0576 30.375 77.0576 30.6104 cv
77.0576 34.6367 li
77.0576 34.8599 77.2339 35.0107 77.4517 35.0107 cv
81.4136 35.0107 li
82.0039 35.0107 82.4858 35.5 82.4858 36.0889 cv
82.4858 36.6904 82.0215 37.1885 81.4136 37.1885 cv
75.9849 37.1885 li
75.377 37.1885 74.9126 36.6904 74.9126 36.0889 cv
74.9126 22.1616 li
74.9126 21.5728 75.394 21.084 75.9849 21.084 cv
81.4136 21.084 li
82.0039 21.084 82.4858 21.5723 82.4858 22.1616 cv
82.4858 22.751 82.0039 23.2397 81.4136 23.2397 cv
77.4517 23.2397 li
77.4517 23.2397 li
cp
70.7754 25.6602 mo
70.7754 24.3311 69.7173 23.2617 68.3901 23.2617 cv
66.8799 23.2617 li
66.6445 23.2617 66.4858 23.4229 66.4858 23.6577 cv
66.4858 27.6841 li
66.4858 27.9072 66.6621 28.0576 66.8799 28.0576 cv
68.3242 28.0576 li
69.73 28.0576 70.7754 27.0718 70.7754 25.6602 cv
70.7754 25.6602 li
cp
71.4321 29.0703 mo
71.291 29.1982 71.2441 29.437 71.3667 29.5986 cv
71.7783 30.1377 72.0186 30.7363 72.1113 31.3799 cv
72.7676 35.957 li
72.8525 36.5488 72.4375 37.0903 71.8477 37.1885 cv
71.8169 37.1938 71.7681 37.2109 71.6948 37.2109 cv
71.1509 37.2109 70.6968 36.8003 70.6226 36.2646 cv
69.9883 31.6885 li
69.873 30.8599 69.1733 30.2363 68.3242 30.2363 cv
66.8799 30.2363 li
66.6445 30.2363 66.4858 30.3979 66.4858 30.6323 cv
66.4858 36.1104 li
66.4858 36.7114 66.0215 37.2109 65.4136 37.2109 cv
64.7935 37.2109 64.3188 36.729 64.3188 36.1104 cv
64.3188 22.1836 li
64.3188 21.5776 64.8096 21.1055 65.4136 21.1055 cv
68.3901 21.1055 li
70.9404 21.1055 72.9424 23.1479 72.9424 25.6602 cv
72.9424 26.9272 72.3765 28.2148 71.4321 29.0703 cv
71.4321 29.0703 li
cp
56.5708 29.7085 mo
56.5293 29.9351 56.7002 30.1484 56.9424 30.1484 cv
59.0439 30.1484 li
59.2861 30.1484 59.4819 29.9521 59.4375 29.7085 cv
58.3877 23.9658 li
58.3491 23.7559 58.1973 23.6577 57.9937 23.6577 cv
57.7891 23.6577 57.6587 23.7598 57.6211 23.9658 cv
56.5708 29.7085 li
56.5708 29.7085 li
cp
53.2437 35.9346 mo
55.5859 23.1299 li
55.7988 21.9629 56.7969 21.1055 57.9937 21.1055 cv
59.2021 21.1055 60.2061 21.9473 60.4229 23.1299 cv
62.7646 35.9346 li
62.8677 36.498 62.4688 37.1045 61.9111 37.1885 cv
61.3579 37.3755 60.7603 36.8457 60.6416 36.3086 cv
59.9634 32.6348 li
59.9341 32.4287 59.8101 32.3262 59.5908 32.3262 cv
56.4175 32.3262 li
56.1982 32.3262 56.0669 32.4287 56.0234 32.6348 cv
55.3667 36.3086 li
55.2529 36.8257 54.8345 37.2109 54.2939 37.2109 cv
53.6504 37.2109 53.124 36.5889 53.2437 35.9346 cv
53.2437 35.9346 li
cp
44.4448 21.1055 mo
45.0352 21.1055 45.5176 21.5947 45.5176 22.1836 cv
45.5176 32.9644 li
45.5176 34.1299 46.4292 35.0327 47.5747 35.0327 cv
48.7114 35.0327 49.6543 34.1064 49.6543 32.9644 cv
49.6543 22.1836 li
49.6543 21.5947 50.1357 21.1055 50.7266 21.1055 cv
51.3169 21.1055 51.7988 21.5947 51.7988 22.1836 cv
51.7988 32.9644 li
51.7988 35.311 49.917 37.2109 47.5747 37.2109 cv
45.2412 37.2109 43.3721 35.2734 43.3721 32.9644 cv
43.3721 22.1836 li
43.3721 21.5947 43.854 21.1055 44.4448 21.1055 cv
44.4448 21.1055 li
cp
39.0166 25.3516 mo
39.0166 24.1865 38.1045 23.2837 36.9595 23.2837 cv
35.8223 23.2837 34.8799 24.21 34.8799 25.3516 cv
34.8799 32.9863 li
34.9551 34.1108 35.7944 35.0547 36.9595 35.0547 cv
38.0664 35.0547 39.0166 34.0859 39.0166 32.9863 cv
39.0166 25.3516 li
39.0166 25.3516 li
cp
41.1616 32.9863 mo
41.1616 33.749 40.9795 34.4463 40.6147 35.0767 cv
40.5127 35.2524 40.5342 35.4141 40.6802 35.5605 cv
41.3809 36.2646 li
41.812 36.6992 41.7681 37.3594 41.3809 37.8047 cv
40.9478 38.2393 40.2925 38.1953 39.8486 37.8047 cv
39.0166 36.9688 li
38.9326 36.8633 38.7148 36.8232 38.6006 36.8809 cv
38.0752 37.1006 37.5283 37.2109 36.9595 37.2109 cv
34.6196 37.2109 32.7354 35.3174 32.7354 32.9863 cv
32.7354 25.3516 li
32.7354 23.0049 34.6167 21.1055 36.9595 21.1055 cv
39.2866 21.1055 41.1616 23.0327 41.1616 25.3516 cv
41.1616 32.9863 li
41.1616 32.9863 li
cp
25.249 24.978 mo
25.249 26.2744 26.771 27.5498 27.6572 28.3223 cv
29.1631 29.6035 30.8311 31.2041 30.8311 33.3384 cv
30.8311 35.4268 29.0674 37.2109 26.9785 37.2109 cv
24.8398 37.2109 23.126 35.4678 23.126 33.3384 cv
23.126 32.7373 23.5908 32.2383 24.1987 32.2383 cv
24.8062 32.2383 25.2715 32.7373 25.2715 33.3384 cv
25.2715 34.2832 26.04 35.0327 26.9785 35.0327 cv
27.9307 35.0327 28.6636 34.2554 28.6636 33.3164 cv
28.6636 32.042 27.1426 30.7197 26.2563 29.9722 cv
24.7754 28.6406 23.0825 27.1484 23.0825 24.978 cv
23.0825 22.8604 24.7979 21.1055 26.9346 21.1055 cv
29.0986 21.1055 30.7871 22.8281 30.7871 24.978 cv
30.7871 25.5674 30.3052 26.0557 29.7144 26.0557 cv
29.124 26.0557 28.6421 25.5669 28.6421 24.978 cv
28.6421 24.0259 27.8828 23.2617 26.9346 23.2617 cv
26.0088 23.2617 25.249 24.0649 25.249 24.978 cv
25.249 24.978 li
cp
ef
304.218 109.729 mo
304.218 110.144 304.547 110.422 304.95 110.422 cv
307.188 110.422 li
309.656 110.422 311.624 108.444 311.624 105.985 cv
311.624 93.085 li
311.624 90.6563 309.608 88.6494 307.188 88.6494 cv
304.95 88.6494 li
304.514 88.6494 304.218 88.9453 304.218 89.3818 cv
304.218 109.729 li
304.218 109.729 li
cp
302.224 114.45 mo
301.129 114.45 300.188 113.51 300.188 112.416 cv
300.188 86.6553 li
300.188 85.5303 301.105 84.6611 302.224 84.6611 cv
307.188 84.6611 li
311.874 84.6611 315.612 88.4209 315.612 93.085 cv
315.612 105.985 li
315.612 110.62 311.831 114.45 307.188 114.45 cv
302.224 114.45 li
302.224 114.45 li
cp
283.829 112.416 mo
283.829 113.531 282.961 114.45 281.835 114.45 cv
280.709 114.45 279.841 113.532 279.841 112.416 cv
279.841 86.6553 li
279.841 85.5317 280.718 84.6611 281.835 84.6611 cv
282.622 84.6611 283.298 85.1167 283.666 85.8008 cv
291.073 101.672 li
291.303 102.131 291.927 101.932 291.927 101.509 cv
291.927 86.6553 li
291.927 85.5615 292.827 84.6611 293.922 84.6611 cv
295.016 84.6611 295.916 85.5615 295.916 86.6553 cv
295.916 112.416 li
295.916 113.533 295.036 114.45 293.922 114.45 cv
293.127 114.45 292.405 114.006 292.091 113.27 cv
284.644 97.3989 li
284.52 97.0288 283.829 97.0444 283.829 97.6025 cv
283.829 112.416 li
283.829 112.416 li
cp
.431373 .160784 .0235294 rgb
ef
254.424 90.1631 mo
252.553 90.1631 251.102 88.7178 251.102 86.8408 cv
251.102 80.2407 256.413 74.9111 263.033 74.9111 cv
269.63 74.9111 274.963 80.2349 274.963 86.8408 cv
274.963 88.6494 274.572 90.4756 273.675 92.2646 cv
261.745 116.058 li
261.329 116.889 261.92 117.82 262.829 117.82 cv
271.574 117.82 li
273.396 117.82 274.895 119.32 274.895 121.142 cv
274.895 122.964 273.395 124.464 271.574 124.464 cv
255.44 124.464 li
252.816 124.464 251.338 121.878 252.458 119.65 cv
267.709 89.2817 li
268.127 88.4492 268.252 87.6099 268.252 86.8408 cv
268.252 83.9453 265.949 81.5537 263.033 81.5537 cv
260.172 81.5537 257.745 83.9814 257.745 86.8408 cv
257.745 87.9604 257.474 88.7017 256.458 89.4849 cv
255.839 89.9609 255.2 90.1631 254.424 90.1631 cv
254.424 90.1631 li
cp
ef
313.794 78.7651 mo
314.904 78.7651 315.828 77.8965 315.828 76.7715 cv
315.828 75.645 314.909 74.7764 313.794 74.7764 cv
281.619 74.7764 li
280.525 74.7764 279.625 75.6772 279.625 76.7715 cv
279.625 77.8647 280.531 78.7651 281.619 78.7651 cv
313.794 78.7651 li
313.794 78.7651 li
cp
313.794 124.254 mo
314.904 124.254 315.828 123.386 315.828 122.261 cv
315.828 121.134 314.909 120.266 313.794 120.266 cv
281.619 120.266 li
280.525 120.266 279.625 121.167 279.625 122.261 cv
279.625 123.354 280.531 124.254 281.619 124.254 cv
313.794 124.254 li
313.794 124.254 li
cp
.560784 .207843 .0313726 rgb
ef
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 13.0.0
%%For: (Sashatigar) ()
%%Title: (Food icons squares set 2.eps)
%%CreationDate: 1/7/2015 4:46 PM
%AI9_DataStream
%Gb"-6s)THrNA#N@4/2b1MR_;sn_IBoDbMq"5F&7FIIj&F9R,p5^=]nLTrqGBBO-c^,k]frJ,S=.&0N`l-)k+^I_C(i4f+B>9G.=+
%&-P;in,DbIp;>/0X./QRDu][7:"O79[bHHlD8nQKqUsd)h1*'5rT/I(bXiK&SdM?YWLKWJIXSj.E.*$'nBKeVrpp&;GC-j5]DpDn
%pX@++ju4+6dl/)4s7c)'\GaV5oPh)81VL-n3dc.#FgsQK]t;"'fSh0e"8hQ^jZhVN>>tWPcg\,Vp4j/s0>F4T0Ah5,:#Fk"2t9!/
%j4hb4#==\ZD1U+'s7+S`o;bU's1\?mhd:h^FoQE)nSiVto.N<udI#P\2#?V$q[<4O.\h=RhcKI3k4RiJM[tRJ_.HV<dB='Fhk5l,
%BCib0JDBa#,;n!A^F&uE^Y32urV)3cs-I3\hsc!%kr47%o?B4td7,Je`b%"0qRXj'[&XB2q21:;&-$TorVgd+E60-S2rdK^oM`QO
%o",[6^>WPcV!k3<Cjsb@-dtU\p*\nQFIUd?oQMon"Q8jkX389UC@g=80A^$ljaQ(C4a_VLDq(C($!Ee0%0$3\_r]\rDlt.;D$$3&
%,CX_2p@9=HR9r0C>bGjqF80B#nV<%7mk5bR@W)c!cjtePUYl%D_tC2dI_*2(f*\GEIeWj4jq"s$P7dc45YR^E*rQbl!#\S%DTkfa
%Sa/MB&[15+XYunh^*+Blh;-WU=#[ll]]+/8G^&hh#\G?ZaUcDi,e;6sT8Xs+r:"ZNUH#a=GIuasR[WC"2rEaUrp[g\lSga=='ul=
%N_]^CV^1IbY:gqLW2GCfHg6d/DGG\-@'s_4^V7`al:^tlRdbC-;eY(Kg%Y9-\pqRmq=a`V?^KBa&]Ma%IuP\1N?a=?j8$5d3__"Y
%9dhgFJ,K."U"D2q(k0@u'\i"OCq%<_],eW=m82sC*8d?[O!DDgIZ=KmkOOcY/LUurd\_DM=7uI)Vq:H(1!kWH-jI8I>58Xri?ucu
%./[W0Po]ENke^-n"etK"<=-"-C(Q)k9KR\((j)HOiMg48@NZ+E;<Icr0^U/U?8sOL'NX1j]IMD=!J8$n-g`_\g/V<Er^/EeLnCV<
%3`7AmmrHJ-(DHt2g=*nWGo8Hu-iO0u+p[n2OTu.V;%,;@Vf\elM_J3d5as52N4_cGG+G9S]LO\bT(5@L(BPG!5ttOK]!^:gM#N/b
%+AcV`"S1kF\U4i)nIrl0ej6)#7:*u0PQ?@-\k9MJP-@a9&4orC<hWC$A)p'h6mu#+Zu:ZqJtMO==r-6To%GfjT:h6Sg:gN>(!-.?
%?Ue?9<?tfF?5OqfSF_4Sb!l3h*I;#!\*058X6>+*]';PC7"2g?PA5R2D<5p)%H+&KjOXc4'O=.1>F(0.e[B>i5<Q9OD"E-^-XW.:
%r&5&TGBq>\oQgcE.Sojn7esYYjhI&@n!'pHPlKKUjf@s:s%ZAOn+)_Ckk3Q2"]V)ahq=Fq?(UUoA,g+%O$:KXl!O6js,naCm"X=-
%:;bS0r!/\`$*Sd9YLCeu59GCGld%(bHd_5PqWctDFo5dabau\_l;u;W(=%D-(&tmLa1o")SB%hR5Pk?Tafdp8jKU'n/puBRe^g@R
%pkj5n)6i:GopP$UM4Qm1rV71o>2=&KkkC^e>b"RRFA&7sI/`HpYF@g3g;5;3T6QsqVChg2iGX0n#Ckj!eCHT4TR"$6-=CeA^294-
%q(-rlQ\gZ,6dP.;SBgWp]Td-cr'frM!E=^2D0*9%MMV]m3'iMYU@m??X)(6ho=N=(eXu78@<`=eEr+2[^2%m:s(dGiZg!E<hC\^j
%5<I[be(Qc=f`ED`o.>8nT):Xfi6sNS?8%rl9>!eY5@6?(56LFaqo%fAX]N*5>2fR2POK0_PajEB"diY&5.d3u0^g.e/-kBoSTGio
%s4dlBs-%;jHq5N^^K^CKSMWI*mneu!LgE5/'0>Xs^Ls[Hhl,-/-qEah^JCtS0CQch@o$Yh/(EK.Xf?2_@GW*spU1h-G!-rUI6[Fi
%mNTJA&6jGBf!Q=A_kb`fH;-Ws=WcObQhdc\lBM<D>\"-_b^APno")PE8kG2s.ufT=PkKG.jY!@/W8#>@!K&A$bGDYqD>BUm4]*jb
%`bhSr/,`0!U4c'b,8NM]cG2Ir#+u0cA?\555SfKa4S)(NK'+[Yj6>h"``*Nd_MYr:Zu<K^ZXLu[caX?EmQB#eqn3DI6@14@C_nlF
%pmXh.[J7i`8DF3Z%tKkG_](2:c@()_7HIM`Dt/F%d6odpf51cIZZC:tVQf`SLoYV<3gH=7@/@J.ADh+CEd&jN=2nG+4<&0`MTQ3I
%gaW%Lq0L8UW#^-f^#2X*V)*2-98t?%'U=BNcbaebRJ$OCOZ\]5_M;!\XK]Qr>Rg@EY)`@-S"J-lP95-[\sW1Je%"u8+9g'";*>^9
%fp]W*F$u)bQ#8IR<^1/OoUfcWn7leQ&=)[GVmA-M?Vr7'deKV6qtT>Wrqpb9?F4$TrUWMS=mH5!r:A6)O^B<Bn8$!#El58(T?W)a
%T''I1]LT*HTYLBM1L=F:ekWc&Wm'(Q-l+`;Ou"#cBcD9Z^kNl9h3L=n,U<2>YI8G>T^UsTU$23[]7+i'/d?(Cd_?3CRl6k_90I?D
%(\<<0o-[l-?cauA.ABh,mNdR8Osp_348J+'m&.j?,aqO!AD]P%l5aIM>Ej.,<lH4H3`dB2j8!p(50Vudnbjc_J_K_faKr6+MF-s`
%&25I/_scV'4c(*k]\%<'24j3\@mJ.M4!qIN>7?X(HB)SRMZ>Ag8Y5jk#Qq(EL4O,h?<&=p132VmkFQ<qn)Y:*A(9NV<G[tM6QfO(
%J-ULKa8t>."W*ONpl=D:McL:SJuJr:'.D1JNJ2Ea7QB0DfPqgcINeoh,0so7^A;B$-G(a;nSmF+LeAn_eZ"Mqft0MS>_SZ`_]l>A
%McB2P@G7V3"r<.Rk.r;e`.HBeAIt8>l?m+D0#)$?&3h9Lq!F:KUYp69!q)\B$1;`:2"JlIO1E1[(*gSW?"=PDb+'O8ige8iq"(^2
%/@a/,/@%s"AS7EBB-nF1J,]5,N5_bYa)ga'rgiZHq"8,k7J6h)lU`G7fb&sPW:'k,SFWI7M,RTXQt[NJ`WUsP@$#qMF0SHfJ_N";
%(QFgj0,u'D1:VJ>.\k*>5VU3aO,P.,-]+&Q6mKf)-;XWQ//+f$$06\DigO3T?8,Mp0Gd/16ka1p![A#@M_dbTVHt*>G6j5o]9is'
%:+F\M#'*M<>^VdHTF$B4'@(^H/4]UJEQB:OXk;"2\a\=nA9H>B`F+4>)+h:#Y48#PP!4dnD[b]ff5srZ\lUWKEBOgUB93ESS\F`;
%]o/\7Y!WK@4$&i@Yhrud#_$:0ejTk8GELup9KD06]F,;VXC&8WdDK4nGL:$/Og84;aMfsJ$S`A?#Cg7P@d.I*>8N:RP0^')bA*0L
%c[iA=c,Aat^LKJb7VTPl7JT&X.bN>uIWQ$G(\k!iS0&PdPh:].^m6SSHJ=ZC5:?=I*QY;Z]m:8hDdWBCH8dZCY-<B3nFTuFl/72d
%!*>aPn5B'sjWXtCk'\M0]$b_^IrnZb>;%>KUR)b.GW`e+S:o)mq./Qm#(Q9/a7fXuE6GS0Yd?Sak[Qe0J"6`&oM_a8j1Bp4n,.;m
%A4c6]H4&i9?brVTg-55K)#%-pfA#i#%pja[#ZpVSXlj=(@oN9?efFR$q2rhhY<7)\SqA)41-+*[54Q48T)!XtlhNP!@uCjs-NEqI
%T:IrRcOl5Y3prtrItlUgT_85`p+Ih@mPBc\Jsa0Pn@1ShlQ,Glnu[#(J"cN(\9KVj,L]sJ>/`d3ohVGjORk+:3DJ.Hs43bNaMm$\
%2V"PGiS*Ibkso6cMTtsZU?L+5gs>)me)0\Aia2kr/;d6">'?F!E'BOO,sJg;4CKk^(-I)h>e"+dceRtD7#kAgG`N\;^>$"Gb0NNF
%Zal/=k;:0'#(^JL5@uM`Xn/_FlZ"_1P5"p$M1q5FIUB`[+&%%!UiK;4\n7neiN!I$lC9k#mUlrCVQ=U"M5@bUrl3ZZN1UsWe=.X`
%R-:]@Mi&CN>IQf7fA]RZbf(f=JKt;ELo4(78'JqM7H9E,Q^PF4#2o]7O9%U+W1DOA(C">0B4!D)guDONii.2*Bf^HIUX,5!T-`c[
%od:4=2,D$JDN=F16]m,9TZ/`!3*'06\hF\T9ZR):r1MXfO9:fAp"=+eqp2-\Q3Ko&i;d9do&4_+it`7&*/3.l%*$Fh&T>t?c^@`g
%<_o(dlM\Ng;3HIsLa;PdhM'GI/S9#YnWpoPk9*e+:So/Ik)j1p]q7OUl0]fQ6tZ(b+mUn\2S`SU2l:mbR`oRW;bTEa.=[0A*37S@
%F`Tjd_'H&aZ2to@54Cg71DaAi0rMA7c;,"?]:#9XqrpdgSNaCJT5GT4K8q+:rl*>[]?H2R1Ng0-m_Y.TUqN?WmLeW4[!aufkn9!E
%K+]YFR.c5Dd*B"GS$h*gHiCt2r48_?^fm<u=XRV,j!4Md4s+W&5T3gK%I+!gME9u,.`9"6"'X7PA%Kr/:UarSYP2NBKXu5D::PUU
%VggNINcBh^N9L/,#&f9JL<%jLKqdm8:7?RaJAb3-)@/f/[u;cUJPG'e3g5/L3mTC-G):das+ErHA(r'2!g&4Z=IWo2#f<CW@,Vr=
%Ac+(4cS?"h86bkpBKlq0\M(U"!(ki)WLD*V#B^@r')9g]+F6;f3I+`+[M`h&"r:I2Z97'/f%,@Y&*GtGMa]s1;T(+?)kDmp>*s.-
%?8l:XO(UYpiDf"Wj.K4]%?Q:^X2*J$3)/F%OG31mP_8!gi'Lu1.)pru/e(5`MQT;[6j?=#>3hs8$[j\j6.-mbNeO<_NOt2BI$&^$
%*f\LLj#At-EG%>s`dS6$G1-,")J7BjZT)KNi1/"9F.daXAuN3%pdmRThupV!]ro&`OFU@nPKh(p+CIK<bTe'\,Sn5>JEe8(<qG9X
%g\Cc/_+Z1["G=&\YAPKk_6hADod^1l6ECe2GEq\=H'.#Q3otc5-36qSIA6&u>_Wf8>r)\b"1tgW@N360k^\fOK/,BU]7F&h.i]r%
%SSKoM;Q,%];1qc,eCEQ5Car#N^^Lh_mhE"J)F/cZ4=m(6l8Q0XYk,[8M4$o%HZ1Uc+S*<qi4gF//2fpS,buOi$./klBL(54.0810
%q:iLd_ou*436tQB/a-r#os-n,60>g^^nSUgZ&BN:cZ;]89*5#3YlgD;q(nLlSX5$*U]=La'"3E`K+8RXhQj?ig-AB`Ih8N6jSrK?
%!]35+(c(LHF'8]X4ua[3HlehC(1]TB.Gu@YiTEQ@jKkDc.1[)'=JuW=1H0jnMK9H(1+q<L<.cY<I<G-q!I,a#c3cY)Mb>/pU`'G<
%M7,smC0GSV_h@UsQ:hRP*fq_QECcXE=[a5__Oe)ZCf?^ZKGoXt%iL;9AH;*`PX)PJ<$g[]+aE0t@cGJXc2GrIE%4_<R6_s$E'5nE
%-;=$]!Tt`P5J>bPP60nmE9'E#mQ#Rj8LIs2=j_&Z@>]8*"`]]_F("r1C!;Mtp/JU@Zk"_FOTrc[<u=IHG%LcR<B!M%mF"*\5BdLX
%EhNmI2CNf$0G5^C\8<Ue"7tM"h1FJ,#-cU.mPl-o0LVM3K-8\qJcea!'O/&Srf*c#`B8I<04t&T,roqto2'JpFWLi?>)8b_pL*Cb
%5L2@R0gMXC%KB]!D;JCMK5!=dk7O$B"g%X%=/#d.%*T['^4Bu^-m7qD&VQERT_,;93sjPCLjM;!5OK<N875kuj>(keKD]74,_;hq
%k^OJ*?(=rB?CoMkEs5X;g#>>d4-l/g=mo/#k>`%?cq3#D8t9^oq_MTp\V4K>8]9etch\2K(DbrMZHf7UXDh5B;FTJTcWtZjBhP$-
%7nLqq;nk9BkGS<iBY>J\/!b\L#qXlK*)moW#Qc_h(PNC389u83n,;%/j9bT4jG1^-Kr,shA@HNgUqhSX^"gDj#d);,LX<3Z!5)"S
%&XelnkON,b0:`)*qbZoI,l13gpB@-OX-Fp6%-NuA_<`V@T7N"R-pShs7IT?[.T=PVbn8TF2*NA<`]ln'(15T3!AttQmuS"HGAg2*
%en)7^T[*f)O*h_J_tgSN?9atk"L[Emol_[)chTOV@PNPan'Ci0L5DpT/5:bD5-Y=*1^UR&^%Fm">s*7sW3&?JQQ$q<Bq)#["3EM9
%2Li$V.u;Hd,9OE"0\kITNS:sVof@[,QrVG(YVnjLL$>T">)dA"]r'brkK4rthV,_'jY(:q^?Arjk"kf;<T$A2o5''TP@(MSm*GK0
%[.&;A_iq2Ak_N5#rlbId!I\5L5j:9&H%$gM1>HM9R4U:D>jKoTMX%O(c&j38,QbIQ,AppDm]VNQQAZuu!41p?"aVZ_!_`P\W`Gh<
%(f[(s;]>4e<-&?.1fn]>[]<p?[Ia$+JtIFV>$1CPlbj2-[:Fm3l@3q;0]4&O*llf5^Kn<4bA*,OFJ!;?_d\RoO#H&3lSEFZaVFF3
%^ok2#==)lo1ZCu@nCM-Wd)<qnMs<>fJp2JN/2>_rdrUU2KltYGs*V6^[p6,\k$hm/ibP!qF^=@Zk0MDo0hXsZ))(RHHB`'B>>Qtg
%-*iIV0H/or<XS_+%R@n"<$OIQAA@3)E1REDPn?DJ@E2<_eOno4G"rh,%f30FQ`nh-3!20Cb[m(EJZ*uK9?+PrW4\3l1iWn9Wd/FJ
%+'Od#c.V7pDm.pD,^X-%k#guqGV+(f"V[LZPkpe%bYo>3/oHk(j"`92F'AXu(YT"LR7\a`7-jeWMP:?uFf2Ia*J3OGpH5qa_n4qB
%6A2O7f#Ih";;B79M(SVOaaJu@h0GTN/:@_^MhWjuQIthik0,oYU<!?FoZao:0%O2R]c.3>pdUkG@@hSrn*K2j.nB6'VSOJ>o0)TH
%jNNAcCpd?1Xo^9D$nhS!@bMUS[tmH&<F@H?@k>E@[%<`9k*8aT$Af*3E>/s&9$:4d=1TIhR8rPC5NsTCUekS%@Zu<'j%oes@Og]Z
%$R]AlD.Jj*/qN,'hfpL6Se@U#--MR3i-Cub\Be9Og[1DV&RSH[=Ze>-i.;"V369s17Yl;aNQ)6LqNn+1j)G;)Y>93Q!-K.?g]@7Z
%?8(:oG7\r$j)"C<SI@ApDF]O\R=cUt!IWi#]WcuV!I@KcR[41O7FXHD7p/K8hfTT-D8B]@Q?VIc=Hh5d-8$k=\9jn.+<T5pE$HX"
%c`9cZ^&Vr=VFBQ'YT[XFOFWSj[-Hc.+s:XML!GXo3Op/C`@-Db!Y`3kcg)a;.CeCL):`4u:,uLtqkMFs?91Zbcp@ahDr?oB&na_-
%(^+/_OPWb_!?q]jnXTp&OqL3Yq!3rhcI]gHi<V@_LcZ$%AOmY5?"B2dXk/%J&`IuQ=1[W`nqfU`et%J/fnnq16-$>/W.dA/UVA2?
%I0o3k7X_^pE=<gI)9G"&,pbu+6SY)Dc1G-B*+g]7d!YULGeN)<C_O/s:4S7c[Ia%l\(,0Gmdfdqia7eS!IAYHqCd5'kdrVOD%&kr
%Vf)Kj0$L4qba_SL"L8i[(2/BRjrh]*(hIDbgRQiRSnBE)AgbqhciM[Fr@Aq/5'Vm099op/PK3c@?sY)#gCCn,*h<eZf;A/'E5Sji
%qFp$\HmEjn<*-$RlK%$5hT<TM3Zt/)e=J;h4iZ1=DnGTdLC0GkEpStU,,'IXG]esH":N8`K"iegIH1Bub"3OYbEpqcrE`WrcnfPh
%W=!96Y"b.0B?FZCB7[;?=C:bjo$MK1*%r]5SLrX-EklJIdbE+I4PTU"XddHq4`a`[XUNKEr&gHfqgUF_6$IuV1Tb"p-AZ#Q:+!m+
%Ct;lZMgifEki@ASj?T_NV^l/Vl*bN/jFZILG"_U5^%p_Sdr+^n7gKJc6WR4%,.Lp6!+,3Ps)Y\fJlHWU`b6:L(@.&n&OI;Mkk.AO
%\#[6O&JaX2Hsh`rdN2p\D'SA\2P-Q<Ps;P@f%6h2d#V=HhV?03[k?6kb;d3.p<;Di]o/7d4Mfa8^68>hIP2HVE`_l-DS=lO<^.AV
%4\-6/g=[eRVVV0\BfV3b(`#20R!dj[*B^'3T+R]f@fblTWDD91TJd+I,V=]3WPsRcf](6Gk+h`=]@E#.3?p6>P76KTCi<^r*`G^M
%b<^Z7>0)$6@QeV>hX><lIEpiO\8F-J[5<hXl2kV(#*ZGb8+a>0k5bBq6),(H;\'osd)b/I9!0c/eOORuQc3O'/$D'BjYX*i=)0@a
%oCY;%=.6-'g._1%4G/>*Q`c@,7A]:`T[Mk3pZQ,ioQ'#_3Ts-qE`nLLY[2:l[*Nm-[L+a[chB%o2D5I<krcGjk8.e?DqXH%lbTjr
%H`cU_3FA.X=jHX!2j1J"qD?]d\ZYBZI_/CN4`7kJo$.D'G?p0b7F-2-<>)],_JC#-G\ZP5V.7nn:4O&uGEu1::1Ykq21j+`ouLbj
%-i(EPeuq\hhdb\+>FY6W*ele,LY5UZC?)htIb\Y@o+WLoI!mPQL%BR=IqD);k%C@_=DhXF9%VVE<Qm^F/4]AP)=2DodDGhIZ*E(S
%kn3bYQ8?4l+*jE,XY1kN"8_V%NgQsIjk9u)bKae&h]H'R5<cq;>+]FB4<p]<icXG(*<2G''%BGMl>#6<]AqPBYProUc?]C]r!Q[]
%EaeM67>P<;2kKfK\TlEB?[XY9c,HiQLW-0:Mutk7q<>$-?%QRe^8hs"[CJ9V+tTA745q=JEc=gHo1=BeIm2%\e6Raj[I19O8ilb3
%f('8t/t<CbZh1cj0B^)2[eg$:2>C=)IJJ.Sl\<BR8H^f,Hm6npLcDk6E_^A4?d[$\\AD:=TAFn1@chl6X\C6BIm1,bs4!717]H%W
%-_<EXqYao-03I`0CIdHr+'ZlM(;PFtW?!?:r2\rTXKF9Ba8't01m`HQ6r6N'E37a`$7s\hqn/4gOFrNp!IQ0)a$1YCfV<%eg6Ubk
%An1b]>Z=n9<T5j24q6I5J(M9L3bk&d2;RGKY1Jihon^0*#sm[Pgh>7Gl\_Pne+j1]6!gAse+kW=%L3+UcZe#gmG._^Z@H^DDoS3j
%j-Dh)1O8OrL5)MGB,$:pdKrl3Uhh*FGq_97K;rU2$iY(j7!&tp9;%-QUp$i\9[f2AHj'-#!n31jk?S^tfK.e3ZT&Da5&iL\nEUS&
%Gg+lJL*5"#G\uS0!ZH'$."ZnKR`KaUe9QH3;ZusN*>:rYXWP];I[SAX2l#+mEaFNd$@(l0aM6m?"lptr5gX"fJ2W.27m0P\5"-aV
%5fIoc=O\mR"duX%3!Lq5KGK#jXEr0!Qtp0rG<EkK>Ssl,1<Bdi\%I\2'[ed<Uql>IFr^AXS-:=*:\f@lA:K&:'Asf%GTH_F%lS@S
%gksT0@',n^>2<>/h2cW&W9a=r@bXrGl+E-V(D9eeKA$'_UV;UQ6(PXO4SQfqjC1<ecVHTX.g]<MK=J*^LPaIUWFoJsQl'"m,BrtE
%'B6g9abu&-qDqN:LBs^SlT#=ko(LYN]Sk4I&-pf#q4ekmT;d=:ffmAbd,@4s.3l/a$WG/D8sN&!IXV>!X&<=-\Vou7FJ7MZ%=G"C
%SFmJ;Z0^Uc/F)Z?N^N?#SO4&_')6A?9$qe/J@RXt4@IKg0p.RDBX<K5oKR8J&l[c6Kn*c\lZ5"8nCusH"-1NrMgW`,2Ni(lF8V?@
%@rB3P2(q.t7_C32-hCRJIDtCJ5RUOAj_9J'pT+3tE^(?-_H7LELC#UHr7,oWVu>r+`ZS8fQUj=[/<(!3*R'4V^u?0bota4//lE[^
%MKU8]3H),O'@YRfQ.nPV9$@1I%@f/^/PkZo;pI+<:[5I>#MBL"SkZ#.3C1))XOglmq%r#iq.ucBX0RD'%W0!B4H%??FmJfkD)O->
%0(_WNfl"EmO'<<>@1(]rPnF/i:LmT[5.m2GK2)dr69WGt&gn_Up^DuOoRGu?%bnX\b8^Ho:oD,\^k@B.6XEP?BHY+%D>Z+_]U$B2
%m1R%`brc<6#sVoA\gcuj<d'&IYb@tD,[R/]eP(d(A5gUJeYHc@BGKeXAkdFa_K=YR0#`p#S&chkA$Ls)F"1St3SXm[-"&?#LJoa'
%/Ap9.:[i>9PDsJH$kDAuJ6.'j^4&u+42g8C+O<%]M(`[CW^REM>f^2V,7]h/dD;*)&2V.bEcrCH;2JDZA*#]Ek2GMJ#L+O:lm$kB
%Y\Wf$ARWirMG/NT2-;$Ag!R;J.h5GE'uE8QSE%&;HoOCRq`K%pB@,\UW[,<NjH);m4.5ra^:;l_ADW%1NYt^gb[h:@\$mC-/WA@>
%%=$I4:^XO:M+(i<5L*tk-0LB=<2O^.%k\9MK+?cpkM][3Z!ZT,27^&RrpeEBPIE?3,]Eh[Z1A7N<2Msp(c.6%G.&Wt^?G+0;NZTL
%B@bBiYZW`1!t?elml4KAO81.[=:8FtPIBpi$YXtZ/"OHb-U>;]cB,WB*$XZ0(U+M]57/9@lq)@a6#"%)Tu2Po"D'Z13T7ie%f._+
%6[iQt,sBd8lc$omK]Y/mUW9FsXbH3@f/$!3a?>%>jFR6p.Fes4&Y;ET#C3HOb@M/JS#GuWHC:Pl+3YJ#9\j2`If)10$9%0?;Eqs)
%\LoRoR*ElA8>?.;CS!"6^_SkF(0O=^AG,'m0eshc$QE**o,jA?04tm9H!^apl#YpE,<a9/XKjm+1oNBirPr.M;W.H/Q8Xc5"WUnn
%ESf-i/HR0H9HOm3m<kH[Ruh\'F*N`j7*gsM4I^;Bngn2LB>?`TYQ:fK;CEU>]>1QgH_,$Y?9K\-+n)'ii[-CA5(/baf:D"8Q2koq
%pFm+6Qkd&B<ge6[K.$J+G[?%D:Nq+!VId:5bUsQf-_(><J9I@s!?nOme^m.RR1T1_GkDk1_7u9>1"42M$eZ.Sb[SIVJOn_c""q*7
%HEktM;h&-DF]A1V.R$&1GG",e6msr/BN7ts_?f>kp^5s'>q"j06(l&SGOu.<Xg0..De4K#?%]7*-lg?(8F&("c`8"CArDK%8N="6
%_)$hGF"heNCiMa*q4PKc*0ESt,uqiE$`hg/IW7JDNVDPV$G4S<aEuq-fSK35^5+oG(b/)j,@7@[#r?X"#r_-`;ERa@#lN@-:0j66
%%K9:%;Nds&j8<!/"_:gf[D:fRk@B]bnC04j=GLYWO!dS:?)@bRIQUcMHP?*p3=;tf8Rb1[o%NqNlPG[Jl.CTc:JIo992s=tGW^CT
%ZG^!0S\c04Gl3ukU)\OD]o,l7_3*n:(K)?oibW0YSkbU@:ECjC/LDO^8Z4'(d]7?5VfGP(ngaRd-.UN9.ZZ,pk3(,Z>.f(knF+Y?
%hS-^K\B)GQDQg5sD]\?:kNV+&=#]$lh&^IKcek$Qpq(Gt+$R=B=^QsQ)"?@"Ds;tVRtn$`.eR$A/q*K=i<+N(O*A&ThLBtFme52W
%^=p<7I<2spk2P?Tc0=3Xk3`,n2]3rlDWDOarqbnM"eJt(^&RmA<IXhoopa^RebumUkTTZsF/o)Sh8PuLf_k0^^L$=Mkj8d,^O?"<
%lJ_:o<=to8QZkC']+Kqh52?1Bq8;Ue_2ukEnlJ<Yp?k6'q-k8I_R0U3b:g?qh8S>lp&3^cq]E!7[JDE2>=1p;I87-3LPrdf;A9(%
%cZaUt9;)%7CGh(6?We'.2nk5ocr'87DVielX>kq*\(C(e5MWp-I/Ch#H[nuagm*6sri\!4h;2F!fjO$sc&\3Hg\7iQ%!"WCrmSjB
%qe)nZiSs"ZDSog`h/&Ln\KG[sYZ;/_eV<P6EdGq(MdJS\1FN!Y"T7#0T+72uNdpjhDJoJp_gcNP7>Umu&Ua--nF/(qhu*&S(Y>"C
%^S`jE?<t<1>[!h5o/ll3IkC]tdfgl/V]R:+R$qpAS;]03IETA^1`rW&VP]p(2S]!a/`*_HI_oIlSUUH;K)K7:Cjr_dkC72(DdUn9
%<%YTLQ;A15r55S-D15'DiYNr"=Q,'^RQKD3*%jh*KT'j+Hj&;5rU]KWK):>8Mhe@f)e'J:ps[!/Fn77mrTp":I81/2f'(0Id]]Xu
%=jO0`Q6MqL'Q#(%as`"ErXX]]AP;6l(,F=ADtb>-dc[n8]3d#fJqH:kp0c4ch+npXVr.FK\$p9/O*pm:S$2g;ICPsP^EBRrGP1+9
%_^,cWJ'WhXGBXjQdqV'F/$@\,LTA>I]??[KWn[IBCLWQWN?8Zq_0GM%?i==jpYYpoEHhEnUn-C@$fje$b5QX*pgAgG`VkpN2l,0<
%>fPoTro\cU<o)Qf>X!p9LYMd"0AesO9j72X^Banucq$V3\'H4\A;6W>h_I(8+Oh5-S3ladVR2C?ja!r;\p/;+I$SA,Vl0R($c9q'
%KjXfRI'\@/?\Z@KcM`OqLYM,J_#4/CMWh830ApeX$me&a^81`[oS*qRdd[(YV98Q$rpg66pO<09IXel]s5u,s*I[tbbDX8J4oW+N
%r^,so(rqi>9CYTZI^m&ereG,('eB,L&D4GI8JBkX8HOBf(2Z9a+_40Z9i(N<?`r6Lr9u8cElftd4L.&H\$qFGp#bt!I#ME>^3fY2
%h%dt;SjDB4V(]iZ?p"2Om>&=PjXK1t?\Ud2_qZ&Za7\Q3`ERAi4p*RhMimg"hr\UoZXh@H?8Snb\nsAAH/\E17#W3//oNB22W*:q
%hHrH_h#)&dLAe(9s8M#[:3ddYSa2425;1ROrr)6%ZJ<FX8qfF.>/#E7Fcp0##46=>GD3'af:2/_LYL)B0CBo7n#lZWE`q`%lY5ti
%i]RloIs(_K^u;_U32"@3h8>`:Mn?G;WrD^p<0@Wrc/tR:jGr!k`K-A_LYKGcRu>2'c+_Wom%)lA%u73TbK^"'h<gh/WLk[=E;A*#
%S%,r70/nBp\_[:RMJp4qYjc.6YO6>.L!.^[/7e8hP*VEZ"!;u5H2iLOPF8iSr?]/O_=;@NTasY=[qVgm&!s]HJ+qp\4e_`#lG(*G
%>hO$0I(6eu\UT)p.^oA6$=1?A/iS=eh9`"Y[<<VU-d-fESh,8%;4o9c.n/2q(U=P-rHPmK!sup.m-W?@`LEpGe\b0u6!\3qY:je-
%s)@N,jlW&epJhOiK"!sL]dIVMTDU3Jo0)chI0Ckqb'V+pp;b@gpB^AVf`UpGrq>dIjkG[Of_k<L[h&*!I1tFk<;UlB&&(3,27$bA
%.-a]P3u;$D2qO1uDn^XoQ<\$)bu5m%cht'WkeI&IgG^M0j3Yc1/RF`i:H_3WrVbgZULh"55@;*R6\agN5C^?%]1\mVrXp'nX=+Go
%(/+Z(m2N,fD*Z^akGQSLD<^9/eI;o0mJW<4o$ou)k47oiLMNg>s75d7=Mt+-f_D`bK,pb.Q_j9I1T?=AdEuE.Iec4I31nKTF5Jru
%,fP7m*lk95<oR5n<q`I$X1/)umc*UK<"*]%a]uRQ1`o,[T$%Bgr<Oe%L$RIQ3@<i/A(dAs.K9hAkF@jiT#'\fdAH[,mnP.TpP=^"
%cs'Wb;mSW@PMTp!bHcR,P(o:"36+Y:-CJ5S^3iFM^>6HtC%M2hl::&?<OM@oF3g:YmJA1Ra%O[=W%j-%nbDmT`L3L/Y3BnLE_Xj@
%UH%)C4h89'roA(;F!6M[\'<<0p\TldV:G9M_&jadT1cj^m!j=L>,9OEk5J5D;P==6KY8J8QFlUhs*SjJ7G"FEO]-H!p8LCU]A*(@
%i;N*+iT0B7hE07SpE/6/D1/Okqi_*k'Sj^clMfkh'bp<qSF96k0#&bmn&Ir?^SfKKk(-Ul*\2>G1"KSlXA-p5i;F0&1qHsR_cSJp
%(ZslNIUs=DZ+n";RJZ_9<_st79oi[X-#VW/DkAM!rtl!N`7kgK)dX:55,$GLDsrK&+)^e5)@%m;EH?35SjBN:4_^#PfA;C4ouE87
%:H&5pq1cmInqu:Armt6/rmU>Mq-QADr7E$`MCNk#GPggN1om[d6>js-PtcR;)(X6PaY19e0k``\YH#<d39Z18^6#m(om0ItQZJ_f
%8D3`U_4SWio<EQ?p;pL7>>!#K#167eF\R<4fmn8WcR\g!G3SO:<D)/ZdH^8L<Q[tEm-1eGp>*@Xb==:Qd;iBml7'K]]YF=B`lAII
%Q/mCBPCmFBQh3WABYfW(2cgOA(QTFLPa+RZ94-u:i(^YGr/q:Q?lhZO7Es5XRDo01R>$U]n-P`H(J;CdA,4%0h7or-*%AnVMHOdd
%S-["&E:NoFhF9-mR")ohm,\]-$6N=s)37pm>^nq8QFcA?lCmkJ8JeC)O0YS0nD"i*?QE:n&?fcep/JRaQZ)SnT7M7*Ru=oU8%%70
%(=K+YD8iSuYnt_7HoH7eT.3%2(?<g5f,&X\^0b:IN7%n$B,(',5GS#%c5goohVZ#Y]m3S&fql979t5\I\&hjcHrtV[lrhm:O1U[>
%iTXdQkkEE/8+<%e*'LBU0(jf/5^geCR;6cl!u.X\cbAl:+).6N%1.(BYCClJ%[N9e%mM%jY\^_[O0SUMA[^pQ<>ULTfESV7p[IL,
%T.]RXq6eJHZM5<8:"uL=(BXOI!<)S[=$QS>95iOVDgm,P1N/_Lf+tpsq"8EkM+d+%W3hZ7Hq20?X.L1r^I*/qBBfE[0<]iu61]P$
%6J$s3g,(/d2N*XkAP,Z]!PahlDu8290/;FA'Da"H5-8?$5Fq8tEkZJD&UF<]<?!mK`.>0XM1%;si5#G2+ni])0)kLH/H1#%E\-+W
%A)-TI+P[4K79"EN$1>DZJDsET*]YU8M(327mUSYYnF[CK'"p5!F4cRL`WiYU3,/8%@`!G;3Ao=(<,`aR2lB]G3<j#o(fBom2g01+
%5>4BGH:7"UkW&Lg$!g47HZ(?Ng(7$!e-Q'`3/dt[_kugV'9[s=I[Q!TOlWhV-R"5I5k_C12?FQ)V_Gt@ZmY6#Zir@\8+<6RD?*+V
%C,4F4YP0=A#EMn#W,Ea[18DW"cMR$`@kA)^1cEGQNakH)_&_FQ&R9.aBkY,.#>S"L8K)(tj-7AD1X2OX3%!pNIS(a9H:D<JKgh0_
%FOCZT\;<AM7(_]pnK\NR5+&c5('*k)MD=fl._shIQRh@Abo2:a%Bn+2]oH.Z&_E&[%-`CB')JAfF<=9bltOd/`$DV09'AP:,q(&[
%Sg`-F+U05<M4l;KgDE]jHCO#\`2o^h"iq>*&Wl38+O&7NW5:FsWj;(UKWJ9OrQ\LqE1@2)G,S@t;X9!>BeTY_%^?ET_$MCd"sS4I
%OY!V7C]N(7JRp+'(.ZE&"oAX2Pgb%&H#,W81*V7tK;sV7E36FYTml5Qk-TucQcA9!8W;+K>`Z[f,rQCE19@tEMOYrNjZKhYe=Pn$
%Tl"H'-Q:oFg(fq;8J[-_,EK2A0X+"JhZE+HKf<^.BrBm6ObaN^RV'c84lJ=Zfgqo4j"RuX%,fhpQm+qaToVr&+u-H#F6SN,F6!hT
%=>_FW%0\SOh//W)G:E'c!".-X#1naPM/bN>Vaa(G4G%Q/;QlnC(BE<,:\k@fXUr_Q'O<R#E,?ID,8;?Tq9ek;+MKs*:J=JW_.G/f
%2*\7A)+Tk>']Ap<'n%8n%Jb%?p*2"qEr>-X@pO*p.tH&KJPi<RKFc6!fi.0G-mh4\H`sIWA6fX$"ubmLRNnB1%?%,`mJp!^$S^Vo
%P.*C=a``JuIb[SK32jt91K.[]4_btD(FjT?AWHI!`BD^Zi]W5;FYMC&'ARn03<^>`0r!gXC2OfPJ_0odB(]YGf<M%S,PM/p+*\.D
%@YcM/4AW$!ccF>^Xc,*!T`;s"@0=blfq>*U5Bg3cN4YcJ);qPDb`+XaSs1>"BF9pn.-#gu(#s!;C5U;@?2LgPO&tjcM4K&N3p3u^
%!kIk'-n#d37^Q,>Ub#ZQ?ZSXqD,>DodPPU&!f^F3!=L!J(J!`o%j>]ONB+W!7)eYR<COePNB#=j9-G?bKm@hjbW);])o/.D?l;hB
%7VQ#1@:*G;QH_XoI.FXr*E7$[fgLpUBLhMW8a*r:dW6Mlb7W%R/8U/Y*V@XXEUK.C,XR4KMib"T\q`<tpGV]:c:TE<4u0mqZRMA:
%[d^*G=,*b<aK.e-NLhruCPtL52fGp0#g9h;QrAkL9I<\!?BOCe)]?Qag^c2Jg$_Yq?T+i?(Z1q"B'$*aT<RT&_fOD37Q72'3dpJ:
%&Td2kBC_IJP_4!;b6@J%1h.$L':J3[B@#:>l?d_l,S!M#"-?;9%)G$h?&Q3-BlL&+-mQ"OPdW?_3U!;9p:X*V#&nDs9G+RF']gWH
%q[0HHL$Uj`NNQhK6^g@uWDm9jqfH+OVka/qJe\GYN_(@KW74/O5)/7K<!M9_iIq1=ZXCTVV'E3g4N$C)FqL)MpCpa+aE'p?gD?5P
%9tHY)M50s[E2ULm],jO4X;5B[2<B.99O$dJZPCWHQVreD8m;HGpfK,*n;=5oKi2=Zc-aW.EPWE"!'J0Ma-Lh]L@4)(=oi/OJcc4P
%iLn.@c`0i+>$D.^G^H5]Xq5'MZ$"S6^pR`-7EDK+Pa?LZ/$ppa=URO&g#3;kN0dhd$"`T@$u\3`@5AX#b3FOhQ/'U7$$8-5'36/J
%j:1&>_I-MjX;4g=Ab5eoi_BR^c%TYpaa6[T2)W&\ppPhJmYf"F5S6?gbedOu;L'l(3iR&^GFW"(Mii"9mGt<'Lhj6q1L=+GTt[7?
%?R%Y=US3_3RQ-N1[\[<u7OS1P9*TGSq]]nf;L%V[=`dqLMI(#EU"@5HfEU46c$2!;_.eIQ\/#HK&M$j1ngbXQ28YV%KYYs\#ILr(
%W!kLeJSddN2bn6]EtHsL"dhe)=&g<G>`3/qS#2Cr-TA-+cXIV(5\[C:1/aqe_g=u3^.,I'a7>J@c-lJ[/riU:;g&h3<IjfW`3JQr
%E&*@X^:T(X"8XmUlJbieM/HV^1#P14h7#WfEs8jPD=R^^W;]L\?&d^2KSCrY1<2q9</qXC"$DZ)RjNeNqOZ6&@3*#j(%*#\Y5rJ:
%P:7gJR6ldp!!cE"M/6;OSe,T;,XEMUemp=gaoYl#On/^.NKR3G!ph/*g]UY$Wf*bmh*@20X9>9YP[P4[)X\1&g;'Ss$RD\"-rosi
%^J,B-5go]c8`#oOa=9tk5Gon"PY/;F`fu&E,W*EWet/`X_n>H&_oI9\>A1m8dgg@Q_QT"T,K'GbRCui/qR7uZ(Tn[YO9FQF!M#h8
%Y%`U7E3)t/(thR#5Fpai>DZ&]74,4!8_$'Q4!O7_O[P9hLV*uRb:8PR?cqsTRb*.')d;L\EL]E;&`.35"n#BBWhe6s0B@JQ$,J<L
%@Pt<L.;9pFC7(=(0o,k!j1_Vd)"=A\?fB*n1Z@Q)JUt?/:0P\S2(\s,8l:lI)XrH>-dQXG\hFqh\n*4^)2>XT-S==,oC_s&S]?76
%Ac)m27\5@?+Y4n1*2\BYkLs+9W()+Cpd2tZj:aE2>\<82kC@j<!d,E-BrG/?d^%"?Ya9BYKdBPCf9E.!rES."hf$-6*.b-^e0qL$
%?^SAYO\AII:e(%ln(c8TQmPrPjsa"<gBE?7nRaL\Xm8(RHn")WGf%^t,'e'GA7.2%R<-<NZp_W';2t8fn:fjcNo[@&Bngub\*D%e
%*r;a<NC3Zo0)UB&S]?76Ac)m27_YWQ9q*"Bo'd9+lE`mm8l:lI)Xq&"PgSJMnS6k+M<X=\nHoF*'hZ.js,u+G=.Kcn#jOFG)J(6W
%d=cUTL&sIq%H(9b3G_5C.>:l$+-jZOM;Bt[jAfTN(47O>EM6Ws6SEqOY3A\*07PD8f?t&3-i'=\6R.(Fp;uh+bH,](/"2/U`Gg<[
%kV8\$U.[:E$Je%`6:0BOZHn>$POK`)C=CL=q.i<W!T1S,_#^)iZ'4I=U!_Ql0J;Iq7SjhFjC,DPCRY@B8?Q"QXHTNX8N?K.V09)N
%Tct%Z'bW8qFsE8=SGbHjY+CC;8q-SD?R+lU"Sfj!%jqjT/(^DO<FNkIBu-jLSagHKb2EWqh9.R>#L"A=N:&;H@R)"tW.l1iToO8d
%a+0d.5Ik/p1;UfIUEj5AOn5J50TIMDU@mTnON/m>CB6JK2NRq5,Fiko3kDsR[qbjYn7BM=@H?S,rBqP]%V=K[+H4Bo$k66c5Ao%#
%muL?$+[6)cDF[rm79(n5BRN%gI3`d$>?ml0YFta_EV_Ih5I<hc`5IN.PDj6HJE.B<@Ml*d+l36>Z&j5"jbXuXc.M3pCGY#eO<>[N
%d##aT6B"C9@Ecne+X(!H*8hFp,NQGpq@7t8S?mBR,[a4kH_Ot':n>Q'@8ZkMdJ,XlA3+1^'`=Q,NWR\X6"HopYU1"[pc[Qg:F'6e
%ep[n?6TO!r`2A/L=gAYlfsj5nKXL&T;/1]TfI,*J@3J?(g73JD"j85`@(eoO7$#<ai)Z"5LUjp@O"_Q$-s)?g-B-'s1oAK=hr';m
%a4*,^`doP.@`H+#M_."Y1C@i0Q?e5UJ]oj(U'n$C*7;\dbrH](h)p[Nmkh^"@N.tloVCIkEDLm7j@m:=]!]fK."TAmZ5dC=;Hm\*
%-eg5X1++f):II-/>6Lus]SZHeZIb<5mfH-l(=E*<88CG85UG6]!bC%?m:^0XA$n`1G>MKI67bT$DPJ(FMtD6!.6/IRQoJ322HEhI
%3"lO+O]sXJpEk&5FM:j"=_TiS;QDR/Dm99W0s.Gu^S5^T,@$Tb"-Chc?os+gNs/"-87Gohl%hcg![5/fLJF",("f5^/08M"Q;(lV
%q;eD:&IlB;`JTdAa+P-kX%=JK_#dTKX=D,9:#WfUG%O7]P/&cqVE-D21qe'RM&nY\cjjS;Z@R\JCEpHSaE_UHS.,R$D1W/O-PYc#
%N'(&D_#7XH1)1-3$H]YuYb7h[NLD#PKE)C4E8jhY=/2'u((D^h.O/UqpV+Y+K27@"jB2M+n-S7cAfR)T,J0Td82G2t"ftIZj@rAX
%5pR=6@ko+<Yd9Z4BfI#Ba3?GOY6q=N;7GM;^nXWAEDPDXUI_on:-D=!L+p!KOEJKtRGd!H(n]i?;2!UJ_j4>7oIPgTYPF8KOA#p'
%d*K!?M%M#aND!Zs30cJ4QIF9ZejI*,;BXE9)KKI_<BAGV/\64R:Tj`=laEWlO<lDYPsTkV"fR5[<JLF/`dNj9bRcHc+u+A;+an*Z
%+771c_1i@3qo0s.+^;#AOAXTibR?7gbUgb)=-Fh0g2k?/]4:"U),:#jhLhX^)8NXm0ZC'AP7_/"\$&W0N(B=RFPHmOA4ABg),_=8
%km&8#'!gnO%uE+Y.O,?m%TZ*fSu[^,)ir+;]aW!s[Cgpn'FQ`dk-S3lW^'gI"fR6BW\X!8!r!G((PWhAoDsF,[4&9SU'f*oehrid
%`jYg4a,g]Rh]6mn<MBS1C!-sa6u;4oW`G">Vpli1Ti>S7hjsiX.BCV<?;e89OfUo0ktR4eI4YYu?C'M@EbH:0$P8oAphpVPTFmBM
%!\(62@*"A1<M`ZZ(-PqKp*7eK.i-&8G#]Eud8b]7Yu6i2^SZ!X,?u*q'fm]Qi>K/Kem3t8A7pRp5eJQ^=Hl*A.l&ukk%9KHAqDBU
%Y*aJu<g,gSHg6t4XE%#Fo-Jh^)UV3=7^lTH7<,qinlS;'.^9)As0_oh6-.j#e8AM3aS:dECfH5B'3?_8J?-g8XuV+P8lh-!]qfLP
%,?PhW/u9c/N$)+pWNBWb)&L<+!qBd0!jVIANi1IHNks@0+''Q_*r.=Kh*3J\'@eEP;b_$_^s%WkTV82>("AQamV?>T>jg%=nW/4Y
%*<0J>9JX)O?Z\WBr'bunXkq%8_&Q_,m<f0,'Fmp%.2^\q)PdL:$]rHK"kK/@Q#>G-/\3MtI3`5h^18Znial;Y6%"RoW/+SV"o0I(
%q\nErbgbU?9rMa"R'=E2bXu\hg\*CfE"H[A$qLT/`AFbtAS0Lso[XjF@UuL(@d9;FWXRlk/3lYJW[c(CC#%;G?b114!0It:3`j^?
%EuU7B9J]i_ET15RU`:$aUIf*b4n:$2"$8US<jhu7#Wh,tG8Fd&P^80Y^cCGc"(pr<`;W9b%DHE2itD09N?US?qP9*1rBTY-o*K#=
%GT]YN_W6Hf5ZXd%`<D&'C,h%8quU]>3/&/i<T\I>K7</)7Vnq2Y#$c[6`\3,XtbPX8m4qTHUZc)7e/lsCnBr-W&"0;/lA'@%iHXh
%DPl=4Jf:C_+Bu0#/\8hC(c[2Y.)r;:$qUMWER`3gbXI]PTtqW[+dSuF!(0^n_GEH^A:Ol&-?"3+d?=!IN>o_\(MYD*`1[Jm<A%Lt
%W)J!^Xc:G)$kXXsX:<=2D926[jDB_9:KiTOi^"KM#2[\U8^?nB\[iW0Cd5*Hi@HGua:P+&Zc.\D)bWPbpU%S%/Zol69r:Ke<iN+G
%ZQsm)j+ST7g,uZXG`0,&i)>g3PNZD,\NEW,R,t[Z,`%J[S`R5qd0aDYGg0#?E2u6NrD9Qd(f8LFY\aS)Po/0gq320pIbH9:/^EuN
%R*S<r+-I^oN!,pg2Q<<I5l*]&e14Mu8OQsC(DFb9"=-?1Z6sSHbVA#`(QrX/0sj6@h7Sgh`Om.OB;!?/*_6ou.?4nTC+8,n!efE>
%n"j#A?m!2"BqDk(KC!/8Fi9TH;N0DFEGU#&#&u41TH[uJ)=hP]pGKfPj/V[/R4ERo?P:%4k,:q;J]?.Mfj,=GeYd6Q<c-FP6F32J
%JX)@PL'/.K%UOZ2f75b]V#WU*7Tj58g0AGd]rYCsdhGs]8#RH+&!4p[1:Ns.:Ya'd:)]cbABVutPDoa>Tcp%q5ZPq3)HK\S&^2,;
%?%[o-Ep<rr8.S9=f&WEa4Hf_;P93@+J`^BK*QY&dHqXkr.eu_f@"06Cl7n*]pB%/EVGZKK@arM%O\M0fl9OB1JaeSN?lstRL3:/1
%gpnnep_FS]&Lib\-(>f^i';a4^eP.X'p3l0o[:CTNC"hsK+qe!VB&.MK3?L8X@Ym8FXQTm4Y(Q*G/Hl-r.&>5?4mMEC`u"F!ki(V
%lrl(K+fVH-op%_&hZ1_g'/cJ@r5:u]EX8%ro'/^i0kh?^/3'61o0A4Y(Xb.Ik5p\-+=nj-NB%:L$ZcDNqaR[F_T@[oBb/NT$k=%\
%#F+L!^^<=l^P/!Kb5@s]#eH.mRth>YCe4IpR&K]uP9MrP(lL0f@)k:j$=:r,A$^p6IZhGKBgkW"VcFAN,1-KN'$8Q3E@PorG(^K/
%UKT9-8Tk-Q$1%@O>`RB<Fi;#F4+?8ioL"26?q=f2Z6D'@LkRWm$U)PA,*'__3eDHm%XN&W11W%*,lBi-$9S`fYK7ot6%1Hh@0Ck<
%r@e=OQNg3hQKe]]B#:u>1W9^[atg-&=Jj-hA<>U)^;c)K&`C9fS9*(H:*kH[+lh8:6"QQ3n2Ki6,(q+U"=kB\L1+3eC`1/&ENZGX
%D8p<L4Ao;47'aGh0ZtS7OW[2s_`;A\<R"nX$NP4W@$ksc]#4>%4e0WIdq96V74K?LK,G[7=fOiID%Dh\1q3Qj5V^*Nfch(TGsX"o
%pGKN6Ms+(dJnqBhO&H4)rcb)OKuW'WnD1#<fTqS/IcpBdN3(&Y[!B-'?0<s#BCW6"brlLr_\eGu@%e/C[/"VKZCJr+`$+:G@-9j0
%].T5(dDeqIS9g#Kd>10m:EOgB)uF6=q.1B`"2=8L4.Ysn6J$+Lm?"\o?Jf5]kdjn@gPkPM1PR<UKCp)1a1Sj]-"h@`n.,U&'Ra<+
%3inIFK3ig#gkop>L*K9:hHPdm[;gqn9j9b,R)0Aip3W6$ZA%I:Q&i=ZW5,EYh?_p/Tc&b^>os`e9HfEflV^JP)i0<Y3s'Nf<2@(?
%grn8O1Y<>ZA&&oCH5EIW]COt/md_XSJ1jU'/TpbH**!IpGX>shS3bRr=%',b+AGR]*;Sm(Q"*-u>;,X?UrT9VIoNP4QAS@q-HUFS
%e+GH]HBaCQd.N%u6''8R5iARAYh!I&N$Pqe6D+p"HrtH%?Xq^N8f'\>&T(i#2lmWsC']o0N^O;9j=>fYUUFd!;jj"eA"%"AASH[>
%gQCr\W`:ONc[ZnT+p/qjLUn3\=c(T^p)`Dm$aPgoP'/G#$6;lQS;A>rp[AeHEKB:)%&@TN^`l<*n:F!QY16L]:ltB;YNpmB]p]6U
%f9ZiG[+Jg+'tS+8Fi<ZB1]3I?f>XI81qB(XX1D=4^,4Sb`JJA5adcOI'!QC++`ZUW$?@t[nQg5#_P2gG#\ul[jn/d!X;tm45urXB
%)rn@NC`ThH[XF.d_\(f7c1X3\Hn;X/opd*gfDWhLp?+/TL+Ts3]VKLp"C!rE@YQJ?`-VX=a9%&Mk'_o=;"jj(N1rV1/-Vq\&(m=7
%5<H\b56e388M-P^KfOY"3bjhQ2()pc_sPLWQ4HuHFi;,"J8h#hNAcQdLR`47"WAAAlQ@o(aJgid9e.UBn"n"3';_BtP-d"`000Vp
%#p/9u+iG#qCE'p[SEJDl!a:0I')\338;ue&*fuIV.2,$AmjDdK-ZXZtrLaTHLE/^r(hjMdATtuo#W\D"2A?u.'BM&fb%m#!83Z4]
%\25c\s%#n/aT*mlNkKcM+U4LO@b2A;DF=PfRRsf[j_Q]+(jGn9S=@FZdDSWS/Deqm;(UhIGmee<S,jGn`>6&iaJQ=l+u/Pm6&%J&
%%*>br&Gh*;JZ6m+YS`H?:I*cd_>/adK^RJ-6\<QTiq>5aI(@_LOXT;E_'$2-6G!0":AtZm]]SP=#Z*QYrKpGC:dT,"NkF&XeBQ$R
%f#&3uq909Tb6aL>`*u,i>sHD<+>K9("NQ[KII7XMd^1Re,JE=0JbO\RH?*GOmDsW>O>!u-*V^Vr`YOZE8U;R$N"f$_@Ync<dPb\R
%'B(:;9j%E+4VlZ^_ac$Yb>Q2+4p47HgE9XW!l4RJ,eH<Je$4CW3n^eN?$+0R1`S9@W/dZdEab*G6%\INYnq\:LTlHp9bqjgo0EDe
%.:eTB3O^+,6%`LeR#0h^KFflCf^.'Z?&5e1!Xh0[#U]QQS&Gg9dYj]kOk6<IRBj7*leGn^o]-"d'+JW'D)I_DXMe^XP9l.Xaa&&c
%nT"&B(=7a#LF<Mu*7U`&qM>FhE3GCSn:1,W\pn\'&?&A6B-?_6OgXAXYHd_="SfP$i;*ifZ9(&21sWBA%/B`cXFInjr%(%/+bk-E
%"p`:V+2Kl)YpF,Pk70JRPOGpCOFJl=cd4#l>=iY.So)%V0T[,Im4`12[=/PZ&U-C&k&iO&,kY8,Nc*Z:5YSHUIDCCo%2n6BBDKn*
%d"p?s_7N>5JDguRZ)'e^Kf$\kNNR6Tf+:-u@Xbq7rFmY6#Ga#5]J9jI7^ah@m3S[XJ>I*6\`,H!AadSuMBc@+)IQ0;`![Pt?Q.,g
%]Z-!%<!j(5^<+7WEKJUR!?,!>P@;0LE*oAD=@jhoGAS29b_$jjS5*$Dc.C'>[Nai9<h+0E$W__\cR.R&#UFQpkJ6DV"bQFH+MDI(
%J2@=jqS7;P1d/$^@o52o8WG)o!+$U`+O<m,i5,K\4p)q5S1[[rfBC=uP5UGP]SJX8S2\fOfc`!^_R)7c-u"I8QEG$:gDPOT?aeP-
%&1jmZe_5P[S=4^XUu510f`0]\ni)m2Ac%mH'K`?`QcMd'DOE8%A?*Q.98/m@KbI]I?r$1)`e;PUo!9Q]"1c.-br&Q"Z&*=bE;l?n
%S3_]<gQi((i)>i9)i@Da82:NK>=r!A<!_g3+PY::1".-/e/Moi&Ft6J5IU[+PWL1)B!*U^hj,#eZ5965+6KCZj'&CO11WlK^;^Ri
%dZC\l*@1f>]R&Gg3Q*&\d1090a9Qr!&RIVdN+l+'O:?g'C[tnRb7W=/@JCBJ6:B<Gcu*AV+rS<k-+solShqGF!ZA3D0?^^436:O<
%+m%I"OENA;%%T9Pq\i13+D=RgaL`Ka*95Pj3"`C-4rFbR/mn'9:(khQR6cEM6F$5'&1dHRJZB+&>`T]/\I@Ej^^D's>q'<7_'5,4
%%,r3_T]'H^.I)!Fp1oP,T2..?kVp#!;dQ3[#rX0FA72[b#a_tV"a(BPCZI!%$BTS?MrU[6V,k.6k_qG51n"n5@?b66g-#53%,tJJ
%THU14($(]<mV@J+6ZS4"oa4n1AGo38lRLs>J_q.=lG<Jf)p'GL,9VV"XNX54L/cUqZ4XRQV%?*I;Y_#S1$,E9jWLD5!`Ysf<JpL=
%\p]QK*DuB"KpRdLF16c8N?XA3/WsLR&3i8n?r,WA3MTW=%"GMFg7CY)10F&Y[&t7,.'B0>[qdOI$mVgkY[5_cY7\E$(7MusZPEm!
%G$p7ck]X(`@&/j)CB;b69W#-3lm[(NBWhJLetSC,Ng?+JinH8V@APgrbSTp=.l<TD<//,SpZ/Z!WMt1N6mC:9G!1lo]_A3e&lq8p
%4S0L&CO%pI9WC]Ua2d:KA['Djeu^3SV662sIo]R#\/("'WeaeXLAZqKI>r2GP3fm+(kNF;Z)b@`fd-t'?s&?i]H)WL\dB#J9,KUa
%.W[,A7IPYd`:I,S(%9&?.M14+!=N@?<C)(*j1\!-B#oL4e/N&_f\]F:))WP,>tO0HPRiro#Jg_f&f<18Tp$b';O-LP[HMb$0+Ge"
%Tbo9E_%B7k<g>suMZp&8=]L4SMT1((nB?tPj@hDnCEU3D46::o2JuEBPA+eQ`/c>N8CfK"?>3,+6YXkFeKR_LrA-$;RUB,1L`aSM
%BS]ekMYiRPI>-lP8R'I2g.smH5$o70Mni<P.ZZ7]4W/&r*eAV$dI:2Cf_",^"hIuV#/iPBdMRAu^bQ]'mXS;!7pmuEQWYJRm<4&,
%/.5:VeVp(Ld(`lhI\(]6'k6A>K^B@"onX>jQ*)KkXT;dtO]=c_!-QG0E#ZoHSn\iX&$41XE>5O]kc/l.HXB\h4\A`85Ea,A&Frie
%f>mA;TMri#H562hR@d!jCF%DV^Lg2(!st72b02@TSuu]khI4k'!H&4#4r-AebXN[c^l`L@7u=ieOt#X1;Eu*E%H^pP!fO?9V:;&a
%m".NC\pM0BF*(tarXb&-`Ztf8!>>8P($j]t3=DaMd,uO`+cs'q&e`\3K=n5rktSIY-q>b,1sjTkP+tbc\fdmfi@D8qP!:-N3&3rX
%Y\fNN(NGrk<u$j+3lipXCbH#83pHirEUG:sAjESCe4,35o\m.JoZSM3limE/#39(U3:tj'AJ!H^!;9!-'+J6/*$T3\i!hlg<5"*c
%QX(87#"A^gh:OHd_\n3Ap(o^t&@"h]ncBK.C&nt?\=ojdN@,D&=CLZ]GbKpDnO@aS1Z1%X+n(QNHP$IrmD>mJGZb,timrZq!`V%Z
%#s7_?Im/ARmUtE0:hoDFOoJp)\)b3l\K;kPk.IDudFN^#"I9T4mi85si=tYt6XFdTm/e1.d2])ZZ5V(JRS4%tCumnbh"_Z=-n1+&
%IOBYn5n+;M)A0@Ej;e#6OBFI`GaQsVeeB/-Ic=*I,@nm[^iJ*gT1=cMe.-iq'6`$e>SS6[M7aZ-BJT:QD^ru88^8KbC1<8TMcWTI
%[u`PsnHgeX:lC^L*,(Z(EKJUP!@giFP@D3LD-nI<L<*0(lZL=^RUgdp7"0`49QKA@-\EX%%gp?np&f'"pd2XuC+Y4%"idi>3'@Ko
%kN=!(qdoXr%Vaj@%/5u\3**eT6U&S"V(:I)edcu@MQNCeMYlVAbQm6$I!B(X@qALN%KMr,^9t*UQJn>DmKhGFXoO)kJ7Pg]gK,eP
%R=nQ7=#UFm$CMth,7'S=j?rOH6p5m+Hlr^7A:atQo@Xr-p(5\"dE&(q,KKTn;I^sK1&52pj9]=='H;a/.0^\c7jpchD.FX=7D\7C
%cFj7;(F<RhLXlSgKboYC3,fr%nS)lb6E#DFef2OpK^1k\C`\Q-@.T8YI>-5g8Onb].gceo#_enTMm^BhT1Q%tjNKU7HM07PS<hX`
%PjHbR5K*GngEmNL6-`9mE;hX$HG3$<BZ;cb/TD&[(1BkF=c]5#YN(P!g+5U9Y7#CH%Z;3l`T&\F9-"pZeR#D^9K;3(7$]J5CpD`u
%b>M%i]:s7OU&%2%;WV?;;tshcqudCZ\1+j<YVD;kB7cm;`b`V-Unb1N"<b[<Nhh;D%%f2i7nhTa_!FgQc,;KJ6pO(Z,eh*'ZP!"p
%j-4D!&4Ia_><[[TOE:sPGhdt6a!riFjN>P8h\a^$=bWL#,qUK^@eDs/]aTh?86\s!Y>G'Nqbc>,MSR,r6/\[00%*T0#B`gJ8D21D
%S@Y`).A+7\!5<97SRdH@7<?&YY)4"4I$,0>qak$CL*R&5mVBXs!(OH4Y2$=_>=JAY?^uPDJA&Sd>@GF6B9?AY!F0+=;j:Yo'9A%h
%lP3(d'fK4Aq8Kh]Hd8hjHMHiSN=2o/DT:3A>),0*1L)f@(Q;Re.5VIRKg<NiVY=PPeC8Tf!Knb?(YHgP)chl7_m?5q#"_]gZ?]r2
%l$_Pp9DQ3,<+$RaX2PWV;RN])HC/%r5NOsEr'g2aZV0AWSEErR\@u8Z0e9J*cDE,BjP<8$Xg3`0mbu`c%MbLo^`<3"\"'mB0Z=IR
%^:;\!r#IJ;,`dB27(LgAe<4m;92d.#=g>H)%Mb4g^togtiNZ0hTR#jZ_U9PG1jV/OBlj=`Z74qX\a8=k+\LCSX48&jbu?^cVhS.8
%$tP^LCFon_9bj&T,IJ5=QW3?&PR7Ld.,DU8;]LLZAoZE2:AnGt'q"W5W?jK*ROVF-i[E#M/([\u/hIf?7]4b1#VW12="%?FJ.Ku)
%"=VJT*9WSpP>;5O]T:VM!5(27fI=4=I4n;0US(n*L-ti=CFK7!WIP[%X[LQBd^64).HKOeoJ!g-VO/Lb>0p\/0_i9$(WMK&!VaAD
%5V#pnTN;QQ83GP)Bd^G9`nF;j(8]t*+m,m\"D.D7's4>58m;Ib&[H-[jX"40$EX[O\;fj0]+#-??&peeaCd&SHpEO$6(cK&0@f,H
%\#$44$.j,tQr0d3'L6B5^bS6Q)F\pCf=jT;_MG\j\RZ1\k#Yu'TQ09GcJ'h!]K=nQnM]qeEM\uV^SRnR"D5U.2Y.YU7poYW*VQ@X
%$8_@N=Y;?u'EG,hd*>T-GI:njTF;"WAeZb!%#\7q2*PWDF"ISE/JX@VP:JA0QSe([F=p7sEn$RtKpd)/rDNVII90geK1df,_9u<!
%b)EO@bWKYu"]3o&0Ys[:U'NEOg/f\.8?]@.-?feQ_<g`P%L!D\cXVMP$)Ui_WghS*;d^8GXm&Zukm5LkY=%1M:LPT=C@MY(R)K-M
%[^0X5AloY=_Gq74jh/a5ekuLEW<-"GE\3%8P,`qadY.ZO:V?`Yb_/p,V>s6g'j0m7X%$=#[f!Y.Z=efF$E$p'!2Ze!b6XB4KVH,T
%CL<cX+i8+*.^GCL-CoEs;Z8:IP6/p+'<=Pb$u="2+XY$/e"MBA&X\nmLV8P9_Fuq3^aajiWYJVWqFWW5?_smA<0]UV]F(Rf;?3Pm
%!`OKR(.EI>e\4@aae=oTYT:4'l5^&r?HO7Ze,6a!>>oqi?oA<r:=dbm"88e,6YOX/D3XpZ=4=_5'MiA&<fPBXQgO6+DSilQR5n6i
%oZa7Jfkk*@h.H8h4B&UjF=Oh;IXcH[=7p<omYAj4Hkc0BZ4jS::M)eKH:(_kqFf#opI@B6l3Og<Bfr7N*8/]6"4hKDRZ1*(oP$0@
%3%itC+!%J`Q>1,34K<";bf6Sm=rNs"+j).W#Z_nSCjpl`.e.+FM^!IeD/jgA3&lJ'ERsO(]/dTXPaSu]D16A&R7<LPV46WmPi"no
%q+!'T0]E#N;H8Iq>;VurQE+1Z9"e!$JXJ#6Y@DC>^NuI&7RuY)@Y',l=uKr7OJ8ie.-atc;VXlc%_!2]gg4Eo6m>:(<fmE1Es=J&
%X<ti48`.6OFCp7^aj'gCF==B7K$LkH`2;W+QKR\=VQ9p'_(tkQ*\G@<f1T*JE=Ei1d'B)Kod,=h)VLN!f[1Ii\K+#tR1Iq)@,'eN
%@WVMgUpu3jQlX:HQ!2niU2rk0Cpf2Mk_gbBceA8r%,tJJTHU14($(]<mV@J/)<.`'TgF<a;Y;=UUj*jhW;"r0Wq7@EdUM`b$5KD)
%;Hg(ULi:[kL6ttPa=h8_f*G_5N#P]RQn,D>K$J9T`$W=G`9*Jn1X)lE`Jcg"/ger&R@1F^']L&gR%^?6("AQamV?>dNN&CoRgh4=
%2(P*n#mVjgK`bqJU/[quQ0''(AcbU[23Xj`KD5W[W+]=.LA@"HI?!HeCj>8S4_b=;]l$GG+AS72:fY5cRA*co`M$AEe;@tLQ`:JR
%>;VurVH"AlQSe,GKJ01>9l-q19pMj<eVA4-il!jM?:h+R)04<"8'X0''[qLa2&X=kBL'I.X"(V4.GWOr?HS$^VUh_YO0%BdAeg+X
%D$?jRYZ.I_PnkBdeu>L5G'p:3+ML8H)Ica4+hsgm?R'qI+)^JpHI[BDlZdQB*Mdr*%OeK$&N%J/oS^VhoViSSI^b1Ci0uNq@APgr
%ba7thCIFL<oZO_;X_olal,p=OKY$9;IOeRo2P_hlZYV\/RcX+6nL2tU%Ul""lm*^D6B/;ept?s\VJDRVG*O,eM$VVKq(<r'\p;is
%&_IJP?;E/U?^(Y'pjVSq$>`G[E/[!ADbN,m?teUdO9%B)SC?@e@[dDRrb7#TofhFLN8Z$OIhe/ZR/"jQ-Fan?q>hZL=(5\"SA,B.
%J$j/AYGR69\.4t;K`Z3Q'c8^eYtCJGmPF3)Lm'AMbk\WLoBq<F_WrK$?a%sgVciLj<=R%JLp=1g5l=&3"q9,jMf`e'.-uWo]qh^;
%I!Rg`0cAum36A!CD3'@]Y2t:*!Y3XmqbGGEiN9l)%S5XtGO)1mACnDL;7=Dd4mlj!o3jmDVF,5Ya'l"k&Vi+5;9*QZG_9L)E1U9/
%Z9rdmT5N.e:QM=>ZE<Tj$jbqiN"S.fNh%H-U"TfE;GiJ3`J,%t_B\f<&FF)cLQSCkqj#$sd/Y/Ua]IOK3B\!(RRf=V3+]S@!soJ1
%iH(Vpg%3(k6=&'FXu87b`^*jb(f4cU_^EmfZFCAj#3:!&YCtn3LV;^jqFJ=IG<,+fP>#33&d;.ido9>SZl@&o!/=g_^W"'e_KoJ(
%eFAtVf?tfE=5rSpOoh:GfXfTK:`==r;(RtL^pR],77V,jHri/l.s1VEW)&BOl;E5*3d&]lUnKAq<U%'qh`2BLEe"WhCmO(rpFKa'
%.^e>i3(cj*A.DjMgA=7Ka=MAoHE"maV6'gB#aK--j!@S"24a@#+6^q9jG*Gso-k+a]9@fT`8T&qm)^^W5'_nUUVLhsou&:,\JcI+
%801lI.g,8V?U<3XR!#Z7;ZNYr!`OcR)F\pCf=jT;49`Qn%Yk/=g<On8/"6ue>ntUngu"t-!m@Jp>:k`D2<AKp;<D)R%>Oh)dl<S,
%$D=b+@"OHi@L+Wdg/f]I1(X`H\5RUS)9/-r%E;m(T9mos+AoEAc"HqY)c%>@SA81A;G02=TeobE<8ak6(gNcIOBAM;J8<>9)'>nJ
%&RJACY>CZ65h1]\^]n-!2(L!_$%7Bp.=EmH3!]`?4r6IuTYNTK-aZj:;(lc$>*.$hgPSWI;X4A\AZZjQ\@)gC#['$Bnrg/(L"<(@
%^gSUiTA+o*1DRs;"*5%bcn24#7L!MjgL:D6>e>pl;/Jr,h@:sX<*ZIQJC9a=#sr5/']gWHq[0Hn"aNhjNmj.JIGRn30O9<aH(m<;
%E.Du[8qHZpm$DJX&T4GIEi*%tpI,Ih3b^GT:tdD'N)6K#UV*=:?_K>-6I):q#@*6bXN$eM@hM1Cogj$TJ3lq\jcb"m)XT_(bP,X"
%)[K([1RM@*!F/h5;hVLr6[;8T^-\li$GTsa]KS%#T-EUqk>j88WZH@^5D6HLr%'Y`;DZT_CLoP),ln6,b3a5@"IruYnr`=,53.m:
%k-=#BPPI,S6`m%l5hSO<e?R1Y^e]RT:;53m1G_Vt?iD5S_=@nSrlB.Df#o.@*O%6HqQ#e]D_],s"75>@^7PG]('Og:Uk&S@\;),<
%(o$jR\YO^D_X@QI\GE8;Dus[jI^-39K$T\"=m'%81HC7q!&^G,5#?c''Aj5>4#\09Q42NOH"`bD+u\.m*o_OacF3.el0S#6TJn?Z
%36I`j."^cO,RY/8-#?X_<`q96ODlpm`RS<7V1NKu,(*X@lU9F0Q2V3qGBNP8d6nYFN[F[EhPIlcTS&c]ad3SYd*?1hg$eZj\U%j(
%TOW-Gp,JdeOt0_4I`kF18GMO_`RP.hER_:!RUn/;R;l8QJN.6XTOW-G.T*$k-%*\:I>*Tf;=:3_Wk]LlHmFQ\0G2>Lne(Zb)E^2p
%\S4YrS?g%F9OmB?Mm@t#p#N^=!lSo\QOIO4*9?2Gd,<@48J24%4om\;3QTL@[ZMN$")h/0j>'6>?0`Uu^5SIW__;@j7_E3O/udW-
%.0&p&W&UrB%iH0giuhTCA1Zm)JC)G1emt4SMF?F1>=U)t\TJ$=WtBp'nh/pWHmJeJOh*]$8ETSONq*mWp<$eJlt%t+c:>iC=R>eD
%D8FHH0FCmnI*UT+cGL7P9<Y$HQfk;gUd4;6DXtr6]j:k+koP;>F(G\f1fnI4"R>XlC_:8QP1\g!--O5R?P+t5U24!@Hqai`nUhTP
%G'#^a4/iP><H`?E-[%Jj1ETAFY2u^cE6Imj%5]>k!FN?!@`MHV4UsiBftRWLEqq^*]d1W?<)\#1WP8159Eje=Oi%MfaMH">?dk9K
%G!r[em3!:#]fX?H9fS4l?OLX7$kI'89<\Y+/:i/$7SEf%b&Q$eOY:$R,5-%d1Tt-DI\S;=2Koe&kM*ZE4Og7[)sQt)$i=(V4k5Am
%R.O\d@#g.;E3q>NQCSq0OM*_ffRPLc1liY<#ILgF9Do$WdFc&U@qQ)Aq:#BhNIb3.^jW$&JT9bGL\Xo,_PJ=>msIin@j]=7(ibdm
%o"<$OpIf6A7([AEPI8:?i!U?c5,V63M7?<Z%6![\s6@X>5CWInMU8"+#uiU;8/&QMNq3"u$HiX<SD%X1E`qJob77D"`!baU%)^"(
%_6Fk!HLkk'F!bC)oQK!^741*&%RNM0jU5NI`R+Kll`2caaUio@OAh?JZ$`dZX3)R!`H<nu!HKQ9<IFT;X?C)AiQ-RJW!Kb2<$8?W
%9!JunR=&$1W8DlY=J>/2WI34)X2uKu_0*#1,'^)e(ff1\*olXFR=3Yd$H0>S.2KujDg_#T7Ws6C<3f'H5p2\8;M5T?X^[F1jE)j/
%qhibT4Skm54B_.OQSs7pg>mKcJ\C\nZJnGuE^/i*0N?uSK]<'D:9MbhY?-;Cod]J&9(&U>:gU=,rTc?!8)-()=:jN7OO*DK3%8g,
%-r*r\`s&Y^5kfR>q!JeK#W&2>$#.H9)UQ6*"-s(E(S1WQnH^-"8X`!;?.i$T+9u:8)Q7,_kLGc^ipbO%NH.Z2+;#'Vb_/@Ao>i`W
%%B"H5Dc(72#lt(Dl(<Jo-luRYgE@Z@O6)_DGI]'%I3&O246-BXZ/Gn3jlo8Z8T0B32\W8'%S2Mk%L%69/DfD@"<[`%,Cg>2q6hkc
%Q14aD)PL:'ic#%q:51lA2g'MdBpZ$5M3<5ni"V[9EXFqH*SNe3P@C83cASJ]D4#Mr@@N3^+uXrmeAM_>*-]4>lg2S;$XE1<lF9H3
%_K'N(>gTR!@\B7<!/AEXDQ[OeQUa[gXp'Uj`AjJ+I>9>dO9u-s7r//K0/d00#)gshL9Gthk)'h-3p^,nmeLlsguHjU`]:X<\D4P\
%StfQMKcA]t5k5m+frNT;0.-@jO`A@,[UMt>P@!W1SUh/%_.LEp2p!Z%I-W;t2_rdjBU<$sm&[!hVSdGR"jYg+06$s]Pg>WUW@i4N
%C%fcK_r]fkbD2"ueRL^!!J%N#GX`1P+JC,D6QWPV.(*09D]-tl6qepQh1^6c;O%(?EQ.[*4!Oaab@^fh+oMmKjr"SD0gD/H!"A(H
%*h6$\%`a,!og&`J#S9VLGJN0d\M,`]'-E?2&EY'Z_HAfXiXq=5"]!4R(eDPSedd"I<K]%!+=4,9Lm*e@X''ht"759HkF*"Q<JWX'
%+[Af\?l]J:)Ul2cY,`^Y-`3K3U4kA)"`n%7ejI1.8suY'j0]-'R@FAB*T2$0T[e"g-d%.p0)h%XHau9j/;e/VPc>/O,<uU+3?ChH
%Nra)PqpWlgo9n9-hWHpl64pn0Ie*^ZIo[@m\e4b71i!s6c;8'g]c45@c"SmM89X<0OM$rUmb0*$jL'qp^6i#Rj>\N_3L$PJpB6pe
%>#`RL::]g\Y[[FV&^ol&Fq!G_%?]iT-^SlP:nIf/BG@+KMlK6K'r-RhKNU2=?>Lc+_%f%V+;4K(%Uh_)`(Ip,OqgTf?S?IT#e0oa
%K^mTCI-is]lW.#:3&K3WE]=+O8('QH=iA"[\2G#@hfl3X=Q<f%,QRlu*o]puc3OQ+:TXkTe'k!A_j%Lh7PY7+1Ld5/UCBM&i1;oZ
%Not]mi>7\gMn!5lVcZE2<TWi?k:MkoK^m:U_I<4A!%GF)#ZJh5.1j]u9tl(r!Tj#2Xe#qOhpu%oR#q32mrL<j-S2Mjab^^XGlRKq
%W6Tq;/`D[(;YF6V`b"%tFbX>$rFL485bBic<ul^f_dJSD,UO4KAH53O!c1?-c/[=H`&GlV&*f8s)%lf4kE%<oVAEWnMjqXgHD"M&
%Med(d)Fpm'jWnA[E5tPqoA'ceXQ0BPJiM2rHXtn4dPcDKE/0.M0hH+A?A-&_67HfD5^k^9]ZeBWQ>b(l5@]KZ_CsoOW%%OO]gQuC
%i@AL@8Q->)g*&C78DKaj*V+(\\ap4427T:n2a$ghe(fel%3R<t!]]k_oDoNYQk!HqSBgIEbYijdJ/p<C!5NA;!(=BI3(V%iLc>dT
%b70Ka2E!<En9r*^aoa@.5WE_AM`;u:TFcQ,]2Yq8b48`98m,8//P`h>U\BR=Eh-@Lh#O$5#DAu^!;X"=/)HDCpA!EX0UZL8hogcl
%UW95\aAjGenlu3(nH":_"Gg9HFg+PJO1egq&3`U>R>!Ia=<,G0j@qsMK%Sc$S_rA\HF@->6m!Vie"1%-MR5B23&WO[/&cHjaOH,B
%SL2(G'Up^%6%Poj@aG1(E8781[mEHlE##^d8D4qbaZ9qpIq'h5fdsq-noa!&0RCrED^Xsgb]NO3COs"@0VI_-@0S!C2hPYYdl7K*
%f#V,65`?N@"$>k;e%d'T"^]l@671U<)L1eTPoU*X%opQ,Ti(c)jMGFcRYfRK/4tg0)JW?5e'@aJWbcpkV9g?O8tkfi`86`@n(JF:
%bBI?p7.@Jk9Ik&)^h#9K'cTmdl8lK2-6aSR,^1U*S-MBp4nhR2jb,^SgX/BYnLVIQDTjQPPJG3s3ZUj)#eAT]W$8OKfLW!M&tj#[
%)6G?q6F&H[h(Qas5$1No7:tqdYpj@c4Y!BL`)GlMM:5Cs8I_s70`33a$;r*B7%&Ht2joB=*#:dXPi_o9M2t>(3>\*#2<Lrjc\:Xf
%2<bc,#QTrr!.]`-W_^-_Vhe$$j=qn_*(O+g+^I8=,k"am%!Y5aA5U73`?IZ7Ae?-f/laWHeg'Us2@Sd-3K?+37#^-I9YM10G<Q/d
%p;GQi%hcJYA88`=+jrm1o><EI`5Fi\!u;HIrd`)WPRspVmtL.?j!tXPSXdnZOK%CAJt:g-*WY.DQXD0F\N\Re*HKBr4b<,@iAnVS
%J0^?cFqrQ6m=g,pA?upb%B`4`kt]]$MLLl:$/mk!4aIG.P,N7XHO-tATN#F,%;d4NmLls4`U#:a^$5,oUP$XEZSrI@7hDl+CNJ's
%jQ90hkQg#6h:^\UE7Q2,34UfX*-tQ-%;rYkH4D&lbTeEuWDC4#an@RM8hBZS&`#`JIu9EBc5[+<c>^[[+:7e^:2YUFSaGdFiFI*:
%ao.=Y'4C74_[P,;Kk"eZDZqW9%7,4l),$*PAuN6$@`6BN2qs=4dQ>W_P:r3__tR;OgR-YOaJf:niCGI#UmlVEc9VSPOH3!8V!GAY
%PWG4cA$k;i0)4_fBp/!"&RF^nr-.R-;.D0k@uc)U6c1W$CRs53'_,!0?G`&!4K+d_T#"U`dmjCXq8$6RP]*_dm=fLn]'Sut6UAq&
%9l,%r,IWbD5_0;roCX8]%2d!Xqk2XtaZV8Xb+XqJFXNbpiODkT!9H]T0H45aHb31H0S5j1(=u<uDLk<V0hY<7pJ6c/BF5#@h`qZm
%IuomM-90.;.dl*EB"J'a!2L^iO_i"44%QV%#4n.V!"gFcnnL6[ifpfU/$^Du!&l3rS&*/jZj8h[#J8&;%m+TcQjoQ<Jap[##.H[<
%H2)'8'2B)p3<SCf`?o+\m[V4*]9P])VQ#M%kiDqY7n>=GXbtdtAN]dg]81j<.?hXj>=;SpQ+>TsEFm3p@S[C7m==T;J8ch\Ck>oO
%4lY0L)3"H?I0TkZ2]'8Ab$pk9LR%V<J=&&oWkb;<H^@Ml5j0im/7e5ej;`[fOLO0;XeFB=*,LB<_P.,b6&$t)ZRnGdO,%N'!jWAB
%%"!t-bn1@)AsQii-,*Q?OHo(-hH/-<[rBo!QZHC=8tF1V*81n>eE%JM#eq1f#7_+aJiEVqLc^uKE'd)4&=GcsKZ(Q(oXbZGE,%En
%DtpbZo5KE:-\uZmDE;\Q?h-;d_c+IHn3LrRZiM]Kb)L*@NOG#idh#"2eHNUEC$LorK\/5%nk:$Oe`k/qq^&L@J0d9(V;jWgW/''D
%"@5oR=7<J3@U*dT=fOqBR]"gACjGDVa@e\sE/JTjjGY?L`ge63'o=7RlYp\e+MoR0?ma\s_AFYK0f-1YfF0a!^"c^>:*4KYHP"6p
%k?F?LUb6a-&sr-G]a;].'H,.hjcnqGoSf.'&EcaVl4Die>&$WDJ:(iUn$a])_)Z14O10`qH20l0WoP3:^oke;F4n5pl;u7^i?^uZ
%L8M6KXf4md.o"V$rh0j.R4cZ\R?#^*Z=P@N1_n"1N=h1QpYaO:)&3B9K0eCQ3<Uc`(KegY`iS7@j'i8q0=3`,^h[+fPa<T>6/^i5
%*XaZEm(6:['O9[35bHMIVBB3fcpbL*2^4f&2LV3:2_ufH1idOr>[C:kG]ab1lQG3tO;>r#JFFI!1khju#0@6>Bl"dY+M_u)o8h7D
%Pa)ldXLP]sVg9CN/on##c)pQq#k4C\o'h)a*\uJIQLSrhq]qrh^f&1_pjN9tD"\Qug&)(/52Ur^YlO*IN;X55-fl:MB+UV33oDD"
%(p45A\3)ia#pT_2D(p_cj[rOGe\i^H>M`on83c["n9jsU+FKJP?pCF48NZ`-`fPL<E<J\L%34:6T,FUrSA%]29j.G>q*cMd,lgJW
%Ng;Kfjh2FB0he,!,^'Sk7@2V^HTA,c?rnidA)G?m$j_m]5TZ.l4^>JIjfGUkA"F8?\mS4hagML@\rj<UC%,j3,(_'eCbIf@]EoKA
%R1&Z#/A/k[M?G+,ZkG6rLID1i1NM,SCmrA@'ODdfE'=gq!$q'5s!-ZlGrl(,MPhF;)uVs2Ku=19kTM_=H_+DM8MfN'6M>)%T<2%Q
%UII`C2b)R\jWGk<ja^'#&AWQfBq.f&$qTn'>!>?q'^D>$hi_--j+62Pp3BNc7gM,!D/'8fni6Y5N[=<&iS\LBI=r/`2.%hAWT>N`
%lm^E1%AJ2c@KtZ0d`^Jb`jCLem(/]dJd<Mq(6N@O)Wr;t!D@9<P0!t+NIZs:cWVMSmKMTp>(E1=`EX-&+#U'Y(>3=cI!F)A/_!d1
%%S3Kp1?D\/3U1\feF7>kL$U,MY1$d"/iID@_5[i'!V$UCGh%irYE5TWi,0*%U'%h0ZEbW@c3hVaH+g!mF$SV7A,mHET"dkhTT]P&
%>K:+bP5<ie#%pP'D-*#X+=)RJJpDd]M+q-mq#B(F[T;^Wlah:krkj!n8.]"+Y,f]o;A09<Jcsbg]U<BDeSa$;>I6RApto_D0sBo5
%rK5``4Ll'hhW(]Khe(-%F%je1C4,$IG)3`MT.tj)mUG^FJ]V-=+bP8e\kHbJGHa*Won%r)`]s8:"/*;`fJ<_nI4i(lEG]?=NYIpW
%6-Kb?Hn[oF=huIpOc,2H2A;#mj=X0J8:hiHh'A]XcV@e-FdJ?gQhQG+2%V/!(q:e2U;HuJ)"I6F)H`N-](g'5;TK&%i@9nk-[?H'
%8tHZ\RKV:ic,m0Kbf8:$Qc,K2!Qfs+RL$QBn9C**OBbL79mN&_ju>=j\r&c*p-Ea1KYAj"p7ZY?[>DTfi;JogE)ha;@2VaAM1nn(
%G-D]Zi8Hq;*V(K,oMP6'?+(UVP#(!=b0@$9\;0>tmQu0Kk:7QjYo8UhFm)OA$fnh"U0n$(4pM(p?I#_Zg^Uc_6>GUmKDfX';7A0L
%X(jYYQ$MS;E`2_n!R5u3NnY/#oUP<mf-SY%3_$dEEpddm(8`u#VZ8e2]cG1&86K9V%X=^e]<SgIS3!B1p9t,b;KPc&a;36ZpkGM!
%/+:o;UbN-Op$^+]B<UR`=^2n)9g6m0G.Ho8ksp'b!s"qrU*]'cJ.f\%BDr>.d@=+#dj84;`SAV:]"(>5MV(_$RQHZOR)!JSFXP%)
%Oc,@WXcAqt9hd#Df3Srs#7M8MWTcn1F$:kHQNMc%0,+&"!2SuZFH@hC4<4E4D!LY\ZFDW=fuZI9c6c]N5aA[&([\ElNbC'"jLBCF
%Ln%6hQ\Tg(U-GK3$*s(g'$=,[Af[;^J2HN!CP/$6^t<Q,X$VI1]OPsaot5S=3**$\A_cZu8PO1,U4DF/JUWUIQJQ:BQuJN5>J[4f
%q@[=Qa!'eCK=Xe,#BgfU2*9lm"M"t!Op/p/Ud,hW\j[gSQ&p%ponFemE9RDc=^B)sa-fO^QTS,#TiDMI4^M1%ng=Ogm^Hl)+ce_h
%%".1d&8A7VTf*cMF[$Q\<CJ8W-.AXA3'rg2+E9@@<`G=o%"f&"Wsa0hauI^(!UTJBC61k'YG]&p79`Fn*DK;OC@lRc8,DR$i,ucs
%Zi_\t+k9sbJ1@ls?H6"ce$tErW\7lr+m=K=9*kl2?kO)u]GjCa?cku@Jl,o(%TBK/^R/c=RYPQ`W$cnBBB")n*KSl2!Wt\L`lPc/
%Q,RbYg8;\\e._P:,W,,$AAju(@+L!B:c(e1]doYd&m70TF`eFb2oi:1hWCU@o=e)g2Y<<^qq1MKOiTELna_S6R!MslinCX;MjecY
%<`er$DV&2;m/GQ73N<6IVDclLqu.W'Mg'g"HiN[f+:\aGU@b&FM`<+sZhH&`7)D.,<H._]abRR.[GBDc-h_i5APp-_rK\h[Bo8+5
%R'BqIGf=@]L64d0>e+#kn#.ARTIEWmo8LoEbY;59H)/P\<f&''b<+Q<<JnN['4HB_Wj4CAP@a$5b0sZ&4W$.0Hs+1F6?No1Dl?1o
%(i$%&0cnC:ju&^EBkm%M/)EJ%,oU6%!pe(>PfYe<:0bc5XD;QG4lW2.?#MPsD2A'cCdmY(5seht^lI@rRLJ5UYn@=1DEsfnBoU3a
%i)NmGNRSa&`=B;sOVS+`RN8&4)d->47>\"-ULH+s;0a+aBO_rr=Kt[WOiJB;;59b/SkM#iMn&t#Qhk^EiLRI%4>Wnf5c35(&5I7?
%-t"g7]RdY/T_pq$\f)4Rlb</DRb:bU=&R^R_]P6Aj43u:ZZOh+__RK`kG*qjkZnU#jb;)IR)Z;S;sgS/ko0_mU;2)2"g*BSkWr-J
%f;X3?_U^.>._nYo<Cn)'PfYGe9`t3+?FdmY!rki_Td*Em"HK:UieD7Y8gPtXGgR>Rf@Z\sT#W!Mf=BWUo_uAg_BT"-6l@(e\'7;/
%kp\-aaM$H)5Qu2;3LIG'615=r:XM+_W'pcG^+rg"H%T"OMEG5;`Ubt\+\ph-fg?>)&#^*fI-(oa*DYNlNhED0i^jY@h"%*JKskM-
%9O>EE5Yj-AOVn9O"R`3RA=YF^`_)&%-oPn4dUuQr(/e10ZIBE(+aV](\Q6<5V4'Jd\oC#di/(:6dD21h,;FO5jm>d$5?Nb7LQ-aS
%<p!Xlj`q[#afBUH@g%?O%?\-R&A>f@K\Sldd&'H^UrE"r:(Sh;cR)A'.T!<l<*/MZPn$NgVs;u-%Q$9&dBG/6H_JiRA;cEV'7s3f
%WrcTiit*RTG/2&jndsddFLoX/.bM\m#Pmt&CdPa9MUZ'cS9`Ocggj[?c;-RP1hcU0,$;NQCA(X*8aZ>le'QsSh]K@-!3DoPhP(ql
%E`D]kQX2O;<Dp4&GOR&f>U%9Zg*)XF`1Md'=4'?Bnh2oXK:J)-k8Nnt-L7Ls]jO<u.FLF5[HCUVZZ_3j?4D[&bkhW]bT^V\m2nmR
%9@W(//tc.LgC7KTi9e=RW7!Xn+ba6GCh9/H-Q-roU^$*04eS4$[)`o)Dq<msBm\'&lEL#QY$?S&5H3DTNM`[lf`X_t*<<m%$jSac
%X#@CNH-nq\TP0Ej'-[A/3RuA4O??)TS2,;=d*`m)IDDNeFcaZRD9790<FJaU[6i+i[J"IYH6PKj>MY<6K_f,('Tdb(&/?F3=*W]`
%3i%%3XF*HSF4<IEUGJgT5m5VrRDuh%X)e"Mjcf`Y0I8fQ2RjF+T/0C-\5,tmE6m.'fbVD>S.[;tNp=l5\MPmoT`>>"s04<<M?lV/
%;?DDu7XNEH]O0?W-GZ?7l&Jj*/adA$]1"TUO.HWr[.O0n&)Fo2Dh=hqA.jV-=P<NXGp*i5$p_=`0]=I<9Rqink'kI:!Y@*dmkCf6
%$":]O]m[$\)4\RE+H5OeKW9>@AFWQ7<<3OMX'24*JkI.iU<k+\ZAP)Dg0A_g_pJaMI/nP4`m+4mI>+8?d/PI]qc#6D%\DjH.rj[m
%E1Ku!,!62SSgRl)MdNXOJM@aFNYgGIq%<d[!A\UeVk'q7HC;NkWnV0WjQ7m9[A(C%GKhB9l:eT(i\-R3SrdWYK=L4uO[us'V^Sqr
%H,?uu8/\9^m(0M>(mRao=qQ1q>`oo:,f!Q<QcMa)\E[6-hOh$/diF'5#D=V3n3n0EbX%+>br!+<mSag?&8;_4Lj/G%KOUZ%GmWPt
%fEBZ96UY?*=%A*ZEC!bn($ZD6D=U#14`/+O#^"O7=%7PPdm-=0g7k`lW_(q:/gX.t(I\sQ5L@;joeRh,+<7b2rk*f<V8dZp>pm?n
%+kV]D9UGO,^<u6;('ke5Jd,D(_Tr7Wd'\-Op&m^1hBXqr@&PQ:M1gW,_;s`k@[;4[(=Ad!^4/$NmD7Xj$o$0Dc5X@G\R";G[=GA&
%hG4A-)L)N%Obc!W\""Id@eC%gd:db<dG'u2jD4&q9l;(flcc"5;Yo*u&9k4__Ea8rPSU\;q5e^pAlb3IT=*BH/(tQj$+TE`/)(sd
%-f%%*`S!00Q*Qr/lCF#MSqB[)S8jAF%8S$/6"8#"](FfL>@\U?:<.u65hLV]+c&6iF`eqg$*'m%=G_DoiB^\FXNcJr,]O[APY&o?
%=0plXR2Y6d+K.?u9(.qIR@R=/i0^JCL0$5K2<UF9kjs)sG]a:]OqRW4-8UUA_=+*A'VQ>>nGNqkalD`ePZd+BE@V3-b2\R,\:+j8
%7XHq_l@UQ[8(-%$YVo?kEn,4D/1n(JXiXg.a09YQ"@sApBu1%'6je0JT$]s6"sK)jG7SOLefJ."O!-E=1l8$t=:Wa!NnFOi?XE#O
%?kW`AFO=,(eje:QJWL+j.OS>A;1LO90t:Ktb)[hi3Z.Du1=Os*W-+<Hd<r'-_Bk>n.?[K72]8)$'bZ:ZdJq$sNN5fSV'520)@th]
%I7XiP7-LYX(DU;-_?52a[Dmup:Jp-qHX8Xt4]E<("_$mRl2l7*:H*]D%g(V"BRrHjSLmnc3dI,d_5&NA)QHXX\O@>`a%i'sSEOPN
%RZV]."DI6=B,+3?5F#&SKhpOl,X+dF)7M'g'IF?O_5:78KmR,iMWZFc$?6bYB6iR5GRh!?^E(;_;MNUNI9'okn0f'UfcobgW'dUa
%L[`[F"KG(07<k[qD8`2o@[[eZ,E6k2MT<"Q03kbC^FE/1*No4c&s+E6^t(5.FXW.fZ5!ZhTb/8C`b$iOS0(ro:e5=DM#];VItB@u
%o"F&p069XjIA40+c\a\b794YC&2>c%L_gH/2+>KgK8a)7jYPmj%.H<'83MrlX@^_X1dm_]mdo\;J6*WnAFbW[Fq>Y8EDaLe_Tb)J
%'W+d@a$g"ubM:2:"qZtF>nl5M[.`mnlZNUNUUV^W1Ql&p[u1;/:q9"p./$D]5c*-I>9rM$CH6nMrcV;/9,sP`Wdk?/;[#-X0*bCo
%S6$@bGg7I:'Q#-V5,HBUDrHh9@J':CnCX8:p;K8WP`Tha`!?@TjS<6-5dRFu_\JL2bu9VuW2:G4I9-1[V2nIcd=mRLr3_^p1DIOQ
%";'<"Gd;50r(HlY8"XU*!&n75EC=h/a%cQ[-b2uX5i#0VMe=m5m*p7gV?;=EC0ebU*1j7e2eat@>7E\r8VdG[*BkZTNJS,J(0=]V
%rntnjcF'ofC>ek#ZXe<%09rF.lj:b=P@8^0DmIZ&6:!1Gil_>djUfgl[fK2NRd7,#;'<4uK+'7E<(#KkDGiO(K9Pj9m$kJco."dm
%#0UP<Y0l]I3rFm*>TI976:$To`,@cC_as,@V;kirjH#TDNe`Q'J%g>td!6C9Is2JF(6lkEP),,(:Kqrl/u-=;&p8e^%Mp;b>k*!b
%QJ04]P/\Yt,3g@"Y#LU>;'%ZS/2Q>UL"g31f(AP!1J-K\Qn5"",bQ(05N?1nl\/mRl%1kN>U$72@)hF'_C!Y+9NBD089td*Lf._c
%\k]d]ao.*sr[amuEec,/QdVdPb_;8k:Y'TH]9GLENZk3?1.\?g0B.1LR3\V)odre.Fh,(^9#ocTZi"XVjUJj7;Z.]iJ_U?Vi[GE$
%n[nR_Z0NF+,>aM9<t;fWd)9LOS`C'Zop8@i$9Hi3DNWb4K_>`;!RKZaQDd7cDkb)QP)l?:d-,3>elGl5+%V;?:4QC(B*PJDOh\=&
%F2'kEFln[^l/0_p-Cg8F3S:67iH[G/QQd;[(-BVqlR-HpU+nP]\e@dqJY1:]QDV"r-QSL"Bndl91!([fU^Yn_@9!>2d*2V(\cEY(
%_u%63LX9,Lj=<F3qF?oj+M86dTc<><U:EQNMXa->CSQTeC6<:Z2k#m4>Wq;mL>E3))G:8mPYUDk(E_K>.Qlo,a^FEJ#a'lT$c%80
%_5GWaW'oTYn_>Oe_KgZ8`e!8i0S)N<YFG_PR%r4ChO(9%739=*i>Q9Z:Z9"&V)FJ\??L*@AKOIC7"A<<gatJ:K!cp49Kb[OMUh,X
%0pSIoV*.7Hd@Ms.dIGTZ-",?Zp@ABrE(m$'g=0X3dR/jR,_rPD_e<;03$[olVs![%-5fI0Lm_ON612qVnS6>4]DaiZkiCK/5K"W&
%gd6ML+B]gp$73)i1aPZ'6o'3>=bM;u8Q!F;[AF*.!eaiDX;`!'_`Bb@K8207H-?Vj(J$#1^nu*0iCmKV'.Mmh@>.(f$<3kar/R,*
%/ME'([:6<2')r[W5)\b@f<'T5nkk0V2lKkt1M.^ee^BD-H(5RWBc197o:mh`80E!XhVKR[X4TC'<iS!K:^*a0'mYUF4p0S"pf'ig
%W]*'mluT/?_+fDR+\<fU!\XOU\IYCM&Ch;5];IAnM"$<sQI[YW^up86/M@0%#*O]i5eMJ?iUrid1:r95Mi#h[(caue7oeTM$JGp1
%LqIF3jPgS`U.bVRh#XD[,C!^-_Y&N(97tarA@'@G-o<-j(E6$+du&F`>"0V$5Q3=h$)^VuiDr:7.@tA-%.>u+W%kosgQ)eET(pQg
%-PrLBj\1Uh%P\_[3jbnNL(9(Hb79#)#:Ql+-`(79=MRq"&n8s\H3S))LQJ&,J&$%4/-Sk%_$Ia8LCu6j$TZo_2]5,NYqG#E3=mKP
%:_l#%jZ@(foXn[DK3/12Yb^^e1`h\o@jFE9QKa#ljlrkL$,d^$JKToK=8'#2FP!Ym'":Xs]XI7[QZQ^*H#R"T+G9gJ^9-j_@(piX
%JF$<aXV-Gg#9-Xrb+S/#Kdu<(;W983U\0baK"(Qm"bBq6X(3Ij(uSF=IrJDK5#i9%)TfC$Mr9C,39S@iD/jGd3B<61F:^':%0*->
%q0YZ/(<0TK5;R\.qQ,RF.C7`PA;Pbc#n<tk#)O`sh_2#E<m$Zo\k^XrZ??+"M53f-ES3URK&&@/WKI;1YZs5Mc]^9C:`^YBo;(Fq
%GFTQ@=VmEEjofSo!-4ts39>,r8<N(H>s4R5ZJoW#-Pj53b+DZM7PuOqEd<CjY6iV"MYb8IP%UZS.A11"*T//+MKO('duX(nH20U0
%X[ug!)"0Xilk&VE:q%hqIH?/=E>[N@."HHsQIc]=S<T'Z\H<:7444T!k$IG73";t>i\pcI.-o0N=`YdfK\/ld\LX7Y!RYhn8B==c
%6,9_m4bJGnj\!2Pi"ER/@6#f3,dI8:Og#h=N=lN^!srM(O["KB$`O>5iFsP\=s=Uu=:\iUH@>i?#Y\gZJ5(\TGX/EIBF.)-_1k%m
%gm[akHWkhkL@,h\!!-&CZH:`=9nMc2SCtil,Sd3_e%mZ:NrW=<;r!=0>-ai$bo^A*1D7)Ln2<rM,3$CMB?4RbOiR;T8-1naE5foB
%5([Mh4poL<3q%`t+`br,cgq?-#jiNsAdt0OF?Y^W(nq+]%Ot-M1N3$MeL:N&i2n5K94Q0ao]_INRCBHNonmF6FB;&+q=O6Z&eZKO
%\0)'#Nq[3DKj<+k6jj`;ZDqX]s2^PaU@8$Cp%Wd>89OH3BB[5a?aacs!CEmA&oQq0O#4ANHNdQfD$IfP@c_;*8+)Q3#t0\]3WlVj
%_$Ki3!MjPMm*Ctff'8>E5Z@Bup^D=bGabJ#++0:]StniYj>LP[0'"(J&sI:6Q/q18Q8/Rd!.886.h"'%$)(G2<l2Z-U(!1s&-r_n
%;dH(SXlkHdSUZ(3P.s'>,pMH8&/M5/"LQI'hE[#kBhV0@!$Gi/!nAP0.*$=co.D_^Y`u?t[3pA0&CRnjKd-4"\Z@u*10k\S;%?m`
%/Qps2b:/`k[(_JZ#GeO6#gG"DYNG0B/)[%E]hfq(h/;'_QI\?0f+&tte!HSqHQ;ssZ``&e$p$nU%1-:qgnBg(_/kM:Yn.pK)fB%^
%:(UsLde;tFa'qCN]@s"L'5oCr`727lNISV)ODMQ<g[ok+]Ou%0,s`?TMk@maZT,)OW-'G'i0pfm&g$oNUq.G0#KF#[mgRQb`=D.O
%`s+PsqV!ejYr6QJXQapIP`K[2^;eBWQ7pTrgc!EmFK^>bRBKdT6M0X!/Is%3+BOJ@S\dc:=kN2q/.G2jMaKqC/"klS92/a^9/juF
%lt?ATa)/#t$P%B*h<LYl/2K1FruKja6+JTK8R)Rh>j\mhk0bh*XX$#D0qO)K"NB9Dfd+AA2oj@@&$5)\S'.m=Q^!Z%jt-p9b'T-&
%%L&raW>cQ=noT8i5LIh?!8F)/9oS7Nm$^IX't2UC2*7,d>[Y-f5ZLMP'jG!PD!A"VefYf5k2,>I(t_ZI!dT'%+P*2q8QsCVKk7Kr
%Jt^?K?'8?VIM8!g=ETRlUeK(6Og)/"H`@Ir!JH8t0ac(EAuUnIA_eab`+3fpS66t`&qclXUt\^pR0\6VOT@,lYWO1kM0s]N?%fB?
%(_:!;+RLU-#k=*G*EPok%Npac@;/4?N-0A4`lCUoO;FM>(YNn#>$oZR&W,Olm"lUT'T;CK4652\ifJo:H8b=a5'niI"F*e(W?b/0
%i=RiJ2_)7]X9+fDqM?jQOb,eLYK)PI-S#d$kF#=&mho%=h83+J=[PPH1>6ctcg;pB;m)^Eb</K"<'09XPNjVOe]hrIj"75had-9I
%E2?`oO&qNs!H^,'*U0Mi$R!S!9U0<.!.t;R\#h)#a]U!HU<6(FaiVSkEcE3:jd7OY879/H.,(CuTpoJ8KHmI^nY-'`.p'^o&@sjA
%?rM3=/gtKD]B\g"k-%]P'&:'`H2qf!C@;9pP6L4FPTa[I^At![JZ0u6dHn/oM?V8!;b9m*?t(*-C$S'!b@=E"E:H$_Kk%,DK/7dE
%._)TE,?Y,(P+#-cq$9_\l@LCo3,n2,`DcjCL[JGD=06bC6N'@ll*JDX^1((;p1[Ym?7[s:JU;p:3_9YH`6OYP"b\_5WWf.oO9$"%
%*5c&cSlISbD,>J"j_-=*`<2+_mPOuTK^a%t,>%5nCsuS<Y_)(d>9.8nM"bhD7T9dI#td.<blK"dT=)2E#C5/ZK>>QiR(fR5)FSJc
%f.hS=XChT.E_$7e=G\j6Q,H_,7%@kjl)a+_CPrM%#mo!:oh?$rWojVK+lK,^<RQi"#gkG_9JIDu*EPnt,B$^4J/--]-?Vshg)`pW
%/eDm):Y=kF:d_]-SH=O[lQl1?!7<*QV4!H#%OXiGG?tRtQcnF.'%3i:;2+J/[`j^iQ#_Cc8-QF&mY-6Hg0K\&(YFfV."#`I"Q.TU
%L'@W>$j>gmg5p3pL?fd_!=Ns5k&'uGLQXBhcbSA7%^28)#Z`FtcVtl*Cq@?<d@7TZodQ,o[qiZ#3%W-^XF3cDc**0Bb`,tpU(`cm
%dE%/ZpcP\Sk14XS1N[/Y/`2u'rBTRCPn.A*[$KHZ0S@gn42!A"coN)dSqhJ;gkPGF9L?n"J7BU?9BQCAO?UnEn@G(iW(l1$[SlU&
%0TOh1J57&geb'i]BlWZ?+%je,k^9U<kZAp<V"ujUY%NnVl_$spC,r'/edic(c@t<05mXICoVHcS?M\*-5$lIiUp!%))2XX`&[4`P
%(Jrm@&OC2Uc;7CGF&RV:!0FIZ%Q$RdW0e_Hp_8f*`[NJjJ%(hN_b:NuJ6*gi$dDC.Li?EHphC,#42kT0eeW:iGEH6J':BVoB8c:<
%/2R%_Efu\d(IKRgqGKSBWOkZJe4LbUHl2>C?C]$k@'(PtZ>Y'<9.l\4\X+DA\j#@J9!MG*?!/![4;Q3WM@KWV#M^=YQ^T/``,IE&
%S/IR_%bZoE5_r%nUQZ>a=`/RsTnC-4D5bUdYiM+O4K$jsEm$+@,bBMB^f-I!beLT.SpE!ZcL[aUT!'l@qs\nDMp@N;D;IKb*J&cl
%>Z9_m,leL>Ch6U4WfVf`I0jIt8dhb5Q-0PB+;1D3n<!V`d/*$Q"&Ep(AH&r:fDAe%,49\Q?,`CeO^KsX>.^iTrO=#gpZN,np3_kq
%1re%B97G<E#+0:i#upS;JMamfRHG9O4N:[o<A;16:M4jULC)EP#8"@Ha-&n90\%:%mr?AE9[k1Z44J>TSNcU6:O1%]g^T<GI?Wh@
%0$%Q)\TOEpW_"hQAXt?r\l?R(3PkC48!E]V_d#\[`"J7!B]*a+*)qVInm?QWiH4WoUj:%mes8M*k,;0<!GS2jou-GPTMIUfa4)<u
%SU!h(1Oth)UDdAK\,`5#%-A#cH4#IOD.?d:_,3bD;+ghfWM0e?-f3'uXPW#PX;"O&'maYqS]m;ue\q6=;`+%\&B=17CH=S.$J=B/
%P8es8`<HgGVWm/mPu#l7Vgu-"`SeVP"lZA+WNu:J-kn]bPTC)dgCce&IC=h`NEPr?:PE=$fPdlW,c$4:+d7nHY"o(HC/P"1@,Rs&
%#kTYOd!OT_5qjs:,u&A<U9u<=lK\>eQiq)#n*3(!h+s[C[dKp?6%>2U%S.W:PfM>V.C3cG:!_bSL!*c1HO0fWYh(AI,kAP]nrB;5
%;1pimB"'_R*Q],%OqA(K[]@:H"q\RqS?c9=)Ef)`>p$$c)VVG6Us]dK.5WG<&5Ie4>fANCF'IpdA4>-]C$NAS'nPd'S)>!D6_EJs
%,e+N:.QT`q;:M;cK\+mLKOU["ioAQ5I!u7;Q3RbS[c?"d(JI<7[YkN,XlqcG)+\$8&^_c3CM33\:$nTK"T/:@h7Y*XUUAkg5MH8+
%o)A1W!&E%`oAB7N6('fL+.A7B=#[_g,h3.8\^-SjT&M=K%YG&_^22HdA#jHujK%#2$#`T^c5a^qn/HCa1&aojN8_%m,HE:KX\t!p
%*#1j*<3JpNUf;JJ"%t4FjDc,1"eW8toX$fJ7@=,(=G"4`]OK>l@dD^VYq-Nfn:o;4ml$J79bZGmi&LdJl0%^GhT,jg-Z,n'o:^N]
%ci>3ZZk&Q9c^HYjG=WO4oG1,$Q)2A_Jt0SWc:9*Ggl"N>'fC?e>#g;bMgF.H,ifo1Ac.4hb/(QgBo)m#L"?=u*D:=Q?;Y4;MRL$V
%jXnc`fJSr6rF.H;,",&57B_q2hm$6Q*H4WqQE.T*C9_f#'&jfj#J&0ap(gfI[2&-u;'JCr%13jcU\4gpSQF[W+LWrF1`nZZkA(KQ
%*5dMDgX:9Ha.,`k%:n.BnF<o:hUY0VS9f)tIr5iE&e4#S['!qMjPmZmAs=-?117kJ*=i9@QJPjp;ul/mb3ABL"Ps'd??#%kcfgMM
%Nt4M$I[mkpM?7]8\f3$gpHf\ZRZgKV'i=f%)e/+/"KGTQEuJY)`Nb@'e*6")P)S<,/-/e#'`oT?Q*0nNTNtDN"JaBFW6*'ALhJnb
%Y$20o$-BS60NkI55TNS@4iZ6VE17VDe!N;LRQSLU'CkU-G1s$gC:BflT-.KZ.S3L^a9mQ);$sJX5Ap^!*(#?h"iJlXRqjVnU_i]/
%q(q4XWp*#n'h&NPdCU[;k,IlXP?&&.muF(P4,6##qd<$0Q?f).#ia9%ShClC7?hoHFW'";NL4#GGT&)DeigkNO+PlI&5n2ol]omb
%oS7Z[D+^Ye\jqE7SLpfh[:@b:bgOA%q3XnJkM3iTfMV(J8&k+;qlY:9/']nJL'-CM<LW?R4EB8Eb#EpT5+=mM-(TJ_a/@&MGVOd?
%,o82)jh0n#-$Hp,,8=6TLpeUD)M'=,?.(lfF_0s9Apaq6%aU9Gg2e?PVP3n,j8WleY+%L1p^>&)(`*5c^KUin618;E?g#kOCBMnW
%I0Wmg%uii7hNdgKO'/DG,J2_DIdE!UCWnHBL^h2@"riVI!C+e;BSqPt;q71rZirGqH!$K*Dr@XNUcloJ)uR5ms/l]+!mGJZ>HWNQ
%=^Z$4VFm"D^`+?;@)mA>oU:)-:"\gf*%W2Q'=GSDBaPstI+2oJ:k=<ZC\@@0_I`F5Sp*Z:"qGrBRF=]dNq.3L^i-?^H1-K!/.n$<
%TVVfR)&?[!0]m5mP0ZC$6S.(%6AU"+rJu$\nS7(IMVNO)A;rCh1OSqM#eOL0U1K/#3KPMF3gcbk%#W&m!FTd`5-IA?.N($N-W(Pf
%D<OmKb%]0=.FC*[Ou1GoArUk^VK#*)1MQ][(.lIEfOrO^Qu@5*c,@e,dPtl51sQo305m_igN]kBahd#g/Qq*Bg3q@WHJ0P$QUBdQ
%8CBIZQo3.iR`66@Mj]ri`*S?I'mk(e<4k)c=sUIu]>ciUIOkHNA^Atqm>KTLG4"TcPk-Mpg-D^Hs)CR4<\O?)=P3uhNPGuKM$pX3
%8%R6K8q][,*jBTGD[HMQib/oqLBJCO<?Kif)e'W\"BOKAAlb^sYtK6S)#*W$ZacX*rpcf@a<H;+2oMlP!QIC[0PVr%rQO^V;2ae4
%FLYUVb\)I5k=TI5\dEW_fPoUWGD?IN]I&YI,c9j/&I#$H%?\g2ctl-h#3(W5!7]"G)eoM=2F.T>-C@(R=@)@c>E+WdlB'g<]Wu5b
%N8AQP#&gq32.XXr)B?\p#*!P3j_MdA9PuX.(YA79pA[\0ruZe;rZdNCs5-'SE'Dhj\S$]K'sk9sN<K;oUk5WXUA*o"^#fnD<e<>e
%X<UZT$cHQD[+(rS(SPg1'&nMYQA!J7WDXD044\2Gn;Z)lN5Pc0$r7C]Bs"`Z)qZ8C+XPa,[XJJ?ldUrk;$hC2!Q?eR=)OtQ:/qmX
%BN(*6#WK4r).uqY*ajL/,E+X#=;V!Bb\<'(V$Mg6]N*;(4nBS4$7!nP2c(@e^<s)@FFr!C"EP6m0&af4TdbQRI]^Jh;*C-u'uF3/
%)D>>U$4Rq(RLDSG#<cDic#*5A#9Ue'OAWuZ-"5nC1s]qqJ3n#pPUtjCC@MKjkaFhY8]Sc5JOHdJ0c3]QBSG&M=p%%&eh/4GJSApI
%0QN^p/tI:td$"%q,P?gYcdWsBH)hLI[`t3?(lQXblOIn!Q$Mg."IW^Ed=[bWfTKoN"5_sqh9^ZW-\oWsn;kX'+dnF!a*qei%jR7q
%g,P(e6@^P'Ur`0JZ7GIIhF_rV\ke^%%==!0%\6c3K2W53O@[se2p4ZKbJL>H",8>aPe3/U0.Y+pa,>6=I#Yt5V&72?$-k_(=E=nu
%XL88.$u?5a-%Z9kTu7kU\lCq?@8kjl"5?G5`,&iN*.X?/</+PHSf'UX?bD<P,^a:-r&jtV#$c:%RL=FLpt'n0s5QP?U^P^EcGOts
%0?9;r'g+9n#pEfZf3c1.#!?RTI5I,].0aSU2'mu<IFnXX\iH(r-87-&?@@F8`H\QXZ1db;,[#o.0,s&u_!(m#b5c!f5.1Fd)KW$C
%+"O>.!_f^eTM@4FS":j::EbM^W4+bkb7"t%rA.PEFG:IY=dG._8q<nt#s@;!RJALIG3:.AC?2?p86eKe:AZT2Y*A1C46,k2LMdl;
%#JG>!^#tbX2qlZ1g"9n7<%uS+!flGRVm!,7X8@QC8?/;7H*@A"3EPEk`c-#\T;!*8f!2@d!Yh8@F)9P6ON-Qq5<N:_54,obVR=gE
%7EuM\;@J\G/VA'2c]#f)i*[N3#m/-kN=qNi9)(NU9&-:ZLRPZ;gW<:M+C"D1T2bt"?eltce:AT/1`dKum#^b02\=<+I'B1\f@8Pl
%Q+5)s:OVs7$L"f04CLQN>bRQ%];GYZ,m!-[<Ck\Xl63T0h&duB=3<dV;*Mf!(29u'*605-"Ku'#7^O*Ud\R"[Im%^P^SYV.pM#Jg
%ldO6sO_:fJ2k?OV(;-YG>&-004](1o&<lfOGMD^>@(t3d_i=BuAd!EQ25CR,DHCIB:irB4#fAoC<!:]1Q/T5$O#S@?6c)<C=,'s>
%Pm6)r&Ku39CSIsN(3p8ZKb3jf#*3pm,VTFEM3!D<jYMiN0%KYW8odJ?=a&?n:9pdKLi=PUq&+\u7)*[?k`e/1AE,p)at\Q6!]MM9
%"'I]LQpd,P5T5:U<gH']N&a9!3<ZsF@."#thF\IJfVHpsd4iYg#"h9s1[o=E4d-Pd.eVO1K-E(-im-g?B8D9D2XCES8j!_")MD@%
%\#3Kp5i>6eD7#1=9a8\7&/lD'BRmpu2"`'ZJ/8r^\m<4`"'7h5`skN@M!Y@a;$Q7^WsM,EE(=FkXX##]9$faF\V#$mb`bDQ/tu2M
%TI\rf](/@rJ1+0B=AY&S92$*E\7TB9_5!:THcCdO<EFHQ_(6^M*V\Nqo;%8EkqicQXS0q@8%i4$AhLT6F_>s;[`ptK/L;[L(rQ]9
%TTKtC:"s!U5ohGH4I-8HgkQWZknheZeZ?RD!cnPCbQmNn`3/Kn$3^*%fG+p1e=T'65T^+`9>k[<h,=<D]]Ef4%oT7hV=N>t&_i8o
%h[HR",t`r2&)]Vnqn@hj'6)BH_`ooqF)S)4E^7\.5sbmo?qf*.cC8<2UUa/\.q@.7q.XQY;IRhW1jnML%Gt/+d'=]Gk03ESAr!A[
%ZK:VJ0oP^JBP97sBQBA_I2/Cb90E46,ERk$RFDYVCHnT&Nhr0f:@g/Cpr,lgf\CRqlm%d5J;u>nN!tX/e)=nD&eLi2WV+ThQrA:G
%K+6;S`oLF(0H)kl)lHWV(u9/XJLPN0&#KsJ[:p7c3j>bq8&0hjC[Cl$OZ7\K"<M[UQa]W*TM$7GeuHstBN]B1'[5k7ba;EN[K)7q
%@SMIa6(Ra%*0q`jB9/+B]JW,9%Rg179C37kd?L0kXj:+"dJ?tAo@.QCIl-fB%""PpeUV>HA#]-PfrtqU3qRFj3;AON'12@2GZ/92
%:?7.S:M^8GaQPgEGul$R3mp9_Y]$'=hs,CA$DdeuCJ##b[,cU$2KVF/6[_[?+]VSV=KBo7(^!TB[tNOk)`p3d\5SD<B>db!ZG2S(
%*#V&+IEE=$'=_&-1(/F]-IAb.>.7,r:9!lW9f>X*<^-`ilh.&ole:>78i[$aVXafH65T`#"pc04@A4/YjS^b@g&^Jh/8G5CQiBm^
%Mg7cTAOqJRS0poVK?7jkSII9eg25`EiMfU/n^.n^"$QbL^eZcGnR@g>2*MFU$Fu+-fV7mJ,=KUfd#qkH:`BUu5NK+K"#2bX*Ii03
%=#&ra@>$IRJT_F8'$(tj`W/P.@c`O9L=%J*X6>T='T=)s"-'k2&saWHT*F%J#6Tq2?j.UI$dlp3+3h&cc/p.\$A6TJ=cXAInpHGM
%DS7J?b)PGm7o=`hYi-CSG2i;Q])[qF&LTlA`0RpZ&#KpoGOuZBJ)PKDa&,CR0P'4_Ne%O50fsa/1L",Q0tQ22[F_),;h`8.GO&gb
%QU!:Y1dkkXDnrm!!lJSZ-_ZISLmOC_f53upP*r4N\hV7'MFnh!_1G[@WDg\cOlq*`6g+aD,UV%(9%Dja,ImEOonV=b*=tB/T'V=t
%M+n;8V\nX68H=\'06X]21l[G-=Hu^AcT>1Z2%i`$9'C/0m5icI.<WbLNMPZsn2e3=S+HWK77e]>dSUV/.0fff>!*#DOfeDcD53T!
%YYSm8q-8r%aR$&[(cs[DU]P56.U>*C'W[&H8>lKB#S2kZYm.,IIHj%'/;LUgJ1pmAWKd.9.>\MX?&C7OhJ8iSEV]-U2_5KP@6T-M
%89")-fHq24JRd'@%6Q;(=3H^`]q*4nNhPt5%hEUB'@\_(eSL*edF]XB6(`JanY2B@B#DF2Z@h[(Hm_D(9ZOU;=ea`FbfToqOZo.)
%1"[)]PA%rG9ir!qLCJdE?BhVnQ+YWoWe+"I-.%j,`LaepOBO.Gm#tA=CbeO+C1bFmbui@$G3`J/+ck,1L-;q[7f(D7LqTIAg[D"T
%0sE9-]:X:@[O8:"-r3&VoV-R6Zn8jR-tmN"7ntOe"[b]+OagDoMc>o.+IOgLO6oEl`D^bj?Uo(E^&sQ(Vj=fAB_72MdEFZS<WgCH
%75_W\"GSK8e36sZgER3AH/\VsegH@2\jWf:X^lfk7#Sg&$<5gS#U()M>"HU]np%EsT!'l3Pq7p[(ja;WWFcbR,SI*'FH]PZ%oPtF
%jWliNN`-(RCJUFIhDj[4p#JI=#mjU<!`_OCX=g1tab"o9q03a-ADoZJcC[g>DD`_O!3&*$<51s>#!.I*$5,@cVY<5P<3eIiB]5R,
%.`r_k.n=W2%]Zgt9G\tGYT%4i@,+DsF$_'2rsY,@Hcst=]Z)cQTsIGN.D\H+d\K[p/_F,16FLDXU,#R"80;c/lufMZ*gE]a4F]?V
%*-((E_Gka$hJ+Xu_rOfOTADVENg=TrS.9KG;>k(P8/)o.l5kLU3Y.X)&p[8noHYG($`$]kHrb3<cCC.EWPF0aOic!"B0)qh$fa),
%=N^m"5>01[Wm=HKnaU(.I^GEQHE@ZHlfnr%(g%f$$f"0ACh&KHot)5B'+;OKYp2[DPJA>CfQJAa]Y61b&ZHdiH5o)0#81'cTCf<(
%0sb"X/L+FAdi#Zr7%nn_^h.;sjbQa)&CKE1(:>iL\KO3QT7?dFlQW^&A@:?h#%[;<]a8='dM;FMKY<<JX97)d!<C\($dmXXnArX_
%N$Nj>Y5=^O-=C^iJ='_[>\Ug3Da\0qH,GI*\P7%d/n=%ij:"U?)5-)*15YV$Sc-db&;)Iph.B6rk#KKT$U;(Gk-)A[Fr8C;YEV:C
%kf7Yh9a5*">T[&tc(dh-@[feC'nE).N%#!B>Re@iU_SBlR]au?JCjX2GkID2N`or:D,?<<YZ!@\cH9ooe7-"k-R?r6#P30EfYk:R
%q1I';#0O!/a0TYVW$$+r&mQlK[d+-&&H?l'6!YUK=KoBP:3BW`B$c.V1A=i?0RG,:0RrAqk>sp\m^0!a7#W,nqptK\#d)0jU]ME^
%8j$DMNr\,PX!>*F0p&Mg2KcHm('.gD7/.a3S-dP;GY!T&e'<8OBZYlfZ\CUdqRFA1-B4!/%r%*Se\J)5Ub,5RXk@s)*rSb<**8$e
%&q98Sk>spT25QeZ[08:p/h532VsmVEq,UJtXDf.A\GsD.m5cm5U4JpY8E_1j=^M5VV)#94D(\23f*-k*4Tdu:g237G(dEY'4Ib!5
%1%]HP;MbEhG6&;67.>rJ>HMcsU@DMu\g!uR-6`p%%dTZ!@$>//7:?<eA$m)3AcnU*I%ptJd=f?]60&6R'e!c@m8Z(LIRb)j4Qcle
%+tR?8-4)SA&(Q&@CG>srdL9RAT4-tRn0oSRV+@E$Er[fn.'d*eh`#r3a!nE2?#FZtk.V)0;n-.jR\9(9=@0QBJ?o8IL#30;Ei<_D
%800&^LJ6[<Ph/4&,S3_hk(P%]7b(RPrsYo!^8<,*./=L=B;1"aR()1`%`sT,(ah9*-6#_GjPeq9\5E;;\Be6_BhYSdj.^h3>"N-s
%bWUpn8"u`\_*\5Y<F)uB"pLo^;AK4LN/C4VM_Z#,;4uC8WBD6JYoeQYjle9]m*PASV0,!N)\OnP#a=]E$A'pf45CT>!W<<i8s;kP
%:/_8JLsbB+I#<S([Tf?s-t6A=lk':_J5ciqL.'!k5#(FKUcD;B,*,f2nb`ahVhENrrL2NNIWNjtK]`4e*_Js<=74j^i[cdXgZVF`
%_^lP$8FAA@F14SAm1JK0Q'm/%#KPa[0j8['ZmLZ/jRK5tSmMNkGe!bIX+1'7msb9,T7;*5q;J4n^]!t8hu3i4YMhBlIt%"_gV<dZ
%o++'7s7Ybs^A6UFnLs?\r9;D6q"?Xbrs<%=/+)`5J,J`hkM*1ip\Xp_qtE>To^eEYDgqPL+91RYDh%]Dqg\U>+("-P=24XMGCQpE
%XtB82hu1GgJ(DrK9A%i\qrXe0?[d=Q0E2gfpWHq1[pT0tm=5'.?iK$qhd!tcIR!i%msb245CE@3hu3ISIrte,qJY8?s4op;r9Y$@
%msb8t0>@J0\,Z'3[r6co&T.L7ce"fG^An#@^O5kAkO7:,o$9Q!0-EgH$%DQJ^\b57jd3aWhn?<M0)~>
%AI9_PrivateDataEnd
